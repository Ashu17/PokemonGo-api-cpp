// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Inventory/InventoryItemData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Inventory/InventoryItemData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Inventory {

namespace {

const ::google::protobuf::Descriptor* InventoryItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InventoryItemData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto() {
  protobuf_AddDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Inventory/InventoryItemData.proto");
  GOOGLE_CHECK(file != NULL);
  InventoryItemData_descriptor_ = file->message_type(0);
  static const int InventoryItemData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, pokemon_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, pokedex_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, player_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, player_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, player_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, inventory_upgrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, applied_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, egg_incubators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, candy_),
  };
  InventoryItemData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InventoryItemData_descriptor_,
      InventoryItemData::default_instance_,
      InventoryItemData_offsets_,
      -1,
      -1,
      -1,
      sizeof(InventoryItemData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryItemData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InventoryItemData_descriptor_, &InventoryItemData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fInventory_2fInventoryItemData_2eproto() {
  delete InventoryItemData::default_instance_;
  delete InventoryItemData_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Inventory::Item::protobuf_AddDesc_POGOProtos_2fInventory_2fItem_2fItemData_2eproto();
  ::POGOProtos::Inventory::protobuf_AddDesc_POGOProtos_2fInventory_2fAppliedItems_2eproto();
  ::POGOProtos::Inventory::protobuf_AddDesc_POGOProtos_2fInventory_2fEggIncubators_2eproto();
  ::POGOProtos::Inventory::protobuf_AddDesc_POGOProtos_2fInventory_2fCandy_2eproto();
  ::POGOProtos::Inventory::protobuf_AddDesc_POGOProtos_2fInventory_2fInventoryUpgrades_2eproto();
  ::POGOProtos::Data::protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  ::POGOProtos::Data::protobuf_AddDesc_POGOProtos_2fData_2fPokedexEntry_2eproto();
  ::POGOProtos::Data::Player::protobuf_AddDesc_POGOProtos_2fData_2fPlayer_2fPlayerStats_2eproto();
  ::POGOProtos::Data::Player::protobuf_AddDesc_POGOProtos_2fData_2fPlayer_2fPlayerCurrency_2eproto();
  ::POGOProtos::Data::Player::protobuf_AddDesc_POGOProtos_2fData_2fPlayer_2fPlayerCamera_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n,POGOProtos/Inventory/InventoryItemData"
    ".proto\022\024POGOProtos.Inventory\032(POGOProtos"
    "/Inventory/Item/ItemData.proto\032\'POGOProt"
    "os/Inventory/AppliedItems.proto\032(POGOPro"
    "tos/Inventory/EggIncubators.proto\032 POGOP"
    "rotos/Inventory/Candy.proto\032,POGOProtos/"
    "Inventory/InventoryUpgrades.proto\032!POGOP"
    "rotos/Data/PokemonData.proto\032\"POGOProtos"
    "/Data/PokedexEntry.proto\032(POGOProtos/Dat"
    "a/Player/PlayerStats.proto\032+POGOProtos/D"
    "ata/Player/PlayerCurrency.proto\032)POGOPro"
    "tos/Data/Player/PlayerCamera.proto\"\322\004\n\021I"
    "nventoryItemData\0222\n\014pokemon_data\030\001 \001(\0132\034"
    ".POGOProtos.Data.PokemonData\0221\n\004item\030\002 \001"
    "(\0132#.POGOProtos.Inventory.Item.ItemData\022"
    "4\n\rpokedex_entry\030\003 \001(\0132\035.POGOProtos.Data"
    ".PokedexEntry\0229\n\014player_stats\030\004 \001(\0132#.PO"
    "GOProtos.Data.Player.PlayerStats\022\?\n\017play"
    "er_currency\030\005 \001(\0132&.POGOProtos.Data.Play"
    "er.PlayerCurrency\022;\n\rplayer_camera\030\006 \001(\013"
    "2$.POGOProtos.Data.Player.PlayerCamera\022C"
    "\n\022inventory_upgrades\030\007 \001(\0132\'.POGOProtos."
    "Inventory.InventoryUpgrades\0229\n\rapplied_i"
    "tems\030\010 \001(\0132\".POGOProtos.Inventory.Applie"
    "dItems\022;\n\016egg_incubators\030\t \001(\0132#.POGOPro"
    "tos.Inventory.EggIncubators\022*\n\005candy\030\n \001"
    "(\0132\033.POGOProtos.Inventory.Candyb\006proto3", 1079);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Inventory/InventoryItemData.proto", &protobuf_RegisterTypes);
  InventoryItemData::default_instance_ = new InventoryItemData();
  InventoryItemData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fInventory_2fInventoryItemData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fInventory_2fInventoryItemData_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fInventory_2fInventoryItemData_2eproto() {
    protobuf_AddDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fInventory_2fInventoryItemData_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InventoryItemData::kPokemonDataFieldNumber;
const int InventoryItemData::kItemFieldNumber;
const int InventoryItemData::kPokedexEntryFieldNumber;
const int InventoryItemData::kPlayerStatsFieldNumber;
const int InventoryItemData::kPlayerCurrencyFieldNumber;
const int InventoryItemData::kPlayerCameraFieldNumber;
const int InventoryItemData::kInventoryUpgradesFieldNumber;
const int InventoryItemData::kAppliedItemsFieldNumber;
const int InventoryItemData::kEggIncubatorsFieldNumber;
const int InventoryItemData::kCandyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InventoryItemData::InventoryItemData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Inventory.InventoryItemData)
}

void InventoryItemData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pokemon_data_ = const_cast< ::POGOProtos::Data::PokemonData*>(&::POGOProtos::Data::PokemonData::default_instance());
  item_ = const_cast< ::POGOProtos::Inventory::Item::ItemData*>(&::POGOProtos::Inventory::Item::ItemData::default_instance());
  pokedex_entry_ = const_cast< ::POGOProtos::Data::PokedexEntry*>(&::POGOProtos::Data::PokedexEntry::default_instance());
  player_stats_ = const_cast< ::POGOProtos::Data::Player::PlayerStats*>(&::POGOProtos::Data::Player::PlayerStats::default_instance());
  player_currency_ = const_cast< ::POGOProtos::Data::Player::PlayerCurrency*>(&::POGOProtos::Data::Player::PlayerCurrency::default_instance());
  player_camera_ = const_cast< ::POGOProtos::Data::Player::PlayerCamera*>(&::POGOProtos::Data::Player::PlayerCamera::default_instance());
  inventory_upgrades_ = const_cast< ::POGOProtos::Inventory::InventoryUpgrades*>(&::POGOProtos::Inventory::InventoryUpgrades::default_instance());
  applied_items_ = const_cast< ::POGOProtos::Inventory::AppliedItems*>(&::POGOProtos::Inventory::AppliedItems::default_instance());
  egg_incubators_ = const_cast< ::POGOProtos::Inventory::EggIncubators*>(&::POGOProtos::Inventory::EggIncubators::default_instance());
  candy_ = const_cast< ::POGOProtos::Inventory::Candy*>(&::POGOProtos::Inventory::Candy::default_instance());
}

InventoryItemData::InventoryItemData(const InventoryItemData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Inventory.InventoryItemData)
}

void InventoryItemData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pokemon_data_ = NULL;
  item_ = NULL;
  pokedex_entry_ = NULL;
  player_stats_ = NULL;
  player_currency_ = NULL;
  player_camera_ = NULL;
  inventory_upgrades_ = NULL;
  applied_items_ = NULL;
  egg_incubators_ = NULL;
  candy_ = NULL;
}

InventoryItemData::~InventoryItemData() {
  // @@protoc_insertion_point(destructor:POGOProtos.Inventory.InventoryItemData)
  SharedDtor();
}

void InventoryItemData::SharedDtor() {
  if (this != default_instance_) {
    delete pokemon_data_;
    delete item_;
    delete pokedex_entry_;
    delete player_stats_;
    delete player_currency_;
    delete player_camera_;
    delete inventory_upgrades_;
    delete applied_items_;
    delete egg_incubators_;
    delete candy_;
  }
}

void InventoryItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InventoryItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InventoryItemData_descriptor_;
}

const InventoryItemData& InventoryItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto();
  return *default_instance_;
}

InventoryItemData* InventoryItemData::default_instance_ = NULL;

InventoryItemData* InventoryItemData::New(::google::protobuf::Arena* arena) const {
  InventoryItemData* n = new InventoryItemData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InventoryItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Inventory.InventoryItemData)
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && item_ != NULL) delete item_;
  item_ = NULL;
  if (GetArenaNoVirtual() == NULL && pokedex_entry_ != NULL) delete pokedex_entry_;
  pokedex_entry_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_stats_ != NULL) delete player_stats_;
  player_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_currency_ != NULL) delete player_currency_;
  player_currency_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_camera_ != NULL) delete player_camera_;
  player_camera_ = NULL;
  if (GetArenaNoVirtual() == NULL && inventory_upgrades_ != NULL) delete inventory_upgrades_;
  inventory_upgrades_ = NULL;
  if (GetArenaNoVirtual() == NULL && applied_items_ != NULL) delete applied_items_;
  applied_items_ = NULL;
  if (GetArenaNoVirtual() == NULL && egg_incubators_ != NULL) delete egg_incubators_;
  egg_incubators_ = NULL;
  if (GetArenaNoVirtual() == NULL && candy_ != NULL) delete candy_;
  candy_ = NULL;
}

bool InventoryItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Inventory.InventoryItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pokemon_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .POGOProtos.Inventory.Item.ItemData item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pokedex_entry;
        break;
      }

      // optional .POGOProtos.Data.PokedexEntry pokedex_entry = 3;
      case 3: {
        if (tag == 26) {
         parse_pokedex_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pokedex_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_stats;
        break;
      }

      // optional .POGOProtos.Data.Player.PlayerStats player_stats = 4;
      case 4: {
        if (tag == 34) {
         parse_player_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_currency;
        break;
      }

      // optional .POGOProtos.Data.Player.PlayerCurrency player_currency = 5;
      case 5: {
        if (tag == 42) {
         parse_player_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_currency()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_player_camera;
        break;
      }

      // optional .POGOProtos.Data.Player.PlayerCamera player_camera = 6;
      case 6: {
        if (tag == 50) {
         parse_player_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_inventory_upgrades;
        break;
      }

      // optional .POGOProtos.Inventory.InventoryUpgrades inventory_upgrades = 7;
      case 7: {
        if (tag == 58) {
         parse_inventory_upgrades:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inventory_upgrades()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_applied_items;
        break;
      }

      // optional .POGOProtos.Inventory.AppliedItems applied_items = 8;
      case 8: {
        if (tag == 66) {
         parse_applied_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applied_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_egg_incubators;
        break;
      }

      // optional .POGOProtos.Inventory.EggIncubators egg_incubators = 9;
      case 9: {
        if (tag == 74) {
         parse_egg_incubators:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_egg_incubators()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_candy;
        break;
      }

      // optional .POGOProtos.Inventory.Candy candy = 10;
      case 10: {
        if (tag == 82) {
         parse_candy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_candy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Inventory.InventoryItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Inventory.InventoryItemData)
  return false;
#undef DO_
}

void InventoryItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Inventory.InventoryItemData)
  // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
  if (this->has_pokemon_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pokemon_data_, output);
  }

  // optional .POGOProtos.Inventory.Item.ItemData item = 2;
  if (this->has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->item_, output);
  }

  // optional .POGOProtos.Data.PokedexEntry pokedex_entry = 3;
  if (this->has_pokedex_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pokedex_entry_, output);
  }

  // optional .POGOProtos.Data.Player.PlayerStats player_stats = 4;
  if (this->has_player_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->player_stats_, output);
  }

  // optional .POGOProtos.Data.Player.PlayerCurrency player_currency = 5;
  if (this->has_player_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->player_currency_, output);
  }

  // optional .POGOProtos.Data.Player.PlayerCamera player_camera = 6;
  if (this->has_player_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->player_camera_, output);
  }

  // optional .POGOProtos.Inventory.InventoryUpgrades inventory_upgrades = 7;
  if (this->has_inventory_upgrades()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->inventory_upgrades_, output);
  }

  // optional .POGOProtos.Inventory.AppliedItems applied_items = 8;
  if (this->has_applied_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->applied_items_, output);
  }

  // optional .POGOProtos.Inventory.EggIncubators egg_incubators = 9;
  if (this->has_egg_incubators()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->egg_incubators_, output);
  }

  // optional .POGOProtos.Inventory.Candy candy = 10;
  if (this->has_candy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->candy_, output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Inventory.InventoryItemData)
}

::google::protobuf::uint8* InventoryItemData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Inventory.InventoryItemData)
  // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
  if (this->has_pokemon_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pokemon_data_, false, target);
  }

  // optional .POGOProtos.Inventory.Item.ItemData item = 2;
  if (this->has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->item_, false, target);
  }

  // optional .POGOProtos.Data.PokedexEntry pokedex_entry = 3;
  if (this->has_pokedex_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pokedex_entry_, false, target);
  }

  // optional .POGOProtos.Data.Player.PlayerStats player_stats = 4;
  if (this->has_player_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->player_stats_, false, target);
  }

  // optional .POGOProtos.Data.Player.PlayerCurrency player_currency = 5;
  if (this->has_player_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->player_currency_, false, target);
  }

  // optional .POGOProtos.Data.Player.PlayerCamera player_camera = 6;
  if (this->has_player_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->player_camera_, false, target);
  }

  // optional .POGOProtos.Inventory.InventoryUpgrades inventory_upgrades = 7;
  if (this->has_inventory_upgrades()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->inventory_upgrades_, false, target);
  }

  // optional .POGOProtos.Inventory.AppliedItems applied_items = 8;
  if (this->has_applied_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->applied_items_, false, target);
  }

  // optional .POGOProtos.Inventory.EggIncubators egg_incubators = 9;
  if (this->has_egg_incubators()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->egg_incubators_, false, target);
  }

  // optional .POGOProtos.Inventory.Candy candy = 10;
  if (this->has_candy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->candy_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Inventory.InventoryItemData)
  return target;
}

int InventoryItemData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Inventory.InventoryItemData)
  int total_size = 0;

  // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
  if (this->has_pokemon_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pokemon_data_);
  }

  // optional .POGOProtos.Inventory.Item.ItemData item = 2;
  if (this->has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_);
  }

  // optional .POGOProtos.Data.PokedexEntry pokedex_entry = 3;
  if (this->has_pokedex_entry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pokedex_entry_);
  }

  // optional .POGOProtos.Data.Player.PlayerStats player_stats = 4;
  if (this->has_player_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_stats_);
  }

  // optional .POGOProtos.Data.Player.PlayerCurrency player_currency = 5;
  if (this->has_player_currency()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_currency_);
  }

  // optional .POGOProtos.Data.Player.PlayerCamera player_camera = 6;
  if (this->has_player_camera()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_camera_);
  }

  // optional .POGOProtos.Inventory.InventoryUpgrades inventory_upgrades = 7;
  if (this->has_inventory_upgrades()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inventory_upgrades_);
  }

  // optional .POGOProtos.Inventory.AppliedItems applied_items = 8;
  if (this->has_applied_items()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->applied_items_);
  }

  // optional .POGOProtos.Inventory.EggIncubators egg_incubators = 9;
  if (this->has_egg_incubators()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->egg_incubators_);
  }

  // optional .POGOProtos.Inventory.Candy candy = 10;
  if (this->has_candy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->candy_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InventoryItemData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Inventory.InventoryItemData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InventoryItemData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InventoryItemData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Inventory.InventoryItemData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Inventory.InventoryItemData)
    MergeFrom(*source);
  }
}

void InventoryItemData::MergeFrom(const InventoryItemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Inventory.InventoryItemData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_pokemon_data()) {
    mutable_pokemon_data()->::POGOProtos::Data::PokemonData::MergeFrom(from.pokemon_data());
  }
  if (from.has_item()) {
    mutable_item()->::POGOProtos::Inventory::Item::ItemData::MergeFrom(from.item());
  }
  if (from.has_pokedex_entry()) {
    mutable_pokedex_entry()->::POGOProtos::Data::PokedexEntry::MergeFrom(from.pokedex_entry());
  }
  if (from.has_player_stats()) {
    mutable_player_stats()->::POGOProtos::Data::Player::PlayerStats::MergeFrom(from.player_stats());
  }
  if (from.has_player_currency()) {
    mutable_player_currency()->::POGOProtos::Data::Player::PlayerCurrency::MergeFrom(from.player_currency());
  }
  if (from.has_player_camera()) {
    mutable_player_camera()->::POGOProtos::Data::Player::PlayerCamera::MergeFrom(from.player_camera());
  }
  if (from.has_inventory_upgrades()) {
    mutable_inventory_upgrades()->::POGOProtos::Inventory::InventoryUpgrades::MergeFrom(from.inventory_upgrades());
  }
  if (from.has_applied_items()) {
    mutable_applied_items()->::POGOProtos::Inventory::AppliedItems::MergeFrom(from.applied_items());
  }
  if (from.has_egg_incubators()) {
    mutable_egg_incubators()->::POGOProtos::Inventory::EggIncubators::MergeFrom(from.egg_incubators());
  }
  if (from.has_candy()) {
    mutable_candy()->::POGOProtos::Inventory::Candy::MergeFrom(from.candy());
  }
}

void InventoryItemData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Inventory.InventoryItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InventoryItemData::CopyFrom(const InventoryItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Inventory.InventoryItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventoryItemData::IsInitialized() const {

  return true;
}

void InventoryItemData::Swap(InventoryItemData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InventoryItemData::InternalSwap(InventoryItemData* other) {
  std::swap(pokemon_data_, other->pokemon_data_);
  std::swap(item_, other->item_);
  std::swap(pokedex_entry_, other->pokedex_entry_);
  std::swap(player_stats_, other->player_stats_);
  std::swap(player_currency_, other->player_currency_);
  std::swap(player_camera_, other->player_camera_);
  std::swap(inventory_upgrades_, other->inventory_upgrades_);
  std::swap(applied_items_, other->applied_items_);
  std::swap(egg_incubators_, other->egg_incubators_);
  std::swap(candy_, other->candy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InventoryItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InventoryItemData_descriptor_;
  metadata.reflection = InventoryItemData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InventoryItemData

// optional .POGOProtos.Data.PokemonData pokemon_data = 1;
bool InventoryItemData::has_pokemon_data() const {
  return !_is_default_instance_ && pokemon_data_ != NULL;
}
void InventoryItemData::clear_pokemon_data() {
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
}
const ::POGOProtos::Data::PokemonData& InventoryItemData::pokemon_data() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.pokemon_data)
  return pokemon_data_ != NULL ? *pokemon_data_ : *default_instance_->pokemon_data_;
}
::POGOProtos::Data::PokemonData* InventoryItemData::mutable_pokemon_data() {
  
  if (pokemon_data_ == NULL) {
    pokemon_data_ = new ::POGOProtos::Data::PokemonData;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.pokemon_data)
  return pokemon_data_;
}
::POGOProtos::Data::PokemonData* InventoryItemData::release_pokemon_data() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.pokemon_data)
  
  ::POGOProtos::Data::PokemonData* temp = pokemon_data_;
  pokemon_data_ = NULL;
  return temp;
}
void InventoryItemData::set_allocated_pokemon_data(::POGOProtos::Data::PokemonData* pokemon_data) {
  delete pokemon_data_;
  pokemon_data_ = pokemon_data;
  if (pokemon_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.pokemon_data)
}

// optional .POGOProtos.Inventory.Item.ItemData item = 2;
bool InventoryItemData::has_item() const {
  return !_is_default_instance_ && item_ != NULL;
}
void InventoryItemData::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) delete item_;
  item_ = NULL;
}
const ::POGOProtos::Inventory::Item::ItemData& InventoryItemData::item() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
::POGOProtos::Inventory::Item::ItemData* InventoryItemData::mutable_item() {
  
  if (item_ == NULL) {
    item_ = new ::POGOProtos::Inventory::Item::ItemData;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.item)
  return item_;
}
::POGOProtos::Inventory::Item::ItemData* InventoryItemData::release_item() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.item)
  
  ::POGOProtos::Inventory::Item::ItemData* temp = item_;
  item_ = NULL;
  return temp;
}
void InventoryItemData::set_allocated_item(::POGOProtos::Inventory::Item::ItemData* item) {
  delete item_;
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.item)
}

// optional .POGOProtos.Data.PokedexEntry pokedex_entry = 3;
bool InventoryItemData::has_pokedex_entry() const {
  return !_is_default_instance_ && pokedex_entry_ != NULL;
}
void InventoryItemData::clear_pokedex_entry() {
  if (GetArenaNoVirtual() == NULL && pokedex_entry_ != NULL) delete pokedex_entry_;
  pokedex_entry_ = NULL;
}
const ::POGOProtos::Data::PokedexEntry& InventoryItemData::pokedex_entry() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.pokedex_entry)
  return pokedex_entry_ != NULL ? *pokedex_entry_ : *default_instance_->pokedex_entry_;
}
::POGOProtos::Data::PokedexEntry* InventoryItemData::mutable_pokedex_entry() {
  
  if (pokedex_entry_ == NULL) {
    pokedex_entry_ = new ::POGOProtos::Data::PokedexEntry;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.pokedex_entry)
  return pokedex_entry_;
}
::POGOProtos::Data::PokedexEntry* InventoryItemData::release_pokedex_entry() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.pokedex_entry)
  
  ::POGOProtos::Data::PokedexEntry* temp = pokedex_entry_;
  pokedex_entry_ = NULL;
  return temp;
}
void InventoryItemData::set_allocated_pokedex_entry(::POGOProtos::Data::PokedexEntry* pokedex_entry) {
  delete pokedex_entry_;
  pokedex_entry_ = pokedex_entry;
  if (pokedex_entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.pokedex_entry)
}

// optional .POGOProtos.Data.Player.PlayerStats player_stats = 4;
bool InventoryItemData::has_player_stats() const {
  return !_is_default_instance_ && player_stats_ != NULL;
}
void InventoryItemData::clear_player_stats() {
  if (GetArenaNoVirtual() == NULL && player_stats_ != NULL) delete player_stats_;
  player_stats_ = NULL;
}
const ::POGOProtos::Data::Player::PlayerStats& InventoryItemData::player_stats() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.player_stats)
  return player_stats_ != NULL ? *player_stats_ : *default_instance_->player_stats_;
}
::POGOProtos::Data::Player::PlayerStats* InventoryItemData::mutable_player_stats() {
  
  if (player_stats_ == NULL) {
    player_stats_ = new ::POGOProtos::Data::Player::PlayerStats;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.player_stats)
  return player_stats_;
}
::POGOProtos::Data::Player::PlayerStats* InventoryItemData::release_player_stats() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.player_stats)
  
  ::POGOProtos::Data::Player::PlayerStats* temp = player_stats_;
  player_stats_ = NULL;
  return temp;
}
void InventoryItemData::set_allocated_player_stats(::POGOProtos::Data::Player::PlayerStats* player_stats) {
  delete player_stats_;
  player_stats_ = player_stats;
  if (player_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.player_stats)
}

// optional .POGOProtos.Data.Player.PlayerCurrency player_currency = 5;
bool InventoryItemData::has_player_currency() const {
  return !_is_default_instance_ && player_currency_ != NULL;
}
void InventoryItemData::clear_player_currency() {
  if (GetArenaNoVirtual() == NULL && player_currency_ != NULL) delete player_currency_;
  player_currency_ = NULL;
}
const ::POGOProtos::Data::Player::PlayerCurrency& InventoryItemData::player_currency() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.player_currency)
  return player_currency_ != NULL ? *player_currency_ : *default_instance_->player_currency_;
}
::POGOProtos::Data::Player::PlayerCurrency* InventoryItemData::mutable_player_currency() {
  
  if (player_currency_ == NULL) {
    player_currency_ = new ::POGOProtos::Data::Player::PlayerCurrency;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.player_currency)
  return player_currency_;
}
::POGOProtos::Data::Player::PlayerCurrency* InventoryItemData::release_player_currency() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.player_currency)
  
  ::POGOProtos::Data::Player::PlayerCurrency* temp = player_currency_;
  player_currency_ = NULL;
  return temp;
}
void InventoryItemData::set_allocated_player_currency(::POGOProtos::Data::Player::PlayerCurrency* player_currency) {
  delete player_currency_;
  player_currency_ = player_currency;
  if (player_currency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.player_currency)
}

// optional .POGOProtos.Data.Player.PlayerCamera player_camera = 6;
bool InventoryItemData::has_player_camera() const {
  return !_is_default_instance_ && player_camera_ != NULL;
}
void InventoryItemData::clear_player_camera() {
  if (GetArenaNoVirtual() == NULL && player_camera_ != NULL) delete player_camera_;
  player_camera_ = NULL;
}
const ::POGOProtos::Data::Player::PlayerCamera& InventoryItemData::player_camera() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.player_camera)
  return player_camera_ != NULL ? *player_camera_ : *default_instance_->player_camera_;
}
::POGOProtos::Data::Player::PlayerCamera* InventoryItemData::mutable_player_camera() {
  
  if (player_camera_ == NULL) {
    player_camera_ = new ::POGOProtos::Data::Player::PlayerCamera;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.player_camera)
  return player_camera_;
}
::POGOProtos::Data::Player::PlayerCamera* InventoryItemData::release_player_camera() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.player_camera)
  
  ::POGOProtos::Data::Player::PlayerCamera* temp = player_camera_;
  player_camera_ = NULL;
  return temp;
}
void InventoryItemData::set_allocated_player_camera(::POGOProtos::Data::Player::PlayerCamera* player_camera) {
  delete player_camera_;
  player_camera_ = player_camera;
  if (player_camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.player_camera)
}

// optional .POGOProtos.Inventory.InventoryUpgrades inventory_upgrades = 7;
bool InventoryItemData::has_inventory_upgrades() const {
  return !_is_default_instance_ && inventory_upgrades_ != NULL;
}
void InventoryItemData::clear_inventory_upgrades() {
  if (GetArenaNoVirtual() == NULL && inventory_upgrades_ != NULL) delete inventory_upgrades_;
  inventory_upgrades_ = NULL;
}
const ::POGOProtos::Inventory::InventoryUpgrades& InventoryItemData::inventory_upgrades() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.inventory_upgrades)
  return inventory_upgrades_ != NULL ? *inventory_upgrades_ : *default_instance_->inventory_upgrades_;
}
::POGOProtos::Inventory::InventoryUpgrades* InventoryItemData::mutable_inventory_upgrades() {
  
  if (inventory_upgrades_ == NULL) {
    inventory_upgrades_ = new ::POGOProtos::Inventory::InventoryUpgrades;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.inventory_upgrades)
  return inventory_upgrades_;
}
::POGOProtos::Inventory::InventoryUpgrades* InventoryItemData::release_inventory_upgrades() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.inventory_upgrades)
  
  ::POGOProtos::Inventory::InventoryUpgrades* temp = inventory_upgrades_;
  inventory_upgrades_ = NULL;
  return temp;
}
void InventoryItemData::set_allocated_inventory_upgrades(::POGOProtos::Inventory::InventoryUpgrades* inventory_upgrades) {
  delete inventory_upgrades_;
  inventory_upgrades_ = inventory_upgrades;
  if (inventory_upgrades) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.inventory_upgrades)
}

// optional .POGOProtos.Inventory.AppliedItems applied_items = 8;
bool InventoryItemData::has_applied_items() const {
  return !_is_default_instance_ && applied_items_ != NULL;
}
void InventoryItemData::clear_applied_items() {
  if (GetArenaNoVirtual() == NULL && applied_items_ != NULL) delete applied_items_;
  applied_items_ = NULL;
}
const ::POGOProtos::Inventory::AppliedItems& InventoryItemData::applied_items() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.applied_items)
  return applied_items_ != NULL ? *applied_items_ : *default_instance_->applied_items_;
}
::POGOProtos::Inventory::AppliedItems* InventoryItemData::mutable_applied_items() {
  
  if (applied_items_ == NULL) {
    applied_items_ = new ::POGOProtos::Inventory::AppliedItems;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.applied_items)
  return applied_items_;
}
::POGOProtos::Inventory::AppliedItems* InventoryItemData::release_applied_items() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.applied_items)
  
  ::POGOProtos::Inventory::AppliedItems* temp = applied_items_;
  applied_items_ = NULL;
  return temp;
}
void InventoryItemData::set_allocated_applied_items(::POGOProtos::Inventory::AppliedItems* applied_items) {
  delete applied_items_;
  applied_items_ = applied_items;
  if (applied_items) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.applied_items)
}

// optional .POGOProtos.Inventory.EggIncubators egg_incubators = 9;
bool InventoryItemData::has_egg_incubators() const {
  return !_is_default_instance_ && egg_incubators_ != NULL;
}
void InventoryItemData::clear_egg_incubators() {
  if (GetArenaNoVirtual() == NULL && egg_incubators_ != NULL) delete egg_incubators_;
  egg_incubators_ = NULL;
}
const ::POGOProtos::Inventory::EggIncubators& InventoryItemData::egg_incubators() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.egg_incubators)
  return egg_incubators_ != NULL ? *egg_incubators_ : *default_instance_->egg_incubators_;
}
::POGOProtos::Inventory::EggIncubators* InventoryItemData::mutable_egg_incubators() {
  
  if (egg_incubators_ == NULL) {
    egg_incubators_ = new ::POGOProtos::Inventory::EggIncubators;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.egg_incubators)
  return egg_incubators_;
}
::POGOProtos::Inventory::EggIncubators* InventoryItemData::release_egg_incubators() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.egg_incubators)
  
  ::POGOProtos::Inventory::EggIncubators* temp = egg_incubators_;
  egg_incubators_ = NULL;
  return temp;
}
void InventoryItemData::set_allocated_egg_incubators(::POGOProtos::Inventory::EggIncubators* egg_incubators) {
  delete egg_incubators_;
  egg_incubators_ = egg_incubators;
  if (egg_incubators) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.egg_incubators)
}

// optional .POGOProtos.Inventory.Candy candy = 10;
bool InventoryItemData::has_candy() const {
  return !_is_default_instance_ && candy_ != NULL;
}
void InventoryItemData::clear_candy() {
  if (GetArenaNoVirtual() == NULL && candy_ != NULL) delete candy_;
  candy_ = NULL;
}
const ::POGOProtos::Inventory::Candy& InventoryItemData::candy() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.candy)
  return candy_ != NULL ? *candy_ : *default_instance_->candy_;
}
::POGOProtos::Inventory::Candy* InventoryItemData::mutable_candy() {
  
  if (candy_ == NULL) {
    candy_ = new ::POGOProtos::Inventory::Candy;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.candy)
  return candy_;
}
::POGOProtos::Inventory::Candy* InventoryItemData::release_candy() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.candy)
  
  ::POGOProtos::Inventory::Candy* temp = candy_;
  candy_ = NULL;
  return temp;
}
void InventoryItemData::set_allocated_candy(::POGOProtos::Inventory::Candy* candy) {
  delete candy_;
  candy_ = candy;
  if (candy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.candy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Inventory
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
