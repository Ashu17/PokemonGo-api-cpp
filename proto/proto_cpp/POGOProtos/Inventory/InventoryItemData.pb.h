// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Inventory/InventoryItemData.proto

#ifndef PROTOBUF_POGOProtos_2fInventory_2fInventoryItemData_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fInventory_2fInventoryItemData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "POGOProtos/Inventory/Item/ItemData.pb.h"
#include "POGOProtos/Inventory/AppliedItems.pb.h"
#include "POGOProtos/Inventory/EggIncubators.pb.h"
#include "POGOProtos/Inventory/Candy.pb.h"
#include "POGOProtos/Inventory/InventoryUpgrades.pb.h"
#include "POGOProtos/Data/PokemonData.pb.h"
#include "POGOProtos/Data/PokedexEntry.pb.h"
#include "POGOProtos/Data/Player/PlayerStats.pb.h"
#include "POGOProtos/Data/Player/PlayerCurrency.pb.h"
#include "POGOProtos/Data/Player/PlayerCamera.pb.h"
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Inventory {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto();
void protobuf_AssignDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fInventory_2fInventoryItemData_2eproto();

class InventoryItemData;

// ===================================================================

class InventoryItemData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Inventory.InventoryItemData) */ {
 public:
  InventoryItemData();
  virtual ~InventoryItemData();

  InventoryItemData(const InventoryItemData& from);

  inline InventoryItemData& operator=(const InventoryItemData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InventoryItemData& default_instance();

  void Swap(InventoryItemData* other);

  // implements Message ----------------------------------------------

  inline InventoryItemData* New() const { return New(NULL); }

  InventoryItemData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InventoryItemData& from);
  void MergeFrom(const InventoryItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InventoryItemData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
  bool has_pokemon_data() const;
  void clear_pokemon_data();
  static const int kPokemonDataFieldNumber = 1;
  const ::POGOProtos::Data::PokemonData& pokemon_data() const;
  ::POGOProtos::Data::PokemonData* mutable_pokemon_data();
  ::POGOProtos::Data::PokemonData* release_pokemon_data();
  void set_allocated_pokemon_data(::POGOProtos::Data::PokemonData* pokemon_data);

  // optional .POGOProtos.Inventory.Item.ItemData item = 2;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 2;
  const ::POGOProtos::Inventory::Item::ItemData& item() const;
  ::POGOProtos::Inventory::Item::ItemData* mutable_item();
  ::POGOProtos::Inventory::Item::ItemData* release_item();
  void set_allocated_item(::POGOProtos::Inventory::Item::ItemData* item);

  // optional .POGOProtos.Data.PokedexEntry pokedex_entry = 3;
  bool has_pokedex_entry() const;
  void clear_pokedex_entry();
  static const int kPokedexEntryFieldNumber = 3;
  const ::POGOProtos::Data::PokedexEntry& pokedex_entry() const;
  ::POGOProtos::Data::PokedexEntry* mutable_pokedex_entry();
  ::POGOProtos::Data::PokedexEntry* release_pokedex_entry();
  void set_allocated_pokedex_entry(::POGOProtos::Data::PokedexEntry* pokedex_entry);

  // optional .POGOProtos.Data.Player.PlayerStats player_stats = 4;
  bool has_player_stats() const;
  void clear_player_stats();
  static const int kPlayerStatsFieldNumber = 4;
  const ::POGOProtos::Data::Player::PlayerStats& player_stats() const;
  ::POGOProtos::Data::Player::PlayerStats* mutable_player_stats();
  ::POGOProtos::Data::Player::PlayerStats* release_player_stats();
  void set_allocated_player_stats(::POGOProtos::Data::Player::PlayerStats* player_stats);

  // optional .POGOProtos.Data.Player.PlayerCurrency player_currency = 5;
  bool has_player_currency() const;
  void clear_player_currency();
  static const int kPlayerCurrencyFieldNumber = 5;
  const ::POGOProtos::Data::Player::PlayerCurrency& player_currency() const;
  ::POGOProtos::Data::Player::PlayerCurrency* mutable_player_currency();
  ::POGOProtos::Data::Player::PlayerCurrency* release_player_currency();
  void set_allocated_player_currency(::POGOProtos::Data::Player::PlayerCurrency* player_currency);

  // optional .POGOProtos.Data.Player.PlayerCamera player_camera = 6;
  bool has_player_camera() const;
  void clear_player_camera();
  static const int kPlayerCameraFieldNumber = 6;
  const ::POGOProtos::Data::Player::PlayerCamera& player_camera() const;
  ::POGOProtos::Data::Player::PlayerCamera* mutable_player_camera();
  ::POGOProtos::Data::Player::PlayerCamera* release_player_camera();
  void set_allocated_player_camera(::POGOProtos::Data::Player::PlayerCamera* player_camera);

  // optional .POGOProtos.Inventory.InventoryUpgrades inventory_upgrades = 7;
  bool has_inventory_upgrades() const;
  void clear_inventory_upgrades();
  static const int kInventoryUpgradesFieldNumber = 7;
  const ::POGOProtos::Inventory::InventoryUpgrades& inventory_upgrades() const;
  ::POGOProtos::Inventory::InventoryUpgrades* mutable_inventory_upgrades();
  ::POGOProtos::Inventory::InventoryUpgrades* release_inventory_upgrades();
  void set_allocated_inventory_upgrades(::POGOProtos::Inventory::InventoryUpgrades* inventory_upgrades);

  // optional .POGOProtos.Inventory.AppliedItems applied_items = 8;
  bool has_applied_items() const;
  void clear_applied_items();
  static const int kAppliedItemsFieldNumber = 8;
  const ::POGOProtos::Inventory::AppliedItems& applied_items() const;
  ::POGOProtos::Inventory::AppliedItems* mutable_applied_items();
  ::POGOProtos::Inventory::AppliedItems* release_applied_items();
  void set_allocated_applied_items(::POGOProtos::Inventory::AppliedItems* applied_items);

  // optional .POGOProtos.Inventory.EggIncubators egg_incubators = 9;
  bool has_egg_incubators() const;
  void clear_egg_incubators();
  static const int kEggIncubatorsFieldNumber = 9;
  const ::POGOProtos::Inventory::EggIncubators& egg_incubators() const;
  ::POGOProtos::Inventory::EggIncubators* mutable_egg_incubators();
  ::POGOProtos::Inventory::EggIncubators* release_egg_incubators();
  void set_allocated_egg_incubators(::POGOProtos::Inventory::EggIncubators* egg_incubators);

  // optional .POGOProtos.Inventory.Candy candy = 10;
  bool has_candy() const;
  void clear_candy();
  static const int kCandyFieldNumber = 10;
  const ::POGOProtos::Inventory::Candy& candy() const;
  ::POGOProtos::Inventory::Candy* mutable_candy();
  ::POGOProtos::Inventory::Candy* release_candy();
  void set_allocated_candy(::POGOProtos::Inventory::Candy* candy);

  // @@protoc_insertion_point(class_scope:POGOProtos.Inventory.InventoryItemData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::POGOProtos::Data::PokemonData* pokemon_data_;
  ::POGOProtos::Inventory::Item::ItemData* item_;
  ::POGOProtos::Data::PokedexEntry* pokedex_entry_;
  ::POGOProtos::Data::Player::PlayerStats* player_stats_;
  ::POGOProtos::Data::Player::PlayerCurrency* player_currency_;
  ::POGOProtos::Data::Player::PlayerCamera* player_camera_;
  ::POGOProtos::Inventory::InventoryUpgrades* inventory_upgrades_;
  ::POGOProtos::Inventory::AppliedItems* applied_items_;
  ::POGOProtos::Inventory::EggIncubators* egg_incubators_;
  ::POGOProtos::Inventory::Candy* candy_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fInventory_2fInventoryItemData_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fInventory_2fInventoryItemData_2eproto();

  void InitAsDefaultInstance();
  static InventoryItemData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InventoryItemData

// optional .POGOProtos.Data.PokemonData pokemon_data = 1;
inline bool InventoryItemData::has_pokemon_data() const {
  return !_is_default_instance_ && pokemon_data_ != NULL;
}
inline void InventoryItemData::clear_pokemon_data() {
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
}
inline const ::POGOProtos::Data::PokemonData& InventoryItemData::pokemon_data() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.pokemon_data)
  return pokemon_data_ != NULL ? *pokemon_data_ : *default_instance_->pokemon_data_;
}
inline ::POGOProtos::Data::PokemonData* InventoryItemData::mutable_pokemon_data() {
  
  if (pokemon_data_ == NULL) {
    pokemon_data_ = new ::POGOProtos::Data::PokemonData;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.pokemon_data)
  return pokemon_data_;
}
inline ::POGOProtos::Data::PokemonData* InventoryItemData::release_pokemon_data() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.pokemon_data)
  
  ::POGOProtos::Data::PokemonData* temp = pokemon_data_;
  pokemon_data_ = NULL;
  return temp;
}
inline void InventoryItemData::set_allocated_pokemon_data(::POGOProtos::Data::PokemonData* pokemon_data) {
  delete pokemon_data_;
  pokemon_data_ = pokemon_data;
  if (pokemon_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.pokemon_data)
}

// optional .POGOProtos.Inventory.Item.ItemData item = 2;
inline bool InventoryItemData::has_item() const {
  return !_is_default_instance_ && item_ != NULL;
}
inline void InventoryItemData::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) delete item_;
  item_ = NULL;
}
inline const ::POGOProtos::Inventory::Item::ItemData& InventoryItemData::item() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::POGOProtos::Inventory::Item::ItemData* InventoryItemData::mutable_item() {
  
  if (item_ == NULL) {
    item_ = new ::POGOProtos::Inventory::Item::ItemData;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.item)
  return item_;
}
inline ::POGOProtos::Inventory::Item::ItemData* InventoryItemData::release_item() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.item)
  
  ::POGOProtos::Inventory::Item::ItemData* temp = item_;
  item_ = NULL;
  return temp;
}
inline void InventoryItemData::set_allocated_item(::POGOProtos::Inventory::Item::ItemData* item) {
  delete item_;
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.item)
}

// optional .POGOProtos.Data.PokedexEntry pokedex_entry = 3;
inline bool InventoryItemData::has_pokedex_entry() const {
  return !_is_default_instance_ && pokedex_entry_ != NULL;
}
inline void InventoryItemData::clear_pokedex_entry() {
  if (GetArenaNoVirtual() == NULL && pokedex_entry_ != NULL) delete pokedex_entry_;
  pokedex_entry_ = NULL;
}
inline const ::POGOProtos::Data::PokedexEntry& InventoryItemData::pokedex_entry() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.pokedex_entry)
  return pokedex_entry_ != NULL ? *pokedex_entry_ : *default_instance_->pokedex_entry_;
}
inline ::POGOProtos::Data::PokedexEntry* InventoryItemData::mutable_pokedex_entry() {
  
  if (pokedex_entry_ == NULL) {
    pokedex_entry_ = new ::POGOProtos::Data::PokedexEntry;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.pokedex_entry)
  return pokedex_entry_;
}
inline ::POGOProtos::Data::PokedexEntry* InventoryItemData::release_pokedex_entry() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.pokedex_entry)
  
  ::POGOProtos::Data::PokedexEntry* temp = pokedex_entry_;
  pokedex_entry_ = NULL;
  return temp;
}
inline void InventoryItemData::set_allocated_pokedex_entry(::POGOProtos::Data::PokedexEntry* pokedex_entry) {
  delete pokedex_entry_;
  pokedex_entry_ = pokedex_entry;
  if (pokedex_entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.pokedex_entry)
}

// optional .POGOProtos.Data.Player.PlayerStats player_stats = 4;
inline bool InventoryItemData::has_player_stats() const {
  return !_is_default_instance_ && player_stats_ != NULL;
}
inline void InventoryItemData::clear_player_stats() {
  if (GetArenaNoVirtual() == NULL && player_stats_ != NULL) delete player_stats_;
  player_stats_ = NULL;
}
inline const ::POGOProtos::Data::Player::PlayerStats& InventoryItemData::player_stats() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.player_stats)
  return player_stats_ != NULL ? *player_stats_ : *default_instance_->player_stats_;
}
inline ::POGOProtos::Data::Player::PlayerStats* InventoryItemData::mutable_player_stats() {
  
  if (player_stats_ == NULL) {
    player_stats_ = new ::POGOProtos::Data::Player::PlayerStats;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.player_stats)
  return player_stats_;
}
inline ::POGOProtos::Data::Player::PlayerStats* InventoryItemData::release_player_stats() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.player_stats)
  
  ::POGOProtos::Data::Player::PlayerStats* temp = player_stats_;
  player_stats_ = NULL;
  return temp;
}
inline void InventoryItemData::set_allocated_player_stats(::POGOProtos::Data::Player::PlayerStats* player_stats) {
  delete player_stats_;
  player_stats_ = player_stats;
  if (player_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.player_stats)
}

// optional .POGOProtos.Data.Player.PlayerCurrency player_currency = 5;
inline bool InventoryItemData::has_player_currency() const {
  return !_is_default_instance_ && player_currency_ != NULL;
}
inline void InventoryItemData::clear_player_currency() {
  if (GetArenaNoVirtual() == NULL && player_currency_ != NULL) delete player_currency_;
  player_currency_ = NULL;
}
inline const ::POGOProtos::Data::Player::PlayerCurrency& InventoryItemData::player_currency() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.player_currency)
  return player_currency_ != NULL ? *player_currency_ : *default_instance_->player_currency_;
}
inline ::POGOProtos::Data::Player::PlayerCurrency* InventoryItemData::mutable_player_currency() {
  
  if (player_currency_ == NULL) {
    player_currency_ = new ::POGOProtos::Data::Player::PlayerCurrency;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.player_currency)
  return player_currency_;
}
inline ::POGOProtos::Data::Player::PlayerCurrency* InventoryItemData::release_player_currency() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.player_currency)
  
  ::POGOProtos::Data::Player::PlayerCurrency* temp = player_currency_;
  player_currency_ = NULL;
  return temp;
}
inline void InventoryItemData::set_allocated_player_currency(::POGOProtos::Data::Player::PlayerCurrency* player_currency) {
  delete player_currency_;
  player_currency_ = player_currency;
  if (player_currency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.player_currency)
}

// optional .POGOProtos.Data.Player.PlayerCamera player_camera = 6;
inline bool InventoryItemData::has_player_camera() const {
  return !_is_default_instance_ && player_camera_ != NULL;
}
inline void InventoryItemData::clear_player_camera() {
  if (GetArenaNoVirtual() == NULL && player_camera_ != NULL) delete player_camera_;
  player_camera_ = NULL;
}
inline const ::POGOProtos::Data::Player::PlayerCamera& InventoryItemData::player_camera() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.player_camera)
  return player_camera_ != NULL ? *player_camera_ : *default_instance_->player_camera_;
}
inline ::POGOProtos::Data::Player::PlayerCamera* InventoryItemData::mutable_player_camera() {
  
  if (player_camera_ == NULL) {
    player_camera_ = new ::POGOProtos::Data::Player::PlayerCamera;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.player_camera)
  return player_camera_;
}
inline ::POGOProtos::Data::Player::PlayerCamera* InventoryItemData::release_player_camera() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.player_camera)
  
  ::POGOProtos::Data::Player::PlayerCamera* temp = player_camera_;
  player_camera_ = NULL;
  return temp;
}
inline void InventoryItemData::set_allocated_player_camera(::POGOProtos::Data::Player::PlayerCamera* player_camera) {
  delete player_camera_;
  player_camera_ = player_camera;
  if (player_camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.player_camera)
}

// optional .POGOProtos.Inventory.InventoryUpgrades inventory_upgrades = 7;
inline bool InventoryItemData::has_inventory_upgrades() const {
  return !_is_default_instance_ && inventory_upgrades_ != NULL;
}
inline void InventoryItemData::clear_inventory_upgrades() {
  if (GetArenaNoVirtual() == NULL && inventory_upgrades_ != NULL) delete inventory_upgrades_;
  inventory_upgrades_ = NULL;
}
inline const ::POGOProtos::Inventory::InventoryUpgrades& InventoryItemData::inventory_upgrades() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.inventory_upgrades)
  return inventory_upgrades_ != NULL ? *inventory_upgrades_ : *default_instance_->inventory_upgrades_;
}
inline ::POGOProtos::Inventory::InventoryUpgrades* InventoryItemData::mutable_inventory_upgrades() {
  
  if (inventory_upgrades_ == NULL) {
    inventory_upgrades_ = new ::POGOProtos::Inventory::InventoryUpgrades;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.inventory_upgrades)
  return inventory_upgrades_;
}
inline ::POGOProtos::Inventory::InventoryUpgrades* InventoryItemData::release_inventory_upgrades() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.inventory_upgrades)
  
  ::POGOProtos::Inventory::InventoryUpgrades* temp = inventory_upgrades_;
  inventory_upgrades_ = NULL;
  return temp;
}
inline void InventoryItemData::set_allocated_inventory_upgrades(::POGOProtos::Inventory::InventoryUpgrades* inventory_upgrades) {
  delete inventory_upgrades_;
  inventory_upgrades_ = inventory_upgrades;
  if (inventory_upgrades) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.inventory_upgrades)
}

// optional .POGOProtos.Inventory.AppliedItems applied_items = 8;
inline bool InventoryItemData::has_applied_items() const {
  return !_is_default_instance_ && applied_items_ != NULL;
}
inline void InventoryItemData::clear_applied_items() {
  if (GetArenaNoVirtual() == NULL && applied_items_ != NULL) delete applied_items_;
  applied_items_ = NULL;
}
inline const ::POGOProtos::Inventory::AppliedItems& InventoryItemData::applied_items() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.applied_items)
  return applied_items_ != NULL ? *applied_items_ : *default_instance_->applied_items_;
}
inline ::POGOProtos::Inventory::AppliedItems* InventoryItemData::mutable_applied_items() {
  
  if (applied_items_ == NULL) {
    applied_items_ = new ::POGOProtos::Inventory::AppliedItems;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.applied_items)
  return applied_items_;
}
inline ::POGOProtos::Inventory::AppliedItems* InventoryItemData::release_applied_items() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.applied_items)
  
  ::POGOProtos::Inventory::AppliedItems* temp = applied_items_;
  applied_items_ = NULL;
  return temp;
}
inline void InventoryItemData::set_allocated_applied_items(::POGOProtos::Inventory::AppliedItems* applied_items) {
  delete applied_items_;
  applied_items_ = applied_items;
  if (applied_items) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.applied_items)
}

// optional .POGOProtos.Inventory.EggIncubators egg_incubators = 9;
inline bool InventoryItemData::has_egg_incubators() const {
  return !_is_default_instance_ && egg_incubators_ != NULL;
}
inline void InventoryItemData::clear_egg_incubators() {
  if (GetArenaNoVirtual() == NULL && egg_incubators_ != NULL) delete egg_incubators_;
  egg_incubators_ = NULL;
}
inline const ::POGOProtos::Inventory::EggIncubators& InventoryItemData::egg_incubators() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.egg_incubators)
  return egg_incubators_ != NULL ? *egg_incubators_ : *default_instance_->egg_incubators_;
}
inline ::POGOProtos::Inventory::EggIncubators* InventoryItemData::mutable_egg_incubators() {
  
  if (egg_incubators_ == NULL) {
    egg_incubators_ = new ::POGOProtos::Inventory::EggIncubators;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.egg_incubators)
  return egg_incubators_;
}
inline ::POGOProtos::Inventory::EggIncubators* InventoryItemData::release_egg_incubators() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.egg_incubators)
  
  ::POGOProtos::Inventory::EggIncubators* temp = egg_incubators_;
  egg_incubators_ = NULL;
  return temp;
}
inline void InventoryItemData::set_allocated_egg_incubators(::POGOProtos::Inventory::EggIncubators* egg_incubators) {
  delete egg_incubators_;
  egg_incubators_ = egg_incubators;
  if (egg_incubators) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.egg_incubators)
}

// optional .POGOProtos.Inventory.Candy candy = 10;
inline bool InventoryItemData::has_candy() const {
  return !_is_default_instance_ && candy_ != NULL;
}
inline void InventoryItemData::clear_candy() {
  if (GetArenaNoVirtual() == NULL && candy_ != NULL) delete candy_;
  candy_ = NULL;
}
inline const ::POGOProtos::Inventory::Candy& InventoryItemData::candy() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Inventory.InventoryItemData.candy)
  return candy_ != NULL ? *candy_ : *default_instance_->candy_;
}
inline ::POGOProtos::Inventory::Candy* InventoryItemData::mutable_candy() {
  
  if (candy_ == NULL) {
    candy_ = new ::POGOProtos::Inventory::Candy;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Inventory.InventoryItemData.candy)
  return candy_;
}
inline ::POGOProtos::Inventory::Candy* InventoryItemData::release_candy() {
  // @@protoc_insertion_point(field_release:POGOProtos.Inventory.InventoryItemData.candy)
  
  ::POGOProtos::Inventory::Candy* temp = candy_;
  candy_ = NULL;
  return temp;
}
inline void InventoryItemData::set_allocated_candy(::POGOProtos::Inventory::Candy* candy) {
  delete candy_;
  candy_ = candy;
  if (candy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Inventory.InventoryItemData.candy)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Inventory
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fInventory_2fInventoryItemData_2eproto__INCLUDED
