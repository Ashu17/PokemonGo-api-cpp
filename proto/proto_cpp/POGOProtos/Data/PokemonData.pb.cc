// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/PokemonData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Data/PokemonData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Data {

namespace {

const ::google::protobuf::Descriptor* PokemonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PokemonData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fData_2fPokemonData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fData_2fPokemonData_2eproto() {
  protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Data/PokemonData.proto");
  GOOGLE_CHECK(file != NULL);
  PokemonData_descriptor_ = file->message_type(0);
  static const int PokemonData_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, pokemon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, cp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, stamina_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, move_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, move_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, deployed_fort_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, owner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, is_egg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, egg_km_walked_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, egg_km_walked_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, height_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, weight_kg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, individual_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, individual_defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, individual_stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, cp_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, pokeball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, captured_cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, battles_attacked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, battles_defended_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, egg_incubator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, creation_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, num_upgrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, additional_cp_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, favorite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, from_fort_),
  };
  PokemonData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PokemonData_descriptor_,
      PokemonData::default_instance_,
      PokemonData_offsets_,
      -1,
      -1,
      -1,
      sizeof(PokemonData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fData_2fPokemonData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PokemonData_descriptor_, &PokemonData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fData_2fPokemonData_2eproto() {
  delete PokemonData::default_instance_;
  delete PokemonData_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonId_2eproto();
  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonMove_2eproto();
  ::POGOProtos::Inventory::Item::protobuf_AddDesc_POGOProtos_2fInventory_2fItem_2fItemId_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!POGOProtos/Data/PokemonData.proto\022\017POG"
    "OProtos.Data\032 POGOProtos/Enums/PokemonId"
    ".proto\032\"POGOProtos/Enums/PokemonMove.pro"
    "to\032&POGOProtos/Inventory/Item/ItemId.pro"
    "to\"\230\006\n\013PokemonData\022\n\n\002id\030\001 \001(\006\022/\n\npokemo"
    "n_id\030\002 \001(\0162\033.POGOProtos.Enums.PokemonId\022"
    "\n\n\002cp\030\003 \001(\005\022\017\n\007stamina\030\004 \001(\005\022\023\n\013stamina_"
    "max\030\005 \001(\005\022-\n\006move_1\030\006 \001(\0162\035.POGOProtos.E"
    "nums.PokemonMove\022-\n\006move_2\030\007 \001(\0162\035.POGOP"
    "rotos.Enums.PokemonMove\022\030\n\020deployed_fort"
    "_id\030\010 \001(\t\022\022\n\nowner_name\030\t \001(\t\022\016\n\006is_egg\030"
    "\n \001(\010\022\034\n\024egg_km_walked_target\030\013 \001(\001\022\033\n\023e"
    "gg_km_walked_start\030\014 \001(\001\022\016\n\006origin\030\016 \001(\005"
    "\022\020\n\010height_m\030\017 \001(\002\022\021\n\tweight_kg\030\020 \001(\002\022\031\n"
    "\021individual_attack\030\021 \001(\005\022\032\n\022individual_d"
    "efense\030\022 \001(\005\022\032\n\022individual_stamina\030\023 \001(\005"
    "\022\025\n\rcp_multiplier\030\024 \001(\002\0223\n\010pokeball\030\025 \001("
    "\0162!.POGOProtos.Inventory.Item.ItemId\022\030\n\020"
    "captured_cell_id\030\026 \001(\004\022\030\n\020battles_attack"
    "ed\030\027 \001(\005\022\030\n\020battles_defended\030\030 \001(\005\022\030\n\020eg"
    "g_incubator_id\030\031 \001(\t\022\030\n\020creation_time_ms"
    "\030\032 \001(\004\022\024\n\014num_upgrades\030\033 \001(\005\022 \n\030addition"
    "al_cp_multiplier\030\034 \001(\002\022\020\n\010favorite\030\035 \001(\005"
    "\022\020\n\010nickname\030\036 \001(\t\022\021\n\tfrom_fort\030\037 \001(\005b\006p"
    "roto3", 965);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Data/PokemonData.proto", &protobuf_RegisterTypes);
  PokemonData::default_instance_ = new PokemonData();
  PokemonData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fData_2fPokemonData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fData_2fPokemonData_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fData_2fPokemonData_2eproto() {
    protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fData_2fPokemonData_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PokemonData::kIdFieldNumber;
const int PokemonData::kPokemonIdFieldNumber;
const int PokemonData::kCpFieldNumber;
const int PokemonData::kStaminaFieldNumber;
const int PokemonData::kStaminaMaxFieldNumber;
const int PokemonData::kMove1FieldNumber;
const int PokemonData::kMove2FieldNumber;
const int PokemonData::kDeployedFortIdFieldNumber;
const int PokemonData::kOwnerNameFieldNumber;
const int PokemonData::kIsEggFieldNumber;
const int PokemonData::kEggKmWalkedTargetFieldNumber;
const int PokemonData::kEggKmWalkedStartFieldNumber;
const int PokemonData::kOriginFieldNumber;
const int PokemonData::kHeightMFieldNumber;
const int PokemonData::kWeightKgFieldNumber;
const int PokemonData::kIndividualAttackFieldNumber;
const int PokemonData::kIndividualDefenseFieldNumber;
const int PokemonData::kIndividualStaminaFieldNumber;
const int PokemonData::kCpMultiplierFieldNumber;
const int PokemonData::kPokeballFieldNumber;
const int PokemonData::kCapturedCellIdFieldNumber;
const int PokemonData::kBattlesAttackedFieldNumber;
const int PokemonData::kBattlesDefendedFieldNumber;
const int PokemonData::kEggIncubatorIdFieldNumber;
const int PokemonData::kCreationTimeMsFieldNumber;
const int PokemonData::kNumUpgradesFieldNumber;
const int PokemonData::kAdditionalCpMultiplierFieldNumber;
const int PokemonData::kFavoriteFieldNumber;
const int PokemonData::kNicknameFieldNumber;
const int PokemonData::kFromFortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PokemonData::PokemonData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Data.PokemonData)
}

void PokemonData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PokemonData::PokemonData(const PokemonData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Data.PokemonData)
}

void PokemonData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  pokemon_id_ = 0;
  cp_ = 0;
  stamina_ = 0;
  stamina_max_ = 0;
  move_1_ = 0;
  move_2_ = 0;
  deployed_fort_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_egg_ = false;
  egg_km_walked_target_ = 0;
  egg_km_walked_start_ = 0;
  origin_ = 0;
  height_m_ = 0;
  weight_kg_ = 0;
  individual_attack_ = 0;
  individual_defense_ = 0;
  individual_stamina_ = 0;
  cp_multiplier_ = 0;
  pokeball_ = 0;
  captured_cell_id_ = GOOGLE_ULONGLONG(0);
  battles_attacked_ = 0;
  battles_defended_ = 0;
  egg_incubator_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creation_time_ms_ = GOOGLE_ULONGLONG(0);
  num_upgrades_ = 0;
  additional_cp_multiplier_ = 0;
  favorite_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_fort_ = 0;
}

PokemonData::~PokemonData() {
  // @@protoc_insertion_point(destructor:POGOProtos.Data.PokemonData)
  SharedDtor();
}

void PokemonData::SharedDtor() {
  deployed_fort_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  egg_incubator_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PokemonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PokemonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokemonData_descriptor_;
}

const PokemonData& PokemonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  return *default_instance_;
}

PokemonData* PokemonData::default_instance_ = NULL;

PokemonData* PokemonData::New(::google::protobuf::Arena* arena) const {
  PokemonData* n = new PokemonData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PokemonData::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Data.PokemonData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PokemonData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PokemonData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, move_2_);
  deployed_fort_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(egg_km_walked_target_, individual_attack_);
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(individual_defense_, battles_attacked_);
  battles_defended_ = 0;
  egg_incubator_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(num_upgrades_, favorite_);
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_fort_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool PokemonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Data.PokemonData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pokemon_id;
        break;
      }

      // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
      case 2: {
        if (tag == 16) {
         parse_pokemon_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pokemon_id(static_cast< ::POGOProtos::Enums::PokemonId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cp;
        break;
      }

      // optional int32 cp = 3;
      case 3: {
        if (tag == 24) {
         parse_cp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stamina;
        break;
      }

      // optional int32 stamina = 4;
      case 4: {
        if (tag == 32) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamina_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stamina_max;
        break;
      }

      // optional int32 stamina_max = 5;
      case 5: {
        if (tag == 40) {
         parse_stamina_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamina_max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_move_1;
        break;
      }

      // optional .POGOProtos.Enums.PokemonMove move_1 = 6;
      case 6: {
        if (tag == 48) {
         parse_move_1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_move_1(static_cast< ::POGOProtos::Enums::PokemonMove >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_move_2;
        break;
      }

      // optional .POGOProtos.Enums.PokemonMove move_2 = 7;
      case 7: {
        if (tag == 56) {
         parse_move_2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_move_2(static_cast< ::POGOProtos::Enums::PokemonMove >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_deployed_fort_id;
        break;
      }

      // optional string deployed_fort_id = 8;
      case 8: {
        if (tag == 66) {
         parse_deployed_fort_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deployed_fort_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deployed_fort_id().data(), this->deployed_fort_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Data.PokemonData.deployed_fort_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_owner_name;
        break;
      }

      // optional string owner_name = 9;
      case 9: {
        if (tag == 74) {
         parse_owner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_name().data(), this->owner_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Data.PokemonData.owner_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_egg;
        break;
      }

      // optional bool is_egg = 10;
      case 10: {
        if (tag == 80) {
         parse_is_egg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_egg_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_egg_km_walked_target;
        break;
      }

      // optional double egg_km_walked_target = 11;
      case 11: {
        if (tag == 89) {
         parse_egg_km_walked_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &egg_km_walked_target_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_egg_km_walked_start;
        break;
      }

      // optional double egg_km_walked_start = 12;
      case 12: {
        if (tag == 97) {
         parse_egg_km_walked_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &egg_km_walked_start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_origin;
        break;
      }

      // optional int32 origin = 14;
      case 14: {
        if (tag == 112) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_height_m;
        break;
      }

      // optional float height_m = 15;
      case 15: {
        if (tag == 125) {
         parse_height_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_weight_kg;
        break;
      }

      // optional float weight_kg = 16;
      case 16: {
        if (tag == 133) {
         parse_weight_kg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_kg_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_individual_attack;
        break;
      }

      // optional int32 individual_attack = 17;
      case 17: {
        if (tag == 136) {
         parse_individual_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &individual_attack_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_individual_defense;
        break;
      }

      // optional int32 individual_defense = 18;
      case 18: {
        if (tag == 144) {
         parse_individual_defense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &individual_defense_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_individual_stamina;
        break;
      }

      // optional int32 individual_stamina = 19;
      case 19: {
        if (tag == 152) {
         parse_individual_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &individual_stamina_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_cp_multiplier;
        break;
      }

      // optional float cp_multiplier = 20;
      case 20: {
        if (tag == 165) {
         parse_cp_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cp_multiplier_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_pokeball;
        break;
      }

      // optional .POGOProtos.Inventory.Item.ItemId pokeball = 21;
      case 21: {
        if (tag == 168) {
         parse_pokeball:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pokeball(static_cast< ::POGOProtos::Inventory::Item::ItemId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_captured_cell_id;
        break;
      }

      // optional uint64 captured_cell_id = 22;
      case 22: {
        if (tag == 176) {
         parse_captured_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &captured_cell_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_battles_attacked;
        break;
      }

      // optional int32 battles_attacked = 23;
      case 23: {
        if (tag == 184) {
         parse_battles_attacked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battles_attacked_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_battles_defended;
        break;
      }

      // optional int32 battles_defended = 24;
      case 24: {
        if (tag == 192) {
         parse_battles_defended:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battles_defended_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_egg_incubator_id;
        break;
      }

      // optional string egg_incubator_id = 25;
      case 25: {
        if (tag == 202) {
         parse_egg_incubator_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_egg_incubator_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->egg_incubator_id().data(), this->egg_incubator_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Data.PokemonData.egg_incubator_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_creation_time_ms;
        break;
      }

      // optional uint64 creation_time_ms = 26;
      case 26: {
        if (tag == 208) {
         parse_creation_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_num_upgrades;
        break;
      }

      // optional int32 num_upgrades = 27;
      case 27: {
        if (tag == 216) {
         parse_num_upgrades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_upgrades_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_additional_cp_multiplier;
        break;
      }

      // optional float additional_cp_multiplier = 28;
      case 28: {
        if (tag == 229) {
         parse_additional_cp_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &additional_cp_multiplier_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_favorite;
        break;
      }

      // optional int32 favorite = 29;
      case 29: {
        if (tag == 232) {
         parse_favorite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &favorite_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_nickname;
        break;
      }

      // optional string nickname = 30;
      case 30: {
        if (tag == 242) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Data.PokemonData.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_from_fort;
        break;
      }

      // optional int32 from_fort = 31;
      case 31: {
        if (tag == 248) {
         parse_from_fort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_fort_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Data.PokemonData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Data.PokemonData)
  return false;
#undef DO_
}

void PokemonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Data.PokemonData)
  // optional fixed64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
  if (this->pokemon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pokemon_id(), output);
  }

  // optional int32 cp = 3;
  if (this->cp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cp(), output);
  }

  // optional int32 stamina = 4;
  if (this->stamina() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stamina(), output);
  }

  // optional int32 stamina_max = 5;
  if (this->stamina_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stamina_max(), output);
  }

  // optional .POGOProtos.Enums.PokemonMove move_1 = 6;
  if (this->move_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->move_1(), output);
  }

  // optional .POGOProtos.Enums.PokemonMove move_2 = 7;
  if (this->move_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->move_2(), output);
  }

  // optional string deployed_fort_id = 8;
  if (this->deployed_fort_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deployed_fort_id().data(), this->deployed_fort_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Data.PokemonData.deployed_fort_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->deployed_fort_id(), output);
  }

  // optional string owner_name = 9;
  if (this->owner_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Data.PokemonData.owner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->owner_name(), output);
  }

  // optional bool is_egg = 10;
  if (this->is_egg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_egg(), output);
  }

  // optional double egg_km_walked_target = 11;
  if (this->egg_km_walked_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->egg_km_walked_target(), output);
  }

  // optional double egg_km_walked_start = 12;
  if (this->egg_km_walked_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->egg_km_walked_start(), output);
  }

  // optional int32 origin = 14;
  if (this->origin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->origin(), output);
  }

  // optional float height_m = 15;
  if (this->height_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->height_m(), output);
  }

  // optional float weight_kg = 16;
  if (this->weight_kg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->weight_kg(), output);
  }

  // optional int32 individual_attack = 17;
  if (this->individual_attack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->individual_attack(), output);
  }

  // optional int32 individual_defense = 18;
  if (this->individual_defense() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->individual_defense(), output);
  }

  // optional int32 individual_stamina = 19;
  if (this->individual_stamina() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->individual_stamina(), output);
  }

  // optional float cp_multiplier = 20;
  if (this->cp_multiplier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->cp_multiplier(), output);
  }

  // optional .POGOProtos.Inventory.Item.ItemId pokeball = 21;
  if (this->pokeball() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->pokeball(), output);
  }

  // optional uint64 captured_cell_id = 22;
  if (this->captured_cell_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->captured_cell_id(), output);
  }

  // optional int32 battles_attacked = 23;
  if (this->battles_attacked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->battles_attacked(), output);
  }

  // optional int32 battles_defended = 24;
  if (this->battles_defended() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->battles_defended(), output);
  }

  // optional string egg_incubator_id = 25;
  if (this->egg_incubator_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->egg_incubator_id().data(), this->egg_incubator_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Data.PokemonData.egg_incubator_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->egg_incubator_id(), output);
  }

  // optional uint64 creation_time_ms = 26;
  if (this->creation_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->creation_time_ms(), output);
  }

  // optional int32 num_upgrades = 27;
  if (this->num_upgrades() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->num_upgrades(), output);
  }

  // optional float additional_cp_multiplier = 28;
  if (this->additional_cp_multiplier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->additional_cp_multiplier(), output);
  }

  // optional int32 favorite = 29;
  if (this->favorite() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->favorite(), output);
  }

  // optional string nickname = 30;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Data.PokemonData.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->nickname(), output);
  }

  // optional int32 from_fort = 31;
  if (this->from_fort() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->from_fort(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Data.PokemonData)
}

::google::protobuf::uint8* PokemonData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Data.PokemonData)
  // optional fixed64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
  if (this->pokemon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pokemon_id(), target);
  }

  // optional int32 cp = 3;
  if (this->cp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cp(), target);
  }

  // optional int32 stamina = 4;
  if (this->stamina() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stamina(), target);
  }

  // optional int32 stamina_max = 5;
  if (this->stamina_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stamina_max(), target);
  }

  // optional .POGOProtos.Enums.PokemonMove move_1 = 6;
  if (this->move_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->move_1(), target);
  }

  // optional .POGOProtos.Enums.PokemonMove move_2 = 7;
  if (this->move_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->move_2(), target);
  }

  // optional string deployed_fort_id = 8;
  if (this->deployed_fort_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deployed_fort_id().data(), this->deployed_fort_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Data.PokemonData.deployed_fort_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->deployed_fort_id(), target);
  }

  // optional string owner_name = 9;
  if (this->owner_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Data.PokemonData.owner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->owner_name(), target);
  }

  // optional bool is_egg = 10;
  if (this->is_egg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_egg(), target);
  }

  // optional double egg_km_walked_target = 11;
  if (this->egg_km_walked_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->egg_km_walked_target(), target);
  }

  // optional double egg_km_walked_start = 12;
  if (this->egg_km_walked_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->egg_km_walked_start(), target);
  }

  // optional int32 origin = 14;
  if (this->origin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->origin(), target);
  }

  // optional float height_m = 15;
  if (this->height_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->height_m(), target);
  }

  // optional float weight_kg = 16;
  if (this->weight_kg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->weight_kg(), target);
  }

  // optional int32 individual_attack = 17;
  if (this->individual_attack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->individual_attack(), target);
  }

  // optional int32 individual_defense = 18;
  if (this->individual_defense() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->individual_defense(), target);
  }

  // optional int32 individual_stamina = 19;
  if (this->individual_stamina() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->individual_stamina(), target);
  }

  // optional float cp_multiplier = 20;
  if (this->cp_multiplier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->cp_multiplier(), target);
  }

  // optional .POGOProtos.Inventory.Item.ItemId pokeball = 21;
  if (this->pokeball() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->pokeball(), target);
  }

  // optional uint64 captured_cell_id = 22;
  if (this->captured_cell_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->captured_cell_id(), target);
  }

  // optional int32 battles_attacked = 23;
  if (this->battles_attacked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->battles_attacked(), target);
  }

  // optional int32 battles_defended = 24;
  if (this->battles_defended() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->battles_defended(), target);
  }

  // optional string egg_incubator_id = 25;
  if (this->egg_incubator_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->egg_incubator_id().data(), this->egg_incubator_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Data.PokemonData.egg_incubator_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->egg_incubator_id(), target);
  }

  // optional uint64 creation_time_ms = 26;
  if (this->creation_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->creation_time_ms(), target);
  }

  // optional int32 num_upgrades = 27;
  if (this->num_upgrades() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->num_upgrades(), target);
  }

  // optional float additional_cp_multiplier = 28;
  if (this->additional_cp_multiplier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->additional_cp_multiplier(), target);
  }

  // optional int32 favorite = 29;
  if (this->favorite() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->favorite(), target);
  }

  // optional string nickname = 30;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Data.PokemonData.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->nickname(), target);
  }

  // optional int32 from_fort = 31;
  if (this->from_fort() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->from_fort(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Data.PokemonData)
  return target;
}

int PokemonData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Data.PokemonData)
  int total_size = 0;

  // optional fixed64 id = 1;
  if (this->id() != 0) {
    total_size += 1 + 8;
  }

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
  if (this->pokemon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pokemon_id());
  }

  // optional int32 cp = 3;
  if (this->cp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cp());
  }

  // optional int32 stamina = 4;
  if (this->stamina() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stamina());
  }

  // optional int32 stamina_max = 5;
  if (this->stamina_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stamina_max());
  }

  // optional .POGOProtos.Enums.PokemonMove move_1 = 6;
  if (this->move_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->move_1());
  }

  // optional .POGOProtos.Enums.PokemonMove move_2 = 7;
  if (this->move_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->move_2());
  }

  // optional string deployed_fort_id = 8;
  if (this->deployed_fort_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deployed_fort_id());
  }

  // optional string owner_name = 9;
  if (this->owner_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_name());
  }

  // optional bool is_egg = 10;
  if (this->is_egg() != 0) {
    total_size += 1 + 1;
  }

  // optional double egg_km_walked_target = 11;
  if (this->egg_km_walked_target() != 0) {
    total_size += 1 + 8;
  }

  // optional double egg_km_walked_start = 12;
  if (this->egg_km_walked_start() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 origin = 14;
  if (this->origin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->origin());
  }

  // optional float height_m = 15;
  if (this->height_m() != 0) {
    total_size += 1 + 4;
  }

  // optional float weight_kg = 16;
  if (this->weight_kg() != 0) {
    total_size += 2 + 4;
  }

  // optional int32 individual_attack = 17;
  if (this->individual_attack() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->individual_attack());
  }

  // optional int32 individual_defense = 18;
  if (this->individual_defense() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->individual_defense());
  }

  // optional int32 individual_stamina = 19;
  if (this->individual_stamina() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->individual_stamina());
  }

  // optional float cp_multiplier = 20;
  if (this->cp_multiplier() != 0) {
    total_size += 2 + 4;
  }

  // optional .POGOProtos.Inventory.Item.ItemId pokeball = 21;
  if (this->pokeball() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pokeball());
  }

  // optional uint64 captured_cell_id = 22;
  if (this->captured_cell_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->captured_cell_id());
  }

  // optional int32 battles_attacked = 23;
  if (this->battles_attacked() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battles_attacked());
  }

  // optional int32 battles_defended = 24;
  if (this->battles_defended() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battles_defended());
  }

  // optional string egg_incubator_id = 25;
  if (this->egg_incubator_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->egg_incubator_id());
  }

  // optional uint64 creation_time_ms = 26;
  if (this->creation_time_ms() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->creation_time_ms());
  }

  // optional int32 num_upgrades = 27;
  if (this->num_upgrades() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_upgrades());
  }

  // optional float additional_cp_multiplier = 28;
  if (this->additional_cp_multiplier() != 0) {
    total_size += 2 + 4;
  }

  // optional int32 favorite = 29;
  if (this->favorite() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->favorite());
  }

  // optional string nickname = 30;
  if (this->nickname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional int32 from_fort = 31;
  if (this->from_fort() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_fort());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokemonData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Data.PokemonData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PokemonData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PokemonData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Data.PokemonData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Data.PokemonData)
    MergeFrom(*source);
  }
}

void PokemonData::MergeFrom(const PokemonData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Data.PokemonData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.pokemon_id() != 0) {
    set_pokemon_id(from.pokemon_id());
  }
  if (from.cp() != 0) {
    set_cp(from.cp());
  }
  if (from.stamina() != 0) {
    set_stamina(from.stamina());
  }
  if (from.stamina_max() != 0) {
    set_stamina_max(from.stamina_max());
  }
  if (from.move_1() != 0) {
    set_move_1(from.move_1());
  }
  if (from.move_2() != 0) {
    set_move_2(from.move_2());
  }
  if (from.deployed_fort_id().size() > 0) {

    deployed_fort_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deployed_fort_id_);
  }
  if (from.owner_name().size() > 0) {

    owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  if (from.is_egg() != 0) {
    set_is_egg(from.is_egg());
  }
  if (from.egg_km_walked_target() != 0) {
    set_egg_km_walked_target(from.egg_km_walked_target());
  }
  if (from.egg_km_walked_start() != 0) {
    set_egg_km_walked_start(from.egg_km_walked_start());
  }
  if (from.origin() != 0) {
    set_origin(from.origin());
  }
  if (from.height_m() != 0) {
    set_height_m(from.height_m());
  }
  if (from.weight_kg() != 0) {
    set_weight_kg(from.weight_kg());
  }
  if (from.individual_attack() != 0) {
    set_individual_attack(from.individual_attack());
  }
  if (from.individual_defense() != 0) {
    set_individual_defense(from.individual_defense());
  }
  if (from.individual_stamina() != 0) {
    set_individual_stamina(from.individual_stamina());
  }
  if (from.cp_multiplier() != 0) {
    set_cp_multiplier(from.cp_multiplier());
  }
  if (from.pokeball() != 0) {
    set_pokeball(from.pokeball());
  }
  if (from.captured_cell_id() != 0) {
    set_captured_cell_id(from.captured_cell_id());
  }
  if (from.battles_attacked() != 0) {
    set_battles_attacked(from.battles_attacked());
  }
  if (from.battles_defended() != 0) {
    set_battles_defended(from.battles_defended());
  }
  if (from.egg_incubator_id().size() > 0) {

    egg_incubator_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.egg_incubator_id_);
  }
  if (from.creation_time_ms() != 0) {
    set_creation_time_ms(from.creation_time_ms());
  }
  if (from.num_upgrades() != 0) {
    set_num_upgrades(from.num_upgrades());
  }
  if (from.additional_cp_multiplier() != 0) {
    set_additional_cp_multiplier(from.additional_cp_multiplier());
  }
  if (from.favorite() != 0) {
    set_favorite(from.favorite());
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.from_fort() != 0) {
    set_from_fort(from.from_fort());
  }
}

void PokemonData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Data.PokemonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokemonData::CopyFrom(const PokemonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Data.PokemonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokemonData::IsInitialized() const {

  return true;
}

void PokemonData::Swap(PokemonData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PokemonData::InternalSwap(PokemonData* other) {
  std::swap(id_, other->id_);
  std::swap(pokemon_id_, other->pokemon_id_);
  std::swap(cp_, other->cp_);
  std::swap(stamina_, other->stamina_);
  std::swap(stamina_max_, other->stamina_max_);
  std::swap(move_1_, other->move_1_);
  std::swap(move_2_, other->move_2_);
  deployed_fort_id_.Swap(&other->deployed_fort_id_);
  owner_name_.Swap(&other->owner_name_);
  std::swap(is_egg_, other->is_egg_);
  std::swap(egg_km_walked_target_, other->egg_km_walked_target_);
  std::swap(egg_km_walked_start_, other->egg_km_walked_start_);
  std::swap(origin_, other->origin_);
  std::swap(height_m_, other->height_m_);
  std::swap(weight_kg_, other->weight_kg_);
  std::swap(individual_attack_, other->individual_attack_);
  std::swap(individual_defense_, other->individual_defense_);
  std::swap(individual_stamina_, other->individual_stamina_);
  std::swap(cp_multiplier_, other->cp_multiplier_);
  std::swap(pokeball_, other->pokeball_);
  std::swap(captured_cell_id_, other->captured_cell_id_);
  std::swap(battles_attacked_, other->battles_attacked_);
  std::swap(battles_defended_, other->battles_defended_);
  egg_incubator_id_.Swap(&other->egg_incubator_id_);
  std::swap(creation_time_ms_, other->creation_time_ms_);
  std::swap(num_upgrades_, other->num_upgrades_);
  std::swap(additional_cp_multiplier_, other->additional_cp_multiplier_);
  std::swap(favorite_, other->favorite_);
  nickname_.Swap(&other->nickname_);
  std::swap(from_fort_, other->from_fort_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PokemonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PokemonData_descriptor_;
  metadata.reflection = PokemonData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PokemonData

// optional fixed64 id = 1;
void PokemonData::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PokemonData::id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.id)
  return id_;
}
 void PokemonData::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.id)
}

// optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
void PokemonData::clear_pokemon_id() {
  pokemon_id_ = 0;
}
 ::POGOProtos::Enums::PokemonId PokemonData::pokemon_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.pokemon_id)
  return static_cast< ::POGOProtos::Enums::PokemonId >(pokemon_id_);
}
 void PokemonData::set_pokemon_id(::POGOProtos::Enums::PokemonId value) {
  
  pokemon_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.pokemon_id)
}

// optional int32 cp = 3;
void PokemonData::clear_cp() {
  cp_ = 0;
}
 ::google::protobuf::int32 PokemonData::cp() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.cp)
  return cp_;
}
 void PokemonData::set_cp(::google::protobuf::int32 value) {
  
  cp_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.cp)
}

// optional int32 stamina = 4;
void PokemonData::clear_stamina() {
  stamina_ = 0;
}
 ::google::protobuf::int32 PokemonData::stamina() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.stamina)
  return stamina_;
}
 void PokemonData::set_stamina(::google::protobuf::int32 value) {
  
  stamina_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.stamina)
}

// optional int32 stamina_max = 5;
void PokemonData::clear_stamina_max() {
  stamina_max_ = 0;
}
 ::google::protobuf::int32 PokemonData::stamina_max() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.stamina_max)
  return stamina_max_;
}
 void PokemonData::set_stamina_max(::google::protobuf::int32 value) {
  
  stamina_max_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.stamina_max)
}

// optional .POGOProtos.Enums.PokemonMove move_1 = 6;
void PokemonData::clear_move_1() {
  move_1_ = 0;
}
 ::POGOProtos::Enums::PokemonMove PokemonData::move_1() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.move_1)
  return static_cast< ::POGOProtos::Enums::PokemonMove >(move_1_);
}
 void PokemonData::set_move_1(::POGOProtos::Enums::PokemonMove value) {
  
  move_1_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.move_1)
}

// optional .POGOProtos.Enums.PokemonMove move_2 = 7;
void PokemonData::clear_move_2() {
  move_2_ = 0;
}
 ::POGOProtos::Enums::PokemonMove PokemonData::move_2() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.move_2)
  return static_cast< ::POGOProtos::Enums::PokemonMove >(move_2_);
}
 void PokemonData::set_move_2(::POGOProtos::Enums::PokemonMove value) {
  
  move_2_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.move_2)
}

// optional string deployed_fort_id = 8;
void PokemonData::clear_deployed_fort_id() {
  deployed_fort_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PokemonData::deployed_fort_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.deployed_fort_id)
  return deployed_fort_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PokemonData::set_deployed_fort_id(const ::std::string& value) {
  
  deployed_fort_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.deployed_fort_id)
}
 void PokemonData::set_deployed_fort_id(const char* value) {
  
  deployed_fort_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Data.PokemonData.deployed_fort_id)
}
 void PokemonData::set_deployed_fort_id(const char* value, size_t size) {
  
  deployed_fort_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Data.PokemonData.deployed_fort_id)
}
 ::std::string* PokemonData::mutable_deployed_fort_id() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PokemonData.deployed_fort_id)
  return deployed_fort_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PokemonData::release_deployed_fort_id() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PokemonData.deployed_fort_id)
  
  return deployed_fort_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PokemonData::set_allocated_deployed_fort_id(::std::string* deployed_fort_id) {
  if (deployed_fort_id != NULL) {
    
  } else {
    
  }
  deployed_fort_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deployed_fort_id);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PokemonData.deployed_fort_id)
}

// optional string owner_name = 9;
void PokemonData::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PokemonData::owner_name() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.owner_name)
  return owner_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PokemonData::set_owner_name(const ::std::string& value) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.owner_name)
}
 void PokemonData::set_owner_name(const char* value) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Data.PokemonData.owner_name)
}
 void PokemonData::set_owner_name(const char* value, size_t size) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Data.PokemonData.owner_name)
}
 ::std::string* PokemonData::mutable_owner_name() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PokemonData.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PokemonData::release_owner_name() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PokemonData.owner_name)
  
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PokemonData::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    
  } else {
    
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PokemonData.owner_name)
}

// optional bool is_egg = 10;
void PokemonData::clear_is_egg() {
  is_egg_ = false;
}
 bool PokemonData::is_egg() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.is_egg)
  return is_egg_;
}
 void PokemonData::set_is_egg(bool value) {
  
  is_egg_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.is_egg)
}

// optional double egg_km_walked_target = 11;
void PokemonData::clear_egg_km_walked_target() {
  egg_km_walked_target_ = 0;
}
 double PokemonData::egg_km_walked_target() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.egg_km_walked_target)
  return egg_km_walked_target_;
}
 void PokemonData::set_egg_km_walked_target(double value) {
  
  egg_km_walked_target_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.egg_km_walked_target)
}

// optional double egg_km_walked_start = 12;
void PokemonData::clear_egg_km_walked_start() {
  egg_km_walked_start_ = 0;
}
 double PokemonData::egg_km_walked_start() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.egg_km_walked_start)
  return egg_km_walked_start_;
}
 void PokemonData::set_egg_km_walked_start(double value) {
  
  egg_km_walked_start_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.egg_km_walked_start)
}

// optional int32 origin = 14;
void PokemonData::clear_origin() {
  origin_ = 0;
}
 ::google::protobuf::int32 PokemonData::origin() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.origin)
  return origin_;
}
 void PokemonData::set_origin(::google::protobuf::int32 value) {
  
  origin_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.origin)
}

// optional float height_m = 15;
void PokemonData::clear_height_m() {
  height_m_ = 0;
}
 float PokemonData::height_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.height_m)
  return height_m_;
}
 void PokemonData::set_height_m(float value) {
  
  height_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.height_m)
}

// optional float weight_kg = 16;
void PokemonData::clear_weight_kg() {
  weight_kg_ = 0;
}
 float PokemonData::weight_kg() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.weight_kg)
  return weight_kg_;
}
 void PokemonData::set_weight_kg(float value) {
  
  weight_kg_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.weight_kg)
}

// optional int32 individual_attack = 17;
void PokemonData::clear_individual_attack() {
  individual_attack_ = 0;
}
 ::google::protobuf::int32 PokemonData::individual_attack() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.individual_attack)
  return individual_attack_;
}
 void PokemonData::set_individual_attack(::google::protobuf::int32 value) {
  
  individual_attack_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.individual_attack)
}

// optional int32 individual_defense = 18;
void PokemonData::clear_individual_defense() {
  individual_defense_ = 0;
}
 ::google::protobuf::int32 PokemonData::individual_defense() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.individual_defense)
  return individual_defense_;
}
 void PokemonData::set_individual_defense(::google::protobuf::int32 value) {
  
  individual_defense_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.individual_defense)
}

// optional int32 individual_stamina = 19;
void PokemonData::clear_individual_stamina() {
  individual_stamina_ = 0;
}
 ::google::protobuf::int32 PokemonData::individual_stamina() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.individual_stamina)
  return individual_stamina_;
}
 void PokemonData::set_individual_stamina(::google::protobuf::int32 value) {
  
  individual_stamina_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.individual_stamina)
}

// optional float cp_multiplier = 20;
void PokemonData::clear_cp_multiplier() {
  cp_multiplier_ = 0;
}
 float PokemonData::cp_multiplier() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.cp_multiplier)
  return cp_multiplier_;
}
 void PokemonData::set_cp_multiplier(float value) {
  
  cp_multiplier_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.cp_multiplier)
}

// optional .POGOProtos.Inventory.Item.ItemId pokeball = 21;
void PokemonData::clear_pokeball() {
  pokeball_ = 0;
}
 ::POGOProtos::Inventory::Item::ItemId PokemonData::pokeball() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.pokeball)
  return static_cast< ::POGOProtos::Inventory::Item::ItemId >(pokeball_);
}
 void PokemonData::set_pokeball(::POGOProtos::Inventory::Item::ItemId value) {
  
  pokeball_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.pokeball)
}

// optional uint64 captured_cell_id = 22;
void PokemonData::clear_captured_cell_id() {
  captured_cell_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PokemonData::captured_cell_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.captured_cell_id)
  return captured_cell_id_;
}
 void PokemonData::set_captured_cell_id(::google::protobuf::uint64 value) {
  
  captured_cell_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.captured_cell_id)
}

// optional int32 battles_attacked = 23;
void PokemonData::clear_battles_attacked() {
  battles_attacked_ = 0;
}
 ::google::protobuf::int32 PokemonData::battles_attacked() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.battles_attacked)
  return battles_attacked_;
}
 void PokemonData::set_battles_attacked(::google::protobuf::int32 value) {
  
  battles_attacked_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.battles_attacked)
}

// optional int32 battles_defended = 24;
void PokemonData::clear_battles_defended() {
  battles_defended_ = 0;
}
 ::google::protobuf::int32 PokemonData::battles_defended() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.battles_defended)
  return battles_defended_;
}
 void PokemonData::set_battles_defended(::google::protobuf::int32 value) {
  
  battles_defended_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.battles_defended)
}

// optional string egg_incubator_id = 25;
void PokemonData::clear_egg_incubator_id() {
  egg_incubator_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PokemonData::egg_incubator_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.egg_incubator_id)
  return egg_incubator_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PokemonData::set_egg_incubator_id(const ::std::string& value) {
  
  egg_incubator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.egg_incubator_id)
}
 void PokemonData::set_egg_incubator_id(const char* value) {
  
  egg_incubator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Data.PokemonData.egg_incubator_id)
}
 void PokemonData::set_egg_incubator_id(const char* value, size_t size) {
  
  egg_incubator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Data.PokemonData.egg_incubator_id)
}
 ::std::string* PokemonData::mutable_egg_incubator_id() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PokemonData.egg_incubator_id)
  return egg_incubator_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PokemonData::release_egg_incubator_id() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PokemonData.egg_incubator_id)
  
  return egg_incubator_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PokemonData::set_allocated_egg_incubator_id(::std::string* egg_incubator_id) {
  if (egg_incubator_id != NULL) {
    
  } else {
    
  }
  egg_incubator_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), egg_incubator_id);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PokemonData.egg_incubator_id)
}

// optional uint64 creation_time_ms = 26;
void PokemonData::clear_creation_time_ms() {
  creation_time_ms_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PokemonData::creation_time_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.creation_time_ms)
  return creation_time_ms_;
}
 void PokemonData::set_creation_time_ms(::google::protobuf::uint64 value) {
  
  creation_time_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.creation_time_ms)
}

// optional int32 num_upgrades = 27;
void PokemonData::clear_num_upgrades() {
  num_upgrades_ = 0;
}
 ::google::protobuf::int32 PokemonData::num_upgrades() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.num_upgrades)
  return num_upgrades_;
}
 void PokemonData::set_num_upgrades(::google::protobuf::int32 value) {
  
  num_upgrades_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.num_upgrades)
}

// optional float additional_cp_multiplier = 28;
void PokemonData::clear_additional_cp_multiplier() {
  additional_cp_multiplier_ = 0;
}
 float PokemonData::additional_cp_multiplier() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.additional_cp_multiplier)
  return additional_cp_multiplier_;
}
 void PokemonData::set_additional_cp_multiplier(float value) {
  
  additional_cp_multiplier_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.additional_cp_multiplier)
}

// optional int32 favorite = 29;
void PokemonData::clear_favorite() {
  favorite_ = 0;
}
 ::google::protobuf::int32 PokemonData::favorite() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.favorite)
  return favorite_;
}
 void PokemonData::set_favorite(::google::protobuf::int32 value) {
  
  favorite_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.favorite)
}

// optional string nickname = 30;
void PokemonData::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PokemonData::nickname() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PokemonData::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.nickname)
}
 void PokemonData::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Data.PokemonData.nickname)
}
 void PokemonData::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Data.PokemonData.nickname)
}
 ::std::string* PokemonData::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PokemonData.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PokemonData::release_nickname() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PokemonData.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PokemonData::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PokemonData.nickname)
}

// optional int32 from_fort = 31;
void PokemonData::clear_from_fort() {
  from_fort_ = 0;
}
 ::google::protobuf::int32 PokemonData::from_fort() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.from_fort)
  return from_fort_;
}
 void PokemonData::set_from_fort(::google::protobuf::int32 value) {
  
  from_fort_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.from_fort)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Data
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
