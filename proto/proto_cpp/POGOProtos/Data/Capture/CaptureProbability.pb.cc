// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/Capture/CaptureProbability.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Data/Capture/CaptureProbability.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Data {
namespace Capture {

namespace {

const ::google::protobuf::Descriptor* CaptureProbability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaptureProbability_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto() {
  protobuf_AddDesc_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Data/Capture/CaptureProbability.proto");
  GOOGLE_CHECK(file != NULL);
  CaptureProbability_descriptor_ = file->message_type(0);
  static const int CaptureProbability_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureProbability, pokeball_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureProbability, capture_probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureProbability, reticle_difficulty_scale_),
  };
  CaptureProbability_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CaptureProbability_descriptor_,
      CaptureProbability::default_instance_,
      CaptureProbability_offsets_,
      -1,
      -1,
      -1,
      sizeof(CaptureProbability),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureProbability, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureProbability, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CaptureProbability_descriptor_, &CaptureProbability::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto() {
  delete CaptureProbability::default_instance_;
  delete CaptureProbability_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Inventory::Item::protobuf_AddDesc_POGOProtos_2fInventory_2fItem_2fItemId_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n0POGOProtos/Data/Capture/CaptureProbabi"
    "lity.proto\022\027POGOProtos.Data.Capture\032&POG"
    "OProtos/Inventory/Item/ItemId.proto\"\225\001\n\022"
    "CaptureProbability\022<\n\rpokeball_type\030\001 \003("
    "\0162!.POGOProtos.Inventory.Item.ItemIdB\002\020\001"
    "\022\037\n\023capture_probability\030\002 \003(\002B\002\020\001\022 \n\030ret"
    "icle_difficulty_scale\030\014 \001(\001b\006proto3", 275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Data/Capture/CaptureProbability.proto", &protobuf_RegisterTypes);
  CaptureProbability::default_instance_ = new CaptureProbability();
  CaptureProbability::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto() {
    protobuf_AddDesc_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptureProbability::kPokeballTypeFieldNumber;
const int CaptureProbability::kCaptureProbabilityFieldNumber;
const int CaptureProbability::kReticleDifficultyScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptureProbability::CaptureProbability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Data.Capture.CaptureProbability)
}

void CaptureProbability::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CaptureProbability::CaptureProbability(const CaptureProbability& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Data.Capture.CaptureProbability)
}

void CaptureProbability::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reticle_difficulty_scale_ = 0;
}

CaptureProbability::~CaptureProbability() {
  // @@protoc_insertion_point(destructor:POGOProtos.Data.Capture.CaptureProbability)
  SharedDtor();
}

void CaptureProbability::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CaptureProbability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaptureProbability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaptureProbability_descriptor_;
}

const CaptureProbability& CaptureProbability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto();
  return *default_instance_;
}

CaptureProbability* CaptureProbability::default_instance_ = NULL;

CaptureProbability* CaptureProbability::New(::google::protobuf::Arena* arena) const {
  CaptureProbability* n = new CaptureProbability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CaptureProbability::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Data.Capture.CaptureProbability)
  reticle_difficulty_scale_ = 0;
  pokeball_type_.Clear();
  capture_probability_.Clear();
}

bool CaptureProbability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Data.Capture.CaptureProbability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .POGOProtos.Inventory.Item.ItemId pokeball_type = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_pokeball_type(static_cast< ::POGOProtos::Inventory::Item::ItemId >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_pokeball_type(static_cast< ::POGOProtos::Inventory::Item::ItemId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_capture_probability;
        break;
      }

      // repeated float capture_probability = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_capture_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_capture_probability())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_capture_probability())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_reticle_difficulty_scale;
        break;
      }

      // optional double reticle_difficulty_scale = 12;
      case 12: {
        if (tag == 97) {
         parse_reticle_difficulty_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reticle_difficulty_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Data.Capture.CaptureProbability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Data.Capture.CaptureProbability)
  return false;
#undef DO_
}

void CaptureProbability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Data.Capture.CaptureProbability)
  // repeated .POGOProtos.Inventory.Item.ItemId pokeball_type = 1 [packed = true];
  if (this->pokeball_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_pokeball_type_cached_byte_size_);
  }
  for (int i = 0; i < this->pokeball_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->pokeball_type(i), output);
  }

  // repeated float capture_probability = 2 [packed = true];
  if (this->capture_probability_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_capture_probability_cached_byte_size_);
  }
  for (int i = 0; i < this->capture_probability_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->capture_probability(i), output);
  }

  // optional double reticle_difficulty_scale = 12;
  if (this->reticle_difficulty_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->reticle_difficulty_scale(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Data.Capture.CaptureProbability)
}

::google::protobuf::uint8* CaptureProbability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Data.Capture.CaptureProbability)
  // repeated .POGOProtos.Inventory.Item.ItemId pokeball_type = 1 [packed = true];
  if (this->pokeball_type_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _pokeball_type_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pokeball_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->pokeball_type(i), target);
  }

  // repeated float capture_probability = 2 [packed = true];
  if (this->capture_probability_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _capture_probability_cached_byte_size_, target);
  }
  for (int i = 0; i < this->capture_probability_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->capture_probability(i), target);
  }

  // optional double reticle_difficulty_scale = 12;
  if (this->reticle_difficulty_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->reticle_difficulty_scale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Data.Capture.CaptureProbability)
  return target;
}

int CaptureProbability::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Data.Capture.CaptureProbability)
  int total_size = 0;

  // optional double reticle_difficulty_scale = 12;
  if (this->reticle_difficulty_scale() != 0) {
    total_size += 1 + 8;
  }

  // repeated .POGOProtos.Inventory.Item.ItemId pokeball_type = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->pokeball_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->pokeball_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pokeball_type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float capture_probability = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->capture_probability_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _capture_probability_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptureProbability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Data.Capture.CaptureProbability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CaptureProbability* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CaptureProbability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Data.Capture.CaptureProbability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Data.Capture.CaptureProbability)
    MergeFrom(*source);
  }
}

void CaptureProbability::MergeFrom(const CaptureProbability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Data.Capture.CaptureProbability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pokeball_type_.MergeFrom(from.pokeball_type_);
  capture_probability_.MergeFrom(from.capture_probability_);
  if (from.reticle_difficulty_scale() != 0) {
    set_reticle_difficulty_scale(from.reticle_difficulty_scale());
  }
}

void CaptureProbability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Data.Capture.CaptureProbability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaptureProbability::CopyFrom(const CaptureProbability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Data.Capture.CaptureProbability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureProbability::IsInitialized() const {

  return true;
}

void CaptureProbability::Swap(CaptureProbability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptureProbability::InternalSwap(CaptureProbability* other) {
  pokeball_type_.UnsafeArenaSwap(&other->pokeball_type_);
  capture_probability_.UnsafeArenaSwap(&other->capture_probability_);
  std::swap(reticle_difficulty_scale_, other->reticle_difficulty_scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CaptureProbability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaptureProbability_descriptor_;
  metadata.reflection = CaptureProbability_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CaptureProbability

// repeated .POGOProtos.Inventory.Item.ItemId pokeball_type = 1 [packed = true];
int CaptureProbability::pokeball_type_size() const {
  return pokeball_type_.size();
}
void CaptureProbability::clear_pokeball_type() {
  pokeball_type_.Clear();
}
 ::POGOProtos::Inventory::Item::ItemId CaptureProbability::pokeball_type(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Capture.CaptureProbability.pokeball_type)
  return static_cast< ::POGOProtos::Inventory::Item::ItemId >(pokeball_type_.Get(index));
}
 void CaptureProbability::set_pokeball_type(int index, ::POGOProtos::Inventory::Item::ItemId value) {
  pokeball_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.Capture.CaptureProbability.pokeball_type)
}
 void CaptureProbability::add_pokeball_type(::POGOProtos::Inventory::Item::ItemId value) {
  pokeball_type_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Data.Capture.CaptureProbability.pokeball_type)
}
 const ::google::protobuf::RepeatedField<int>&
CaptureProbability::pokeball_type() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Data.Capture.CaptureProbability.pokeball_type)
  return pokeball_type_;
}
 ::google::protobuf::RepeatedField<int>*
CaptureProbability::mutable_pokeball_type() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Data.Capture.CaptureProbability.pokeball_type)
  return &pokeball_type_;
}

// repeated float capture_probability = 2 [packed = true];
int CaptureProbability::capture_probability_size() const {
  return capture_probability_.size();
}
void CaptureProbability::clear_capture_probability() {
  capture_probability_.Clear();
}
 float CaptureProbability::capture_probability(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Capture.CaptureProbability.capture_probability)
  return capture_probability_.Get(index);
}
 void CaptureProbability::set_capture_probability(int index, float value) {
  capture_probability_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.Capture.CaptureProbability.capture_probability)
}
 void CaptureProbability::add_capture_probability(float value) {
  capture_probability_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Data.Capture.CaptureProbability.capture_probability)
}
 const ::google::protobuf::RepeatedField< float >&
CaptureProbability::capture_probability() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Data.Capture.CaptureProbability.capture_probability)
  return capture_probability_;
}
 ::google::protobuf::RepeatedField< float >*
CaptureProbability::mutable_capture_probability() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Data.Capture.CaptureProbability.capture_probability)
  return &capture_probability_;
}

// optional double reticle_difficulty_scale = 12;
void CaptureProbability::clear_reticle_difficulty_scale() {
  reticle_difficulty_scale_ = 0;
}
 double CaptureProbability::reticle_difficulty_scale() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Capture.CaptureProbability.reticle_difficulty_scale)
  return reticle_difficulty_scale_;
}
 void CaptureProbability::set_reticle_difficulty_scale(double value) {
  
  reticle_difficulty_scale_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.Capture.CaptureProbability.reticle_difficulty_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Capture
}  // namespace Data
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
