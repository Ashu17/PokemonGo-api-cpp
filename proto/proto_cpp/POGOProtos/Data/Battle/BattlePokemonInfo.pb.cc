// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/Battle/BattlePokemonInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Data/Battle/BattlePokemonInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Data {
namespace Battle {

namespace {

const ::google::protobuf::Descriptor* BattlePokemonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattlePokemonInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto() {
  protobuf_AddDesc_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Data/Battle/BattlePokemonInfo.proto");
  GOOGLE_CHECK(file != NULL);
  BattlePokemonInfo_descriptor_ = file->message_type(0);
  static const int BattlePokemonInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePokemonInfo, pokemon_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePokemonInfo, current_health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePokemonInfo, current_energy_),
  };
  BattlePokemonInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BattlePokemonInfo_descriptor_,
      BattlePokemonInfo::default_instance_,
      BattlePokemonInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(BattlePokemonInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePokemonInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePokemonInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BattlePokemonInfo_descriptor_, &BattlePokemonInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto() {
  delete BattlePokemonInfo::default_instance_;
  delete BattlePokemonInfo_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Data::protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.POGOProtos/Data/Battle/BattlePokemonIn"
    "fo.proto\022\026POGOProtos.Data.Battle\032!POGOPr"
    "otos/Data/PokemonData.proto\"w\n\021BattlePok"
    "emonInfo\0222\n\014pokemon_data\030\001 \001(\0132\034.POGOPro"
    "tos.Data.PokemonData\022\026\n\016current_health\030\002"
    " \001(\005\022\026\n\016current_energy\030\003 \001(\005b\006proto3", 236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Data/Battle/BattlePokemonInfo.proto", &protobuf_RegisterTypes);
  BattlePokemonInfo::default_instance_ = new BattlePokemonInfo();
  BattlePokemonInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto() {
    protobuf_AddDesc_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePokemonInfo::kPokemonDataFieldNumber;
const int BattlePokemonInfo::kCurrentHealthFieldNumber;
const int BattlePokemonInfo::kCurrentEnergyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePokemonInfo::BattlePokemonInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Data.Battle.BattlePokemonInfo)
}

void BattlePokemonInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pokemon_data_ = const_cast< ::POGOProtos::Data::PokemonData*>(&::POGOProtos::Data::PokemonData::default_instance());
}

BattlePokemonInfo::BattlePokemonInfo(const BattlePokemonInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Data.Battle.BattlePokemonInfo)
}

void BattlePokemonInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pokemon_data_ = NULL;
  current_health_ = 0;
  current_energy_ = 0;
}

BattlePokemonInfo::~BattlePokemonInfo() {
  // @@protoc_insertion_point(destructor:POGOProtos.Data.Battle.BattlePokemonInfo)
  SharedDtor();
}

void BattlePokemonInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pokemon_data_;
  }
}

void BattlePokemonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePokemonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattlePokemonInfo_descriptor_;
}

const BattlePokemonInfo& BattlePokemonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fData_2fBattle_2fBattlePokemonInfo_2eproto();
  return *default_instance_;
}

BattlePokemonInfo* BattlePokemonInfo::default_instance_ = NULL;

BattlePokemonInfo* BattlePokemonInfo::New(::google::protobuf::Arena* arena) const {
  BattlePokemonInfo* n = new BattlePokemonInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePokemonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Data.Battle.BattlePokemonInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BattlePokemonInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BattlePokemonInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(current_health_, current_energy_);
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool BattlePokemonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Data.Battle.BattlePokemonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pokemon_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current_health;
        break;
      }

      // optional int32 current_health = 2;
      case 2: {
        if (tag == 16) {
         parse_current_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_health_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current_energy;
        break;
      }

      // optional int32 current_energy = 3;
      case 3: {
        if (tag == 24) {
         parse_current_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_energy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Data.Battle.BattlePokemonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Data.Battle.BattlePokemonInfo)
  return false;
#undef DO_
}

void BattlePokemonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Data.Battle.BattlePokemonInfo)
  // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
  if (this->has_pokemon_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pokemon_data_, output);
  }

  // optional int32 current_health = 2;
  if (this->current_health() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_health(), output);
  }

  // optional int32 current_energy = 3;
  if (this->current_energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_energy(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Data.Battle.BattlePokemonInfo)
}

::google::protobuf::uint8* BattlePokemonInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Data.Battle.BattlePokemonInfo)
  // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
  if (this->has_pokemon_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pokemon_data_, false, target);
  }

  // optional int32 current_health = 2;
  if (this->current_health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_health(), target);
  }

  // optional int32 current_energy = 3;
  if (this->current_energy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_energy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Data.Battle.BattlePokemonInfo)
  return target;
}

int BattlePokemonInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Data.Battle.BattlePokemonInfo)
  int total_size = 0;

  // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
  if (this->has_pokemon_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pokemon_data_);
  }

  // optional int32 current_health = 2;
  if (this->current_health() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_health());
  }

  // optional int32 current_energy = 3;
  if (this->current_energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_energy());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePokemonInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Data.Battle.BattlePokemonInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BattlePokemonInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePokemonInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Data.Battle.BattlePokemonInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Data.Battle.BattlePokemonInfo)
    MergeFrom(*source);
  }
}

void BattlePokemonInfo::MergeFrom(const BattlePokemonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Data.Battle.BattlePokemonInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_pokemon_data()) {
    mutable_pokemon_data()->::POGOProtos::Data::PokemonData::MergeFrom(from.pokemon_data());
  }
  if (from.current_health() != 0) {
    set_current_health(from.current_health());
  }
  if (from.current_energy() != 0) {
    set_current_energy(from.current_energy());
  }
}

void BattlePokemonInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Data.Battle.BattlePokemonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePokemonInfo::CopyFrom(const BattlePokemonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Data.Battle.BattlePokemonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePokemonInfo::IsInitialized() const {

  return true;
}

void BattlePokemonInfo::Swap(BattlePokemonInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePokemonInfo::InternalSwap(BattlePokemonInfo* other) {
  std::swap(pokemon_data_, other->pokemon_data_);
  std::swap(current_health_, other->current_health_);
  std::swap(current_energy_, other->current_energy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePokemonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattlePokemonInfo_descriptor_;
  metadata.reflection = BattlePokemonInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePokemonInfo

// optional .POGOProtos.Data.PokemonData pokemon_data = 1;
bool BattlePokemonInfo::has_pokemon_data() const {
  return !_is_default_instance_ && pokemon_data_ != NULL;
}
void BattlePokemonInfo::clear_pokemon_data() {
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
}
const ::POGOProtos::Data::PokemonData& BattlePokemonInfo::pokemon_data() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Battle.BattlePokemonInfo.pokemon_data)
  return pokemon_data_ != NULL ? *pokemon_data_ : *default_instance_->pokemon_data_;
}
::POGOProtos::Data::PokemonData* BattlePokemonInfo::mutable_pokemon_data() {
  
  if (pokemon_data_ == NULL) {
    pokemon_data_ = new ::POGOProtos::Data::PokemonData;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.Battle.BattlePokemonInfo.pokemon_data)
  return pokemon_data_;
}
::POGOProtos::Data::PokemonData* BattlePokemonInfo::release_pokemon_data() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.Battle.BattlePokemonInfo.pokemon_data)
  
  ::POGOProtos::Data::PokemonData* temp = pokemon_data_;
  pokemon_data_ = NULL;
  return temp;
}
void BattlePokemonInfo::set_allocated_pokemon_data(::POGOProtos::Data::PokemonData* pokemon_data) {
  delete pokemon_data_;
  pokemon_data_ = pokemon_data;
  if (pokemon_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.Battle.BattlePokemonInfo.pokemon_data)
}

// optional int32 current_health = 2;
void BattlePokemonInfo::clear_current_health() {
  current_health_ = 0;
}
 ::google::protobuf::int32 BattlePokemonInfo::current_health() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Battle.BattlePokemonInfo.current_health)
  return current_health_;
}
 void BattlePokemonInfo::set_current_health(::google::protobuf::int32 value) {
  
  current_health_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.Battle.BattlePokemonInfo.current_health)
}

// optional int32 current_energy = 3;
void BattlePokemonInfo::clear_current_energy() {
  current_energy_ = 0;
}
 ::google::protobuf::int32 BattlePokemonInfo::current_energy() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Battle.BattlePokemonInfo.current_energy)
  return current_energy_;
}
 void BattlePokemonInfo::set_current_energy(::google::protobuf::int32 value) {
  
  current_energy_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.Battle.BattlePokemonInfo.current_energy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Battle
}  // namespace Data
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
