// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/PokedexEntry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Data/PokedexEntry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Data {

namespace {

const ::google::protobuf::Descriptor* PokedexEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PokedexEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fData_2fPokedexEntry_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fData_2fPokedexEntry_2eproto() {
  protobuf_AddDesc_POGOProtos_2fData_2fPokedexEntry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Data/PokedexEntry.proto");
  GOOGLE_CHECK(file != NULL);
  PokedexEntry_descriptor_ = file->message_type(0);
  static const int PokedexEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexEntry, pokemon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexEntry, times_encountered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexEntry, times_captured_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexEntry, evolution_stone_pieces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexEntry, evolution_stones_),
  };
  PokedexEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PokedexEntry_descriptor_,
      PokedexEntry::default_instance_,
      PokedexEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(PokedexEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexEntry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexEntry, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fData_2fPokedexEntry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PokedexEntry_descriptor_, &PokedexEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fData_2fPokedexEntry_2eproto() {
  delete PokedexEntry::default_instance_;
  delete PokedexEntry_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fData_2fPokedexEntry_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fData_2fPokedexEntry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonId_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"POGOProtos/Data/PokedexEntry.proto\022\017PO"
    "GOProtos.Data\032 POGOProtos/Enums/PokemonI"
    "d.proto\"\254\001\n\014PokedexEntry\022/\n\npokemon_id\030\001"
    " \001(\0162\033.POGOProtos.Enums.PokemonId\022\031\n\021tim"
    "es_encountered\030\002 \001(\005\022\026\n\016times_captured\030\003"
    " \001(\005\022\036\n\026evolution_stone_pieces\030\004 \001(\005\022\030\n\020"
    "evolution_stones\030\005 \001(\005b\006proto3", 270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Data/PokedexEntry.proto", &protobuf_RegisterTypes);
  PokedexEntry::default_instance_ = new PokedexEntry();
  PokedexEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fData_2fPokedexEntry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fData_2fPokedexEntry_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fData_2fPokedexEntry_2eproto() {
    protobuf_AddDesc_POGOProtos_2fData_2fPokedexEntry_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fData_2fPokedexEntry_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PokedexEntry::kPokemonIdFieldNumber;
const int PokedexEntry::kTimesEncounteredFieldNumber;
const int PokedexEntry::kTimesCapturedFieldNumber;
const int PokedexEntry::kEvolutionStonePiecesFieldNumber;
const int PokedexEntry::kEvolutionStonesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PokedexEntry::PokedexEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Data.PokedexEntry)
}

void PokedexEntry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PokedexEntry::PokedexEntry(const PokedexEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Data.PokedexEntry)
}

void PokedexEntry::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pokemon_id_ = 0;
  times_encountered_ = 0;
  times_captured_ = 0;
  evolution_stone_pieces_ = 0;
  evolution_stones_ = 0;
}

PokedexEntry::~PokedexEntry() {
  // @@protoc_insertion_point(destructor:POGOProtos.Data.PokedexEntry)
  SharedDtor();
}

void PokedexEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PokedexEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PokedexEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokedexEntry_descriptor_;
}

const PokedexEntry& PokedexEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fData_2fPokedexEntry_2eproto();
  return *default_instance_;
}

PokedexEntry* PokedexEntry::default_instance_ = NULL;

PokedexEntry* PokedexEntry::New(::google::protobuf::Arena* arena) const {
  PokedexEntry* n = new PokedexEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PokedexEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Data.PokedexEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PokedexEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PokedexEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pokemon_id_, evolution_stones_);

#undef ZR_HELPER_
#undef ZR_

}

bool PokedexEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Data.PokedexEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Enums.PokemonId pokemon_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pokemon_id(static_cast< ::POGOProtos::Enums::PokemonId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times_encountered;
        break;
      }

      // optional int32 times_encountered = 2;
      case 2: {
        if (tag == 16) {
         parse_times_encountered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_encountered_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_times_captured;
        break;
      }

      // optional int32 times_captured = 3;
      case 3: {
        if (tag == 24) {
         parse_times_captured:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_captured_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_evolution_stone_pieces;
        break;
      }

      // optional int32 evolution_stone_pieces = 4;
      case 4: {
        if (tag == 32) {
         parse_evolution_stone_pieces:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolution_stone_pieces_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_evolution_stones;
        break;
      }

      // optional int32 evolution_stones = 5;
      case 5: {
        if (tag == 40) {
         parse_evolution_stones:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolution_stones_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Data.PokedexEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Data.PokedexEntry)
  return false;
#undef DO_
}

void PokedexEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Data.PokedexEntry)
  // optional .POGOProtos.Enums.PokemonId pokemon_id = 1;
  if (this->pokemon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pokemon_id(), output);
  }

  // optional int32 times_encountered = 2;
  if (this->times_encountered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times_encountered(), output);
  }

  // optional int32 times_captured = 3;
  if (this->times_captured() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times_captured(), output);
  }

  // optional int32 evolution_stone_pieces = 4;
  if (this->evolution_stone_pieces() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->evolution_stone_pieces(), output);
  }

  // optional int32 evolution_stones = 5;
  if (this->evolution_stones() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->evolution_stones(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Data.PokedexEntry)
}

::google::protobuf::uint8* PokedexEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Data.PokedexEntry)
  // optional .POGOProtos.Enums.PokemonId pokemon_id = 1;
  if (this->pokemon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pokemon_id(), target);
  }

  // optional int32 times_encountered = 2;
  if (this->times_encountered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times_encountered(), target);
  }

  // optional int32 times_captured = 3;
  if (this->times_captured() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times_captured(), target);
  }

  // optional int32 evolution_stone_pieces = 4;
  if (this->evolution_stone_pieces() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->evolution_stone_pieces(), target);
  }

  // optional int32 evolution_stones = 5;
  if (this->evolution_stones() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->evolution_stones(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Data.PokedexEntry)
  return target;
}

int PokedexEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Data.PokedexEntry)
  int total_size = 0;

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 1;
  if (this->pokemon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pokemon_id());
  }

  // optional int32 times_encountered = 2;
  if (this->times_encountered() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->times_encountered());
  }

  // optional int32 times_captured = 3;
  if (this->times_captured() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->times_captured());
  }

  // optional int32 evolution_stone_pieces = 4;
  if (this->evolution_stone_pieces() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->evolution_stone_pieces());
  }

  // optional int32 evolution_stones = 5;
  if (this->evolution_stones() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->evolution_stones());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokedexEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Data.PokedexEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PokedexEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PokedexEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Data.PokedexEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Data.PokedexEntry)
    MergeFrom(*source);
  }
}

void PokedexEntry::MergeFrom(const PokedexEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Data.PokedexEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.pokemon_id() != 0) {
    set_pokemon_id(from.pokemon_id());
  }
  if (from.times_encountered() != 0) {
    set_times_encountered(from.times_encountered());
  }
  if (from.times_captured() != 0) {
    set_times_captured(from.times_captured());
  }
  if (from.evolution_stone_pieces() != 0) {
    set_evolution_stone_pieces(from.evolution_stone_pieces());
  }
  if (from.evolution_stones() != 0) {
    set_evolution_stones(from.evolution_stones());
  }
}

void PokedexEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Data.PokedexEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokedexEntry::CopyFrom(const PokedexEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Data.PokedexEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokedexEntry::IsInitialized() const {

  return true;
}

void PokedexEntry::Swap(PokedexEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PokedexEntry::InternalSwap(PokedexEntry* other) {
  std::swap(pokemon_id_, other->pokemon_id_);
  std::swap(times_encountered_, other->times_encountered_);
  std::swap(times_captured_, other->times_captured_);
  std::swap(evolution_stone_pieces_, other->evolution_stone_pieces_);
  std::swap(evolution_stones_, other->evolution_stones_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PokedexEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PokedexEntry_descriptor_;
  metadata.reflection = PokedexEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PokedexEntry

// optional .POGOProtos.Enums.PokemonId pokemon_id = 1;
void PokedexEntry::clear_pokemon_id() {
  pokemon_id_ = 0;
}
 ::POGOProtos::Enums::PokemonId PokedexEntry::pokemon_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokedexEntry.pokemon_id)
  return static_cast< ::POGOProtos::Enums::PokemonId >(pokemon_id_);
}
 void PokedexEntry::set_pokemon_id(::POGOProtos::Enums::PokemonId value) {
  
  pokemon_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokedexEntry.pokemon_id)
}

// optional int32 times_encountered = 2;
void PokedexEntry::clear_times_encountered() {
  times_encountered_ = 0;
}
 ::google::protobuf::int32 PokedexEntry::times_encountered() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokedexEntry.times_encountered)
  return times_encountered_;
}
 void PokedexEntry::set_times_encountered(::google::protobuf::int32 value) {
  
  times_encountered_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokedexEntry.times_encountered)
}

// optional int32 times_captured = 3;
void PokedexEntry::clear_times_captured() {
  times_captured_ = 0;
}
 ::google::protobuf::int32 PokedexEntry::times_captured() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokedexEntry.times_captured)
  return times_captured_;
}
 void PokedexEntry::set_times_captured(::google::protobuf::int32 value) {
  
  times_captured_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokedexEntry.times_captured)
}

// optional int32 evolution_stone_pieces = 4;
void PokedexEntry::clear_evolution_stone_pieces() {
  evolution_stone_pieces_ = 0;
}
 ::google::protobuf::int32 PokedexEntry::evolution_stone_pieces() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokedexEntry.evolution_stone_pieces)
  return evolution_stone_pieces_;
}
 void PokedexEntry::set_evolution_stone_pieces(::google::protobuf::int32 value) {
  
  evolution_stone_pieces_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokedexEntry.evolution_stone_pieces)
}

// optional int32 evolution_stones = 5;
void PokedexEntry::clear_evolution_stones() {
  evolution_stones_ = 0;
}
 ::google::protobuf::int32 PokedexEntry::evolution_stones() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokedexEntry.evolution_stones)
  return evolution_stones_;
}
 void PokedexEntry::set_evolution_stones(::google::protobuf::int32 value) {
  
  evolution_stones_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokedexEntry.evolution_stones)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Data
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
