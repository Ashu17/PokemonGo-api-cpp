// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/PlayerBadge.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Data/PlayerBadge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Data {

namespace {

const ::google::protobuf::Descriptor* PlayerBadge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBadge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fData_2fPlayerBadge_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fData_2fPlayerBadge_2eproto() {
  protobuf_AddDesc_POGOProtos_2fData_2fPlayerBadge_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Data/PlayerBadge.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerBadge_descriptor_ = file->message_type(0);
  static const int PlayerBadge_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBadge, badge_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBadge, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBadge, start_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBadge, end_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBadge, current_value_),
  };
  PlayerBadge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerBadge_descriptor_,
      PlayerBadge::default_instance_,
      PlayerBadge_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerBadge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBadge, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBadge, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fData_2fPlayerBadge_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerBadge_descriptor_, &PlayerBadge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fData_2fPlayerBadge_2eproto() {
  delete PlayerBadge::default_instance_;
  delete PlayerBadge_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fData_2fPlayerBadge_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fData_2fPlayerBadge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fBadgeType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!POGOProtos/Data/PlayerBadge.proto\022\017POG"
    "OProtos.Data\032 POGOProtos/Enums/BadgeType"
    ".proto\"\213\001\n\013PlayerBadge\022/\n\nbadge_type\030\001 \001"
    "(\0162\033.POGOProtos.Enums.BadgeType\022\014\n\004rank\030"
    "\002 \001(\005\022\023\n\013start_value\030\003 \001(\005\022\021\n\tend_value\030"
    "\004 \001(\005\022\025\n\rcurrent_value\030\005 \001(\001b\006proto3", 236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Data/PlayerBadge.proto", &protobuf_RegisterTypes);
  PlayerBadge::default_instance_ = new PlayerBadge();
  PlayerBadge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fData_2fPlayerBadge_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fData_2fPlayerBadge_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fData_2fPlayerBadge_2eproto() {
    protobuf_AddDesc_POGOProtos_2fData_2fPlayerBadge_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fData_2fPlayerBadge_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerBadge::kBadgeTypeFieldNumber;
const int PlayerBadge::kRankFieldNumber;
const int PlayerBadge::kStartValueFieldNumber;
const int PlayerBadge::kEndValueFieldNumber;
const int PlayerBadge::kCurrentValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerBadge::PlayerBadge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Data.PlayerBadge)
}

void PlayerBadge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerBadge::PlayerBadge(const PlayerBadge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Data.PlayerBadge)
}

void PlayerBadge::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  badge_type_ = 0;
  rank_ = 0;
  start_value_ = 0;
  end_value_ = 0;
  current_value_ = 0;
}

PlayerBadge::~PlayerBadge() {
  // @@protoc_insertion_point(destructor:POGOProtos.Data.PlayerBadge)
  SharedDtor();
}

void PlayerBadge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerBadge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBadge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBadge_descriptor_;
}

const PlayerBadge& PlayerBadge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fData_2fPlayerBadge_2eproto();
  return *default_instance_;
}

PlayerBadge* PlayerBadge::default_instance_ = NULL;

PlayerBadge* PlayerBadge::New(::google::protobuf::Arena* arena) const {
  PlayerBadge* n = new PlayerBadge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerBadge::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Data.PlayerBadge)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerBadge, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerBadge*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(badge_type_, current_value_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerBadge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Data.PlayerBadge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Enums.BadgeType badge_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_badge_type(static_cast< ::POGOProtos::Enums::BadgeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_value;
        break;
      }

      // optional int32 start_value = 3;
      case 3: {
        if (tag == 24) {
         parse_start_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_value;
        break;
      }

      // optional int32 end_value = 4;
      case 4: {
        if (tag == 32) {
         parse_end_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_current_value;
        break;
      }

      // optional double current_value = 5;
      case 5: {
        if (tag == 41) {
         parse_current_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Data.PlayerBadge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Data.PlayerBadge)
  return false;
#undef DO_
}

void PlayerBadge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Data.PlayerBadge)
  // optional .POGOProtos.Enums.BadgeType badge_type = 1;
  if (this->badge_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->badge_type(), output);
  }

  // optional int32 rank = 2;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional int32 start_value = 3;
  if (this->start_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_value(), output);
  }

  // optional int32 end_value = 4;
  if (this->end_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_value(), output);
  }

  // optional double current_value = 5;
  if (this->current_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->current_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Data.PlayerBadge)
}

::google::protobuf::uint8* PlayerBadge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Data.PlayerBadge)
  // optional .POGOProtos.Enums.BadgeType badge_type = 1;
  if (this->badge_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->badge_type(), target);
  }

  // optional int32 rank = 2;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional int32 start_value = 3;
  if (this->start_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_value(), target);
  }

  // optional int32 end_value = 4;
  if (this->end_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_value(), target);
  }

  // optional double current_value = 5;
  if (this->current_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->current_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Data.PlayerBadge)
  return target;
}

int PlayerBadge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Data.PlayerBadge)
  int total_size = 0;

  // optional .POGOProtos.Enums.BadgeType badge_type = 1;
  if (this->badge_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->badge_type());
  }

  // optional int32 rank = 2;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  // optional int32 start_value = 3;
  if (this->start_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_value());
  }

  // optional int32 end_value = 4;
  if (this->end_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_value());
  }

  // optional double current_value = 5;
  if (this->current_value() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBadge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Data.PlayerBadge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerBadge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerBadge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Data.PlayerBadge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Data.PlayerBadge)
    MergeFrom(*source);
  }
}

void PlayerBadge::MergeFrom(const PlayerBadge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Data.PlayerBadge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.badge_type() != 0) {
    set_badge_type(from.badge_type());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.start_value() != 0) {
    set_start_value(from.start_value());
  }
  if (from.end_value() != 0) {
    set_end_value(from.end_value());
  }
  if (from.current_value() != 0) {
    set_current_value(from.current_value());
  }
}

void PlayerBadge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Data.PlayerBadge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBadge::CopyFrom(const PlayerBadge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Data.PlayerBadge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBadge::IsInitialized() const {

  return true;
}

void PlayerBadge::Swap(PlayerBadge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerBadge::InternalSwap(PlayerBadge* other) {
  std::swap(badge_type_, other->badge_type_);
  std::swap(rank_, other->rank_);
  std::swap(start_value_, other->start_value_);
  std::swap(end_value_, other->end_value_);
  std::swap(current_value_, other->current_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerBadge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBadge_descriptor_;
  metadata.reflection = PlayerBadge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerBadge

// optional .POGOProtos.Enums.BadgeType badge_type = 1;
void PlayerBadge::clear_badge_type() {
  badge_type_ = 0;
}
 ::POGOProtos::Enums::BadgeType PlayerBadge::badge_type() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerBadge.badge_type)
  return static_cast< ::POGOProtos::Enums::BadgeType >(badge_type_);
}
 void PlayerBadge::set_badge_type(::POGOProtos::Enums::BadgeType value) {
  
  badge_type_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerBadge.badge_type)
}

// optional int32 rank = 2;
void PlayerBadge::clear_rank() {
  rank_ = 0;
}
 ::google::protobuf::int32 PlayerBadge::rank() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerBadge.rank)
  return rank_;
}
 void PlayerBadge::set_rank(::google::protobuf::int32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerBadge.rank)
}

// optional int32 start_value = 3;
void PlayerBadge::clear_start_value() {
  start_value_ = 0;
}
 ::google::protobuf::int32 PlayerBadge::start_value() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerBadge.start_value)
  return start_value_;
}
 void PlayerBadge::set_start_value(::google::protobuf::int32 value) {
  
  start_value_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerBadge.start_value)
}

// optional int32 end_value = 4;
void PlayerBadge::clear_end_value() {
  end_value_ = 0;
}
 ::google::protobuf::int32 PlayerBadge::end_value() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerBadge.end_value)
  return end_value_;
}
 void PlayerBadge::set_end_value(::google::protobuf::int32 value) {
  
  end_value_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerBadge.end_value)
}

// optional double current_value = 5;
void PlayerBadge::clear_current_value() {
  current_value_ = 0;
}
 double PlayerBadge::current_value() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerBadge.current_value)
  return current_value_;
}
 void PlayerBadge::set_current_value(double value) {
  
  current_value_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerBadge.current_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Data
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
