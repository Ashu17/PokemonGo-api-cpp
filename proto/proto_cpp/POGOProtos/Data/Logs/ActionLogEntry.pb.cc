// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/Logs/ActionLogEntry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Data/Logs/ActionLogEntry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Data {
namespace Logs {

namespace {

const ::google::protobuf::Descriptor* ActionLogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionLogEntry_reflection_ = NULL;
struct ActionLogEntryOneofInstance {
  const ::POGOProtos::Data::Logs::CatchPokemonLogEntry* catch_pokemon_;
  const ::POGOProtos::Data::Logs::FortSearchLogEntry* fort_search_;
}* ActionLogEntry_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto() {
  protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Data/Logs/ActionLogEntry.proto");
  GOOGLE_CHECK(file != NULL);
  ActionLogEntry_descriptor_ = file->message_type(0);
  static const int ActionLogEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLogEntry, timestamp_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLogEntry, sfida_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionLogEntry_default_oneof_instance_, catch_pokemon_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionLogEntry_default_oneof_instance_, fort_search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLogEntry, Action_),
  };
  ActionLogEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionLogEntry_descriptor_,
      ActionLogEntry::default_instance_,
      ActionLogEntry_offsets_,
      -1,
      -1,
      -1,
      ActionLogEntry_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLogEntry, _oneof_case_[0]),
      sizeof(ActionLogEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLogEntry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionLogEntry, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionLogEntry_descriptor_, &ActionLogEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto() {
  delete ActionLogEntry::default_instance_;
  delete ActionLogEntry_default_oneof_instance_;
  delete ActionLogEntry_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Data::Logs::protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto();
  ::POGOProtos::Data::Logs::protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fFortSearchLogEntry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)POGOProtos/Data/Logs/ActionLogEntry.pr"
    "oto\022\024POGOProtos.Data.Logs\032/POGOProtos/Da"
    "ta/Logs/CatchPokemonLogEntry.proto\032-POGO"
    "Protos/Data/Logs/FortSearchLogEntry.prot"
    "o\"\305\001\n\016ActionLogEntry\022\024\n\014timestamp_ms\030\001 \001"
    "(\003\022\r\n\005sfida\030\002 \001(\010\022C\n\rcatch_pokemon\030\003 \001(\013"
    "2*.POGOProtos.Data.Logs.CatchPokemonLogE"
    "ntryH\000\022\?\n\013fort_search\030\004 \001(\0132(.POGOProtos"
    ".Data.Logs.FortSearchLogEntryH\000B\010\n\006Actio"
    "nb\006proto3", 369);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Data/Logs/ActionLogEntry.proto", &protobuf_RegisterTypes);
  ActionLogEntry::default_instance_ = new ActionLogEntry();
  ActionLogEntry_default_oneof_instance_ = new ActionLogEntryOneofInstance();
  ActionLogEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto() {
    protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionLogEntry::kTimestampMsFieldNumber;
const int ActionLogEntry::kSfidaFieldNumber;
const int ActionLogEntry::kCatchPokemonFieldNumber;
const int ActionLogEntry::kFortSearchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionLogEntry::ActionLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Data.Logs.ActionLogEntry)
}

void ActionLogEntry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ActionLogEntry_default_oneof_instance_->catch_pokemon_ = const_cast< ::POGOProtos::Data::Logs::CatchPokemonLogEntry*>(&::POGOProtos::Data::Logs::CatchPokemonLogEntry::default_instance());
  ActionLogEntry_default_oneof_instance_->fort_search_ = const_cast< ::POGOProtos::Data::Logs::FortSearchLogEntry*>(&::POGOProtos::Data::Logs::FortSearchLogEntry::default_instance());
}

ActionLogEntry::ActionLogEntry(const ActionLogEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Data.Logs.ActionLogEntry)
}

void ActionLogEntry::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  sfida_ = false;
  clear_has_Action();
}

ActionLogEntry::~ActionLogEntry() {
  // @@protoc_insertion_point(destructor:POGOProtos.Data.Logs.ActionLogEntry)
  SharedDtor();
}

void ActionLogEntry::SharedDtor() {
  if (has_Action()) {
    clear_Action();
  }
  if (this != default_instance_) {
  }
}

void ActionLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionLogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionLogEntry_descriptor_;
}

const ActionLogEntry& ActionLogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fActionLogEntry_2eproto();
  return *default_instance_;
}

ActionLogEntry* ActionLogEntry::default_instance_ = NULL;

ActionLogEntry* ActionLogEntry::New(::google::protobuf::Arena* arena) const {
  ActionLogEntry* n = new ActionLogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionLogEntry::clear_Action() {
// @@protoc_insertion_point(one_of_clear_start:POGOProtos.Data.Logs.ActionLogEntry)
  switch(Action_case()) {
    case kCatchPokemon: {
      delete Action_.catch_pokemon_;
      break;
    }
    case kFortSearch: {
      delete Action_.fort_search_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ActionLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Data.Logs.ActionLogEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ActionLogEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActionLogEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_ms_, sfida_);

#undef ZR_HELPER_
#undef ZR_

  clear_Action();
}

bool ActionLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Data.Logs.ActionLogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sfida;
        break;
      }

      // optional bool sfida = 2;
      case 2: {
        if (tag == 16) {
         parse_sfida:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sfida_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_catch_pokemon;
        break;
      }

      // optional .POGOProtos.Data.Logs.CatchPokemonLogEntry catch_pokemon = 3;
      case 3: {
        if (tag == 26) {
         parse_catch_pokemon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_catch_pokemon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fort_search;
        break;
      }

      // optional .POGOProtos.Data.Logs.FortSearchLogEntry fort_search = 4;
      case 4: {
        if (tag == 34) {
         parse_fort_search:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fort_search()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Data.Logs.ActionLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Data.Logs.ActionLogEntry)
  return false;
#undef DO_
}

void ActionLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Data.Logs.ActionLogEntry)
  // optional int64 timestamp_ms = 1;
  if (this->timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool sfida = 2;
  if (this->sfida() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sfida(), output);
  }

  // optional .POGOProtos.Data.Logs.CatchPokemonLogEntry catch_pokemon = 3;
  if (has_catch_pokemon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *Action_.catch_pokemon_, output);
  }

  // optional .POGOProtos.Data.Logs.FortSearchLogEntry fort_search = 4;
  if (has_fort_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *Action_.fort_search_, output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Data.Logs.ActionLogEntry)
}

::google::protobuf::uint8* ActionLogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Data.Logs.ActionLogEntry)
  // optional int64 timestamp_ms = 1;
  if (this->timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp_ms(), target);
  }

  // optional bool sfida = 2;
  if (this->sfida() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sfida(), target);
  }

  // optional .POGOProtos.Data.Logs.CatchPokemonLogEntry catch_pokemon = 3;
  if (has_catch_pokemon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *Action_.catch_pokemon_, false, target);
  }

  // optional .POGOProtos.Data.Logs.FortSearchLogEntry fort_search = 4;
  if (has_fort_search()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *Action_.fort_search_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Data.Logs.ActionLogEntry)
  return target;
}

int ActionLogEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Data.Logs.ActionLogEntry)
  int total_size = 0;

  // optional int64 timestamp_ms = 1;
  if (this->timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_ms());
  }

  // optional bool sfida = 2;
  if (this->sfida() != 0) {
    total_size += 1 + 1;
  }

  switch (Action_case()) {
    // optional .POGOProtos.Data.Logs.CatchPokemonLogEntry catch_pokemon = 3;
    case kCatchPokemon: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Action_.catch_pokemon_);
      break;
    }
    // optional .POGOProtos.Data.Logs.FortSearchLogEntry fort_search = 4;
    case kFortSearch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Action_.fort_search_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Data.Logs.ActionLogEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionLogEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionLogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Data.Logs.ActionLogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Data.Logs.ActionLogEntry)
    MergeFrom(*source);
  }
}

void ActionLogEntry::MergeFrom(const ActionLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Data.Logs.ActionLogEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.Action_case()) {
    case kCatchPokemon: {
      mutable_catch_pokemon()->::POGOProtos::Data::Logs::CatchPokemonLogEntry::MergeFrom(from.catch_pokemon());
      break;
    }
    case kFortSearch: {
      mutable_fort_search()->::POGOProtos::Data::Logs::FortSearchLogEntry::MergeFrom(from.fort_search());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (from.timestamp_ms() != 0) {
    set_timestamp_ms(from.timestamp_ms());
  }
  if (from.sfida() != 0) {
    set_sfida(from.sfida());
  }
}

void ActionLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Data.Logs.ActionLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionLogEntry::CopyFrom(const ActionLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Data.Logs.ActionLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionLogEntry::IsInitialized() const {

  return true;
}

void ActionLogEntry::Swap(ActionLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionLogEntry::InternalSwap(ActionLogEntry* other) {
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(sfida_, other->sfida_);
  std::swap(Action_, other->Action_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionLogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionLogEntry_descriptor_;
  metadata.reflection = ActionLogEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionLogEntry

// optional int64 timestamp_ms = 1;
void ActionLogEntry::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ActionLogEntry::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Logs.ActionLogEntry.timestamp_ms)
  return timestamp_ms_;
}
 void ActionLogEntry::set_timestamp_ms(::google::protobuf::int64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.Logs.ActionLogEntry.timestamp_ms)
}

// optional bool sfida = 2;
void ActionLogEntry::clear_sfida() {
  sfida_ = false;
}
 bool ActionLogEntry::sfida() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Logs.ActionLogEntry.sfida)
  return sfida_;
}
 void ActionLogEntry::set_sfida(bool value) {
  
  sfida_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.Logs.ActionLogEntry.sfida)
}

// optional .POGOProtos.Data.Logs.CatchPokemonLogEntry catch_pokemon = 3;
bool ActionLogEntry::has_catch_pokemon() const {
  return Action_case() == kCatchPokemon;
}
void ActionLogEntry::set_has_catch_pokemon() {
  _oneof_case_[0] = kCatchPokemon;
}
void ActionLogEntry::clear_catch_pokemon() {
  if (has_catch_pokemon()) {
    delete Action_.catch_pokemon_;
    clear_has_Action();
  }
}
 const ::POGOProtos::Data::Logs::CatchPokemonLogEntry& ActionLogEntry::catch_pokemon() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Logs.ActionLogEntry.catch_pokemon)
  return has_catch_pokemon()
      ? *Action_.catch_pokemon_
      : ::POGOProtos::Data::Logs::CatchPokemonLogEntry::default_instance();
}
::POGOProtos::Data::Logs::CatchPokemonLogEntry* ActionLogEntry::mutable_catch_pokemon() {
  if (!has_catch_pokemon()) {
    clear_Action();
    set_has_catch_pokemon();
    Action_.catch_pokemon_ = new ::POGOProtos::Data::Logs::CatchPokemonLogEntry;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.Logs.ActionLogEntry.catch_pokemon)
  return Action_.catch_pokemon_;
}
::POGOProtos::Data::Logs::CatchPokemonLogEntry* ActionLogEntry::release_catch_pokemon() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.Logs.ActionLogEntry.catch_pokemon)
  if (has_catch_pokemon()) {
    clear_has_Action();
    ::POGOProtos::Data::Logs::CatchPokemonLogEntry* temp = Action_.catch_pokemon_;
    Action_.catch_pokemon_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionLogEntry::set_allocated_catch_pokemon(::POGOProtos::Data::Logs::CatchPokemonLogEntry* catch_pokemon) {
  clear_Action();
  if (catch_pokemon) {
    set_has_catch_pokemon();
    Action_.catch_pokemon_ = catch_pokemon;
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.Logs.ActionLogEntry.catch_pokemon)
}

// optional .POGOProtos.Data.Logs.FortSearchLogEntry fort_search = 4;
bool ActionLogEntry::has_fort_search() const {
  return Action_case() == kFortSearch;
}
void ActionLogEntry::set_has_fort_search() {
  _oneof_case_[0] = kFortSearch;
}
void ActionLogEntry::clear_fort_search() {
  if (has_fort_search()) {
    delete Action_.fort_search_;
    clear_has_Action();
  }
}
 const ::POGOProtos::Data::Logs::FortSearchLogEntry& ActionLogEntry::fort_search() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Logs.ActionLogEntry.fort_search)
  return has_fort_search()
      ? *Action_.fort_search_
      : ::POGOProtos::Data::Logs::FortSearchLogEntry::default_instance();
}
::POGOProtos::Data::Logs::FortSearchLogEntry* ActionLogEntry::mutable_fort_search() {
  if (!has_fort_search()) {
    clear_Action();
    set_has_fort_search();
    Action_.fort_search_ = new ::POGOProtos::Data::Logs::FortSearchLogEntry;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.Logs.ActionLogEntry.fort_search)
  return Action_.fort_search_;
}
::POGOProtos::Data::Logs::FortSearchLogEntry* ActionLogEntry::release_fort_search() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.Logs.ActionLogEntry.fort_search)
  if (has_fort_search()) {
    clear_has_Action();
    ::POGOProtos::Data::Logs::FortSearchLogEntry* temp = Action_.fort_search_;
    Action_.fort_search_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionLogEntry::set_allocated_fort_search(::POGOProtos::Data::Logs::FortSearchLogEntry* fort_search) {
  clear_Action();
  if (fort_search) {
    set_has_fort_search();
    Action_.fort_search_ = fort_search;
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.Logs.ActionLogEntry.fort_search)
}

bool ActionLogEntry::has_Action() const {
  return Action_case() != ACTION_NOT_SET;
}
void ActionLogEntry::clear_has_Action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
ActionLogEntry::ActionCase ActionLogEntry::Action_case() const {
  return ActionLogEntry::ActionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Logs
}  // namespace Data
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
