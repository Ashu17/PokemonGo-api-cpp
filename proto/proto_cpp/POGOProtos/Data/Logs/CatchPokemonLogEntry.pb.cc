// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/Logs/CatchPokemonLogEntry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Data/Logs/CatchPokemonLogEntry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Data {
namespace Logs {

namespace {

const ::google::protobuf::Descriptor* CatchPokemonLogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatchPokemonLogEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CatchPokemonLogEntry_Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto() {
  protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Data/Logs/CatchPokemonLogEntry.proto");
  GOOGLE_CHECK(file != NULL);
  CatchPokemonLogEntry_descriptor_ = file->message_type(0);
  static const int CatchPokemonLogEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonLogEntry, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonLogEntry, pokemon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonLogEntry, combat_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonLogEntry, pokemon_data_id_),
  };
  CatchPokemonLogEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CatchPokemonLogEntry_descriptor_,
      CatchPokemonLogEntry::default_instance_,
      CatchPokemonLogEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(CatchPokemonLogEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonLogEntry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonLogEntry, _is_default_instance_));
  CatchPokemonLogEntry_Result_descriptor_ = CatchPokemonLogEntry_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CatchPokemonLogEntry_descriptor_, &CatchPokemonLogEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto() {
  delete CatchPokemonLogEntry::default_instance_;
  delete CatchPokemonLogEntry_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonId_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n/POGOProtos/Data/Logs/CatchPokemonLogEn"
    "try.proto\022\024POGOProtos.Data.Logs\032 POGOPro"
    "tos/Enums/PokemonId.proto\"\214\002\n\024CatchPokem"
    "onLogEntry\022A\n\006result\030\001 \001(\01621.POGOProtos."
    "Data.Logs.CatchPokemonLogEntry.Result\022/\n"
    "\npokemon_id\030\002 \001(\0162\033.POGOProtos.Enums.Pok"
    "emonId\022\025\n\rcombat_points\030\003 \001(\005\022\027\n\017pokemon"
    "_data_id\030\004 \001(\006\"P\n\006Result\022\t\n\005UNSET\020\000\022\024\n\020P"
    "OKEMON_CAPTURED\020\001\022\020\n\014POKEMON_FLED\020\002\022\023\n\017P"
    "OKEMON_HATCHED\020\003b\006proto3", 384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Data/Logs/CatchPokemonLogEntry.proto", &protobuf_RegisterTypes);
  CatchPokemonLogEntry::default_instance_ = new CatchPokemonLogEntry();
  CatchPokemonLogEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto() {
    protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CatchPokemonLogEntry_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchPokemonLogEntry_Result_descriptor_;
}
bool CatchPokemonLogEntry_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CatchPokemonLogEntry_Result CatchPokemonLogEntry::UNSET;
const CatchPokemonLogEntry_Result CatchPokemonLogEntry::POKEMON_CAPTURED;
const CatchPokemonLogEntry_Result CatchPokemonLogEntry::POKEMON_FLED;
const CatchPokemonLogEntry_Result CatchPokemonLogEntry::POKEMON_HATCHED;
const CatchPokemonLogEntry_Result CatchPokemonLogEntry::Result_MIN;
const CatchPokemonLogEntry_Result CatchPokemonLogEntry::Result_MAX;
const int CatchPokemonLogEntry::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatchPokemonLogEntry::kResultFieldNumber;
const int CatchPokemonLogEntry::kPokemonIdFieldNumber;
const int CatchPokemonLogEntry::kCombatPointsFieldNumber;
const int CatchPokemonLogEntry::kPokemonDataIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatchPokemonLogEntry::CatchPokemonLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Data.Logs.CatchPokemonLogEntry)
}

void CatchPokemonLogEntry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CatchPokemonLogEntry::CatchPokemonLogEntry(const CatchPokemonLogEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Data.Logs.CatchPokemonLogEntry)
}

void CatchPokemonLogEntry::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
  pokemon_id_ = 0;
  combat_points_ = 0;
  pokemon_data_id_ = GOOGLE_ULONGLONG(0);
}

CatchPokemonLogEntry::~CatchPokemonLogEntry() {
  // @@protoc_insertion_point(destructor:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  SharedDtor();
}

void CatchPokemonLogEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CatchPokemonLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatchPokemonLogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchPokemonLogEntry_descriptor_;
}

const CatchPokemonLogEntry& CatchPokemonLogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fData_2fLogs_2fCatchPokemonLogEntry_2eproto();
  return *default_instance_;
}

CatchPokemonLogEntry* CatchPokemonLogEntry::default_instance_ = NULL;

CatchPokemonLogEntry* CatchPokemonLogEntry::New(::google::protobuf::Arena* arena) const {
  CatchPokemonLogEntry* n = new CatchPokemonLogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CatchPokemonLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Data.Logs.CatchPokemonLogEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CatchPokemonLogEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CatchPokemonLogEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, combat_points_);

#undef ZR_HELPER_
#undef ZR_

}

bool CatchPokemonLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Data.Logs.CatchPokemonLogEntry.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::POGOProtos::Data::Logs::CatchPokemonLogEntry_Result >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pokemon_id;
        break;
      }

      // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
      case 2: {
        if (tag == 16) {
         parse_pokemon_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pokemon_id(static_cast< ::POGOProtos::Enums::PokemonId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_combat_points;
        break;
      }

      // optional int32 combat_points = 3;
      case 3: {
        if (tag == 24) {
         parse_combat_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_points_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_pokemon_data_id;
        break;
      }

      // optional fixed64 pokemon_data_id = 4;
      case 4: {
        if (tag == 33) {
         parse_pokemon_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &pokemon_data_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  return false;
#undef DO_
}

void CatchPokemonLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  // optional .POGOProtos.Data.Logs.CatchPokemonLogEntry.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
  if (this->pokemon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pokemon_id(), output);
  }

  // optional int32 combat_points = 3;
  if (this->combat_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->combat_points(), output);
  }

  // optional fixed64 pokemon_data_id = 4;
  if (this->pokemon_data_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->pokemon_data_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Data.Logs.CatchPokemonLogEntry)
}

::google::protobuf::uint8* CatchPokemonLogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  // optional .POGOProtos.Data.Logs.CatchPokemonLogEntry.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
  if (this->pokemon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pokemon_id(), target);
  }

  // optional int32 combat_points = 3;
  if (this->combat_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->combat_points(), target);
  }

  // optional fixed64 pokemon_data_id = 4;
  if (this->pokemon_data_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->pokemon_data_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  return target;
}

int CatchPokemonLogEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  int total_size = 0;

  // optional .POGOProtos.Data.Logs.CatchPokemonLogEntry.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
  if (this->pokemon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pokemon_id());
  }

  // optional int32 combat_points = 3;
  if (this->combat_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combat_points());
  }

  // optional fixed64 pokemon_data_id = 4;
  if (this->pokemon_data_id() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatchPokemonLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CatchPokemonLogEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CatchPokemonLogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Data.Logs.CatchPokemonLogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Data.Logs.CatchPokemonLogEntry)
    MergeFrom(*source);
  }
}

void CatchPokemonLogEntry::MergeFrom(const CatchPokemonLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.pokemon_id() != 0) {
    set_pokemon_id(from.pokemon_id());
  }
  if (from.combat_points() != 0) {
    set_combat_points(from.combat_points());
  }
  if (from.pokemon_data_id() != 0) {
    set_pokemon_data_id(from.pokemon_data_id());
  }
}

void CatchPokemonLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatchPokemonLogEntry::CopyFrom(const CatchPokemonLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Data.Logs.CatchPokemonLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatchPokemonLogEntry::IsInitialized() const {

  return true;
}

void CatchPokemonLogEntry::Swap(CatchPokemonLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatchPokemonLogEntry::InternalSwap(CatchPokemonLogEntry* other) {
  std::swap(result_, other->result_);
  std::swap(pokemon_id_, other->pokemon_id_);
  std::swap(combat_points_, other->combat_points_);
  std::swap(pokemon_data_id_, other->pokemon_data_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CatchPokemonLogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatchPokemonLogEntry_descriptor_;
  metadata.reflection = CatchPokemonLogEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CatchPokemonLogEntry

// optional .POGOProtos.Data.Logs.CatchPokemonLogEntry.Result result = 1;
void CatchPokemonLogEntry::clear_result() {
  result_ = 0;
}
 ::POGOProtos::Data::Logs::CatchPokemonLogEntry_Result CatchPokemonLogEntry::result() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Logs.CatchPokemonLogEntry.result)
  return static_cast< ::POGOProtos::Data::Logs::CatchPokemonLogEntry_Result >(result_);
}
 void CatchPokemonLogEntry::set_result(::POGOProtos::Data::Logs::CatchPokemonLogEntry_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.Logs.CatchPokemonLogEntry.result)
}

// optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
void CatchPokemonLogEntry::clear_pokemon_id() {
  pokemon_id_ = 0;
}
 ::POGOProtos::Enums::PokemonId CatchPokemonLogEntry::pokemon_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Logs.CatchPokemonLogEntry.pokemon_id)
  return static_cast< ::POGOProtos::Enums::PokemonId >(pokemon_id_);
}
 void CatchPokemonLogEntry::set_pokemon_id(::POGOProtos::Enums::PokemonId value) {
  
  pokemon_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.Logs.CatchPokemonLogEntry.pokemon_id)
}

// optional int32 combat_points = 3;
void CatchPokemonLogEntry::clear_combat_points() {
  combat_points_ = 0;
}
 ::google::protobuf::int32 CatchPokemonLogEntry::combat_points() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Logs.CatchPokemonLogEntry.combat_points)
  return combat_points_;
}
 void CatchPokemonLogEntry::set_combat_points(::google::protobuf::int32 value) {
  
  combat_points_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.Logs.CatchPokemonLogEntry.combat_points)
}

// optional fixed64 pokemon_data_id = 4;
void CatchPokemonLogEntry::clear_pokemon_data_id() {
  pokemon_data_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CatchPokemonLogEntry::pokemon_data_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Logs.CatchPokemonLogEntry.pokemon_data_id)
  return pokemon_data_id_;
}
 void CatchPokemonLogEntry::set_pokemon_data_id(::google::protobuf::uint64 value) {
  
  pokemon_data_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.Logs.CatchPokemonLogEntry.pokemon_data_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Logs
}  // namespace Data
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
