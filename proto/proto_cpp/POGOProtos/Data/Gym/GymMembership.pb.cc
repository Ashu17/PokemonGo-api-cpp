// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/Gym/GymMembership.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Data/Gym/GymMembership.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Data {
namespace Gym {

namespace {

const ::google::protobuf::Descriptor* GymMembership_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GymMembership_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fData_2fGym_2fGymMembership_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fData_2fGym_2fGymMembership_2eproto() {
  protobuf_AddDesc_POGOProtos_2fData_2fGym_2fGymMembership_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Data/Gym/GymMembership.proto");
  GOOGLE_CHECK(file != NULL);
  GymMembership_descriptor_ = file->message_type(0);
  static const int GymMembership_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymMembership, pokemon_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymMembership, trainer_public_profile_),
  };
  GymMembership_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GymMembership_descriptor_,
      GymMembership::default_instance_,
      GymMembership_offsets_,
      -1,
      -1,
      -1,
      sizeof(GymMembership),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymMembership, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymMembership, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fData_2fGym_2fGymMembership_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GymMembership_descriptor_, &GymMembership::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fData_2fGym_2fGymMembership_2eproto() {
  delete GymMembership::default_instance_;
  delete GymMembership_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fData_2fGym_2fGymMembership_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fData_2fGym_2fGymMembership_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Data::protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  ::POGOProtos::Data::Player::protobuf_AddDesc_POGOProtos_2fData_2fPlayer_2fPlayerPublicProfile_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'POGOProtos/Data/Gym/GymMembership.prot"
    "o\022\023POGOProtos.Data.Gym\032!POGOProtos/Data/"
    "PokemonData.proto\0320POGOProtos/Data/Playe"
    "r/PlayerPublicProfile.proto\"\220\001\n\rGymMembe"
    "rship\0222\n\014pokemon_data\030\001 \001(\0132\034.POGOProtos"
    ".Data.PokemonData\022K\n\026trainer_public_prof"
    "ile\030\002 \001(\0132+.POGOProtos.Data.Player.Playe"
    "rPublicProfileb\006proto3", 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Data/Gym/GymMembership.proto", &protobuf_RegisterTypes);
  GymMembership::default_instance_ = new GymMembership();
  GymMembership::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fData_2fGym_2fGymMembership_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fData_2fGym_2fGymMembership_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fData_2fGym_2fGymMembership_2eproto() {
    protobuf_AddDesc_POGOProtos_2fData_2fGym_2fGymMembership_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fData_2fGym_2fGymMembership_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GymMembership::kPokemonDataFieldNumber;
const int GymMembership::kTrainerPublicProfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GymMembership::GymMembership()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Data.Gym.GymMembership)
}

void GymMembership::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pokemon_data_ = const_cast< ::POGOProtos::Data::PokemonData*>(&::POGOProtos::Data::PokemonData::default_instance());
  trainer_public_profile_ = const_cast< ::POGOProtos::Data::Player::PlayerPublicProfile*>(&::POGOProtos::Data::Player::PlayerPublicProfile::default_instance());
}

GymMembership::GymMembership(const GymMembership& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Data.Gym.GymMembership)
}

void GymMembership::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pokemon_data_ = NULL;
  trainer_public_profile_ = NULL;
}

GymMembership::~GymMembership() {
  // @@protoc_insertion_point(destructor:POGOProtos.Data.Gym.GymMembership)
  SharedDtor();
}

void GymMembership::SharedDtor() {
  if (this != default_instance_) {
    delete pokemon_data_;
    delete trainer_public_profile_;
  }
}

void GymMembership::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GymMembership::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GymMembership_descriptor_;
}

const GymMembership& GymMembership::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fData_2fGym_2fGymMembership_2eproto();
  return *default_instance_;
}

GymMembership* GymMembership::default_instance_ = NULL;

GymMembership* GymMembership::New(::google::protobuf::Arena* arena) const {
  GymMembership* n = new GymMembership;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GymMembership::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Data.Gym.GymMembership)
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && trainer_public_profile_ != NULL) delete trainer_public_profile_;
  trainer_public_profile_ = NULL;
}

bool GymMembership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Data.Gym.GymMembership)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pokemon_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trainer_public_profile;
        break;
      }

      // optional .POGOProtos.Data.Player.PlayerPublicProfile trainer_public_profile = 2;
      case 2: {
        if (tag == 18) {
         parse_trainer_public_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trainer_public_profile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Data.Gym.GymMembership)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Data.Gym.GymMembership)
  return false;
#undef DO_
}

void GymMembership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Data.Gym.GymMembership)
  // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
  if (this->has_pokemon_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pokemon_data_, output);
  }

  // optional .POGOProtos.Data.Player.PlayerPublicProfile trainer_public_profile = 2;
  if (this->has_trainer_public_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->trainer_public_profile_, output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Data.Gym.GymMembership)
}

::google::protobuf::uint8* GymMembership::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Data.Gym.GymMembership)
  // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
  if (this->has_pokemon_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pokemon_data_, false, target);
  }

  // optional .POGOProtos.Data.Player.PlayerPublicProfile trainer_public_profile = 2;
  if (this->has_trainer_public_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->trainer_public_profile_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Data.Gym.GymMembership)
  return target;
}

int GymMembership::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Data.Gym.GymMembership)
  int total_size = 0;

  // optional .POGOProtos.Data.PokemonData pokemon_data = 1;
  if (this->has_pokemon_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pokemon_data_);
  }

  // optional .POGOProtos.Data.Player.PlayerPublicProfile trainer_public_profile = 2;
  if (this->has_trainer_public_profile()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trainer_public_profile_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GymMembership::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Data.Gym.GymMembership)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GymMembership* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GymMembership>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Data.Gym.GymMembership)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Data.Gym.GymMembership)
    MergeFrom(*source);
  }
}

void GymMembership::MergeFrom(const GymMembership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Data.Gym.GymMembership)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_pokemon_data()) {
    mutable_pokemon_data()->::POGOProtos::Data::PokemonData::MergeFrom(from.pokemon_data());
  }
  if (from.has_trainer_public_profile()) {
    mutable_trainer_public_profile()->::POGOProtos::Data::Player::PlayerPublicProfile::MergeFrom(from.trainer_public_profile());
  }
}

void GymMembership::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Data.Gym.GymMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GymMembership::CopyFrom(const GymMembership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Data.Gym.GymMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GymMembership::IsInitialized() const {

  return true;
}

void GymMembership::Swap(GymMembership* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GymMembership::InternalSwap(GymMembership* other) {
  std::swap(pokemon_data_, other->pokemon_data_);
  std::swap(trainer_public_profile_, other->trainer_public_profile_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GymMembership::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GymMembership_descriptor_;
  metadata.reflection = GymMembership_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GymMembership

// optional .POGOProtos.Data.PokemonData pokemon_data = 1;
bool GymMembership::has_pokemon_data() const {
  return !_is_default_instance_ && pokemon_data_ != NULL;
}
void GymMembership::clear_pokemon_data() {
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
}
const ::POGOProtos::Data::PokemonData& GymMembership::pokemon_data() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Gym.GymMembership.pokemon_data)
  return pokemon_data_ != NULL ? *pokemon_data_ : *default_instance_->pokemon_data_;
}
::POGOProtos::Data::PokemonData* GymMembership::mutable_pokemon_data() {
  
  if (pokemon_data_ == NULL) {
    pokemon_data_ = new ::POGOProtos::Data::PokemonData;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.Gym.GymMembership.pokemon_data)
  return pokemon_data_;
}
::POGOProtos::Data::PokemonData* GymMembership::release_pokemon_data() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.Gym.GymMembership.pokemon_data)
  
  ::POGOProtos::Data::PokemonData* temp = pokemon_data_;
  pokemon_data_ = NULL;
  return temp;
}
void GymMembership::set_allocated_pokemon_data(::POGOProtos::Data::PokemonData* pokemon_data) {
  delete pokemon_data_;
  pokemon_data_ = pokemon_data;
  if (pokemon_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.Gym.GymMembership.pokemon_data)
}

// optional .POGOProtos.Data.Player.PlayerPublicProfile trainer_public_profile = 2;
bool GymMembership::has_trainer_public_profile() const {
  return !_is_default_instance_ && trainer_public_profile_ != NULL;
}
void GymMembership::clear_trainer_public_profile() {
  if (GetArenaNoVirtual() == NULL && trainer_public_profile_ != NULL) delete trainer_public_profile_;
  trainer_public_profile_ = NULL;
}
const ::POGOProtos::Data::Player::PlayerPublicProfile& GymMembership::trainer_public_profile() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.Gym.GymMembership.trainer_public_profile)
  return trainer_public_profile_ != NULL ? *trainer_public_profile_ : *default_instance_->trainer_public_profile_;
}
::POGOProtos::Data::Player::PlayerPublicProfile* GymMembership::mutable_trainer_public_profile() {
  
  if (trainer_public_profile_ == NULL) {
    trainer_public_profile_ = new ::POGOProtos::Data::Player::PlayerPublicProfile;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.Gym.GymMembership.trainer_public_profile)
  return trainer_public_profile_;
}
::POGOProtos::Data::Player::PlayerPublicProfile* GymMembership::release_trainer_public_profile() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.Gym.GymMembership.trainer_public_profile)
  
  ::POGOProtos::Data::Player::PlayerPublicProfile* temp = trainer_public_profile_;
  trainer_public_profile_ = NULL;
  return temp;
}
void GymMembership::set_allocated_trainer_public_profile(::POGOProtos::Data::Player::PlayerPublicProfile* trainer_public_profile) {
  delete trainer_public_profile_;
  trainer_public_profile_ = trainer_public_profile;
  if (trainer_public_profile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.Gym.GymMembership.trainer_public_profile)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Gym
}  // namespace Data
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
