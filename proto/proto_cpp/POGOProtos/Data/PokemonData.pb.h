// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/PokemonData.proto

#ifndef PROTOBUF_POGOProtos_2fData_2fPokemonData_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fData_2fPokemonData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "POGOProtos/Enums/PokemonId.pb.h"
#include "POGOProtos/Enums/PokemonMove.pb.h"
#include "POGOProtos/Inventory/Item/ItemId.pb.h"
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Data {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
void protobuf_AssignDesc_POGOProtos_2fData_2fPokemonData_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fData_2fPokemonData_2eproto();

class PokemonData;

// ===================================================================

class PokemonData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Data.PokemonData) */ {
 public:
  PokemonData();
  virtual ~PokemonData();

  PokemonData(const PokemonData& from);

  inline PokemonData& operator=(const PokemonData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PokemonData& default_instance();

  void Swap(PokemonData* other);

  // implements Message ----------------------------------------------

  inline PokemonData* New() const { return New(NULL); }

  PokemonData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PokemonData& from);
  void MergeFrom(const PokemonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PokemonData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
  void clear_pokemon_id();
  static const int kPokemonIdFieldNumber = 2;
  ::POGOProtos::Enums::PokemonId pokemon_id() const;
  void set_pokemon_id(::POGOProtos::Enums::PokemonId value);

  // optional int32 cp = 3;
  void clear_cp();
  static const int kCpFieldNumber = 3;
  ::google::protobuf::int32 cp() const;
  void set_cp(::google::protobuf::int32 value);

  // optional int32 stamina = 4;
  void clear_stamina();
  static const int kStaminaFieldNumber = 4;
  ::google::protobuf::int32 stamina() const;
  void set_stamina(::google::protobuf::int32 value);

  // optional int32 stamina_max = 5;
  void clear_stamina_max();
  static const int kStaminaMaxFieldNumber = 5;
  ::google::protobuf::int32 stamina_max() const;
  void set_stamina_max(::google::protobuf::int32 value);

  // optional .POGOProtos.Enums.PokemonMove move_1 = 6;
  void clear_move_1();
  static const int kMove1FieldNumber = 6;
  ::POGOProtos::Enums::PokemonMove move_1() const;
  void set_move_1(::POGOProtos::Enums::PokemonMove value);

  // optional .POGOProtos.Enums.PokemonMove move_2 = 7;
  void clear_move_2();
  static const int kMove2FieldNumber = 7;
  ::POGOProtos::Enums::PokemonMove move_2() const;
  void set_move_2(::POGOProtos::Enums::PokemonMove value);

  // optional string deployed_fort_id = 8;
  void clear_deployed_fort_id();
  static const int kDeployedFortIdFieldNumber = 8;
  const ::std::string& deployed_fort_id() const;
  void set_deployed_fort_id(const ::std::string& value);
  void set_deployed_fort_id(const char* value);
  void set_deployed_fort_id(const char* value, size_t size);
  ::std::string* mutable_deployed_fort_id();
  ::std::string* release_deployed_fort_id();
  void set_allocated_deployed_fort_id(::std::string* deployed_fort_id);

  // optional string owner_name = 9;
  void clear_owner_name();
  static const int kOwnerNameFieldNumber = 9;
  const ::std::string& owner_name() const;
  void set_owner_name(const ::std::string& value);
  void set_owner_name(const char* value);
  void set_owner_name(const char* value, size_t size);
  ::std::string* mutable_owner_name();
  ::std::string* release_owner_name();
  void set_allocated_owner_name(::std::string* owner_name);

  // optional bool is_egg = 10;
  void clear_is_egg();
  static const int kIsEggFieldNumber = 10;
  bool is_egg() const;
  void set_is_egg(bool value);

  // optional double egg_km_walked_target = 11;
  void clear_egg_km_walked_target();
  static const int kEggKmWalkedTargetFieldNumber = 11;
  double egg_km_walked_target() const;
  void set_egg_km_walked_target(double value);

  // optional double egg_km_walked_start = 12;
  void clear_egg_km_walked_start();
  static const int kEggKmWalkedStartFieldNumber = 12;
  double egg_km_walked_start() const;
  void set_egg_km_walked_start(double value);

  // optional int32 origin = 14;
  void clear_origin();
  static const int kOriginFieldNumber = 14;
  ::google::protobuf::int32 origin() const;
  void set_origin(::google::protobuf::int32 value);

  // optional float height_m = 15;
  void clear_height_m();
  static const int kHeightMFieldNumber = 15;
  float height_m() const;
  void set_height_m(float value);

  // optional float weight_kg = 16;
  void clear_weight_kg();
  static const int kWeightKgFieldNumber = 16;
  float weight_kg() const;
  void set_weight_kg(float value);

  // optional int32 individual_attack = 17;
  void clear_individual_attack();
  static const int kIndividualAttackFieldNumber = 17;
  ::google::protobuf::int32 individual_attack() const;
  void set_individual_attack(::google::protobuf::int32 value);

  // optional int32 individual_defense = 18;
  void clear_individual_defense();
  static const int kIndividualDefenseFieldNumber = 18;
  ::google::protobuf::int32 individual_defense() const;
  void set_individual_defense(::google::protobuf::int32 value);

  // optional int32 individual_stamina = 19;
  void clear_individual_stamina();
  static const int kIndividualStaminaFieldNumber = 19;
  ::google::protobuf::int32 individual_stamina() const;
  void set_individual_stamina(::google::protobuf::int32 value);

  // optional float cp_multiplier = 20;
  void clear_cp_multiplier();
  static const int kCpMultiplierFieldNumber = 20;
  float cp_multiplier() const;
  void set_cp_multiplier(float value);

  // optional .POGOProtos.Inventory.Item.ItemId pokeball = 21;
  void clear_pokeball();
  static const int kPokeballFieldNumber = 21;
  ::POGOProtos::Inventory::Item::ItemId pokeball() const;
  void set_pokeball(::POGOProtos::Inventory::Item::ItemId value);

  // optional uint64 captured_cell_id = 22;
  void clear_captured_cell_id();
  static const int kCapturedCellIdFieldNumber = 22;
  ::google::protobuf::uint64 captured_cell_id() const;
  void set_captured_cell_id(::google::protobuf::uint64 value);

  // optional int32 battles_attacked = 23;
  void clear_battles_attacked();
  static const int kBattlesAttackedFieldNumber = 23;
  ::google::protobuf::int32 battles_attacked() const;
  void set_battles_attacked(::google::protobuf::int32 value);

  // optional int32 battles_defended = 24;
  void clear_battles_defended();
  static const int kBattlesDefendedFieldNumber = 24;
  ::google::protobuf::int32 battles_defended() const;
  void set_battles_defended(::google::protobuf::int32 value);

  // optional string egg_incubator_id = 25;
  void clear_egg_incubator_id();
  static const int kEggIncubatorIdFieldNumber = 25;
  const ::std::string& egg_incubator_id() const;
  void set_egg_incubator_id(const ::std::string& value);
  void set_egg_incubator_id(const char* value);
  void set_egg_incubator_id(const char* value, size_t size);
  ::std::string* mutable_egg_incubator_id();
  ::std::string* release_egg_incubator_id();
  void set_allocated_egg_incubator_id(::std::string* egg_incubator_id);

  // optional uint64 creation_time_ms = 26;
  void clear_creation_time_ms();
  static const int kCreationTimeMsFieldNumber = 26;
  ::google::protobuf::uint64 creation_time_ms() const;
  void set_creation_time_ms(::google::protobuf::uint64 value);

  // optional int32 num_upgrades = 27;
  void clear_num_upgrades();
  static const int kNumUpgradesFieldNumber = 27;
  ::google::protobuf::int32 num_upgrades() const;
  void set_num_upgrades(::google::protobuf::int32 value);

  // optional float additional_cp_multiplier = 28;
  void clear_additional_cp_multiplier();
  static const int kAdditionalCpMultiplierFieldNumber = 28;
  float additional_cp_multiplier() const;
  void set_additional_cp_multiplier(float value);

  // optional int32 favorite = 29;
  void clear_favorite();
  static const int kFavoriteFieldNumber = 29;
  ::google::protobuf::int32 favorite() const;
  void set_favorite(::google::protobuf::int32 value);

  // optional string nickname = 30;
  void clear_nickname();
  static const int kNicknameFieldNumber = 30;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional int32 from_fort = 31;
  void clear_from_fort();
  static const int kFromFortFieldNumber = 31;
  ::google::protobuf::int32 from_fort() const;
  void set_from_fort(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:POGOProtos.Data.PokemonData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 id_;
  int pokemon_id_;
  ::google::protobuf::int32 cp_;
  ::google::protobuf::int32 stamina_;
  ::google::protobuf::int32 stamina_max_;
  int move_1_;
  int move_2_;
  ::google::protobuf::internal::ArenaStringPtr deployed_fort_id_;
  ::google::protobuf::internal::ArenaStringPtr owner_name_;
  double egg_km_walked_target_;
  bool is_egg_;
  ::google::protobuf::int32 origin_;
  double egg_km_walked_start_;
  float height_m_;
  float weight_kg_;
  ::google::protobuf::int32 individual_attack_;
  ::google::protobuf::int32 individual_defense_;
  ::google::protobuf::int32 individual_stamina_;
  float cp_multiplier_;
  ::google::protobuf::uint64 captured_cell_id_;
  int pokeball_;
  ::google::protobuf::int32 battles_attacked_;
  ::google::protobuf::internal::ArenaStringPtr egg_incubator_id_;
  ::google::protobuf::int32 battles_defended_;
  ::google::protobuf::int32 num_upgrades_;
  ::google::protobuf::uint64 creation_time_ms_;
  float additional_cp_multiplier_;
  ::google::protobuf::int32 favorite_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::int32 from_fort_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fData_2fPokemonData_2eproto();

  void InitAsDefaultInstance();
  static PokemonData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PokemonData

// optional fixed64 id = 1;
inline void PokemonData::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PokemonData::id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.id)
  return id_;
}
inline void PokemonData::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.id)
}

// optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
inline void PokemonData::clear_pokemon_id() {
  pokemon_id_ = 0;
}
inline ::POGOProtos::Enums::PokemonId PokemonData::pokemon_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.pokemon_id)
  return static_cast< ::POGOProtos::Enums::PokemonId >(pokemon_id_);
}
inline void PokemonData::set_pokemon_id(::POGOProtos::Enums::PokemonId value) {
  
  pokemon_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.pokemon_id)
}

// optional int32 cp = 3;
inline void PokemonData::clear_cp() {
  cp_ = 0;
}
inline ::google::protobuf::int32 PokemonData::cp() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.cp)
  return cp_;
}
inline void PokemonData::set_cp(::google::protobuf::int32 value) {
  
  cp_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.cp)
}

// optional int32 stamina = 4;
inline void PokemonData::clear_stamina() {
  stamina_ = 0;
}
inline ::google::protobuf::int32 PokemonData::stamina() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.stamina)
  return stamina_;
}
inline void PokemonData::set_stamina(::google::protobuf::int32 value) {
  
  stamina_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.stamina)
}

// optional int32 stamina_max = 5;
inline void PokemonData::clear_stamina_max() {
  stamina_max_ = 0;
}
inline ::google::protobuf::int32 PokemonData::stamina_max() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.stamina_max)
  return stamina_max_;
}
inline void PokemonData::set_stamina_max(::google::protobuf::int32 value) {
  
  stamina_max_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.stamina_max)
}

// optional .POGOProtos.Enums.PokemonMove move_1 = 6;
inline void PokemonData::clear_move_1() {
  move_1_ = 0;
}
inline ::POGOProtos::Enums::PokemonMove PokemonData::move_1() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.move_1)
  return static_cast< ::POGOProtos::Enums::PokemonMove >(move_1_);
}
inline void PokemonData::set_move_1(::POGOProtos::Enums::PokemonMove value) {
  
  move_1_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.move_1)
}

// optional .POGOProtos.Enums.PokemonMove move_2 = 7;
inline void PokemonData::clear_move_2() {
  move_2_ = 0;
}
inline ::POGOProtos::Enums::PokemonMove PokemonData::move_2() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.move_2)
  return static_cast< ::POGOProtos::Enums::PokemonMove >(move_2_);
}
inline void PokemonData::set_move_2(::POGOProtos::Enums::PokemonMove value) {
  
  move_2_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.move_2)
}

// optional string deployed_fort_id = 8;
inline void PokemonData::clear_deployed_fort_id() {
  deployed_fort_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PokemonData::deployed_fort_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.deployed_fort_id)
  return deployed_fort_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PokemonData::set_deployed_fort_id(const ::std::string& value) {
  
  deployed_fort_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.deployed_fort_id)
}
inline void PokemonData::set_deployed_fort_id(const char* value) {
  
  deployed_fort_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Data.PokemonData.deployed_fort_id)
}
inline void PokemonData::set_deployed_fort_id(const char* value, size_t size) {
  
  deployed_fort_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Data.PokemonData.deployed_fort_id)
}
inline ::std::string* PokemonData::mutable_deployed_fort_id() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PokemonData.deployed_fort_id)
  return deployed_fort_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PokemonData::release_deployed_fort_id() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PokemonData.deployed_fort_id)
  
  return deployed_fort_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PokemonData::set_allocated_deployed_fort_id(::std::string* deployed_fort_id) {
  if (deployed_fort_id != NULL) {
    
  } else {
    
  }
  deployed_fort_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deployed_fort_id);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PokemonData.deployed_fort_id)
}

// optional string owner_name = 9;
inline void PokemonData::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PokemonData::owner_name() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.owner_name)
  return owner_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PokemonData::set_owner_name(const ::std::string& value) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.owner_name)
}
inline void PokemonData::set_owner_name(const char* value) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Data.PokemonData.owner_name)
}
inline void PokemonData::set_owner_name(const char* value, size_t size) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Data.PokemonData.owner_name)
}
inline ::std::string* PokemonData::mutable_owner_name() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PokemonData.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PokemonData::release_owner_name() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PokemonData.owner_name)
  
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PokemonData::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    
  } else {
    
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PokemonData.owner_name)
}

// optional bool is_egg = 10;
inline void PokemonData::clear_is_egg() {
  is_egg_ = false;
}
inline bool PokemonData::is_egg() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.is_egg)
  return is_egg_;
}
inline void PokemonData::set_is_egg(bool value) {
  
  is_egg_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.is_egg)
}

// optional double egg_km_walked_target = 11;
inline void PokemonData::clear_egg_km_walked_target() {
  egg_km_walked_target_ = 0;
}
inline double PokemonData::egg_km_walked_target() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.egg_km_walked_target)
  return egg_km_walked_target_;
}
inline void PokemonData::set_egg_km_walked_target(double value) {
  
  egg_km_walked_target_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.egg_km_walked_target)
}

// optional double egg_km_walked_start = 12;
inline void PokemonData::clear_egg_km_walked_start() {
  egg_km_walked_start_ = 0;
}
inline double PokemonData::egg_km_walked_start() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.egg_km_walked_start)
  return egg_km_walked_start_;
}
inline void PokemonData::set_egg_km_walked_start(double value) {
  
  egg_km_walked_start_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.egg_km_walked_start)
}

// optional int32 origin = 14;
inline void PokemonData::clear_origin() {
  origin_ = 0;
}
inline ::google::protobuf::int32 PokemonData::origin() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.origin)
  return origin_;
}
inline void PokemonData::set_origin(::google::protobuf::int32 value) {
  
  origin_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.origin)
}

// optional float height_m = 15;
inline void PokemonData::clear_height_m() {
  height_m_ = 0;
}
inline float PokemonData::height_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.height_m)
  return height_m_;
}
inline void PokemonData::set_height_m(float value) {
  
  height_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.height_m)
}

// optional float weight_kg = 16;
inline void PokemonData::clear_weight_kg() {
  weight_kg_ = 0;
}
inline float PokemonData::weight_kg() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.weight_kg)
  return weight_kg_;
}
inline void PokemonData::set_weight_kg(float value) {
  
  weight_kg_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.weight_kg)
}

// optional int32 individual_attack = 17;
inline void PokemonData::clear_individual_attack() {
  individual_attack_ = 0;
}
inline ::google::protobuf::int32 PokemonData::individual_attack() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.individual_attack)
  return individual_attack_;
}
inline void PokemonData::set_individual_attack(::google::protobuf::int32 value) {
  
  individual_attack_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.individual_attack)
}

// optional int32 individual_defense = 18;
inline void PokemonData::clear_individual_defense() {
  individual_defense_ = 0;
}
inline ::google::protobuf::int32 PokemonData::individual_defense() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.individual_defense)
  return individual_defense_;
}
inline void PokemonData::set_individual_defense(::google::protobuf::int32 value) {
  
  individual_defense_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.individual_defense)
}

// optional int32 individual_stamina = 19;
inline void PokemonData::clear_individual_stamina() {
  individual_stamina_ = 0;
}
inline ::google::protobuf::int32 PokemonData::individual_stamina() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.individual_stamina)
  return individual_stamina_;
}
inline void PokemonData::set_individual_stamina(::google::protobuf::int32 value) {
  
  individual_stamina_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.individual_stamina)
}

// optional float cp_multiplier = 20;
inline void PokemonData::clear_cp_multiplier() {
  cp_multiplier_ = 0;
}
inline float PokemonData::cp_multiplier() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.cp_multiplier)
  return cp_multiplier_;
}
inline void PokemonData::set_cp_multiplier(float value) {
  
  cp_multiplier_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.cp_multiplier)
}

// optional .POGOProtos.Inventory.Item.ItemId pokeball = 21;
inline void PokemonData::clear_pokeball() {
  pokeball_ = 0;
}
inline ::POGOProtos::Inventory::Item::ItemId PokemonData::pokeball() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.pokeball)
  return static_cast< ::POGOProtos::Inventory::Item::ItemId >(pokeball_);
}
inline void PokemonData::set_pokeball(::POGOProtos::Inventory::Item::ItemId value) {
  
  pokeball_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.pokeball)
}

// optional uint64 captured_cell_id = 22;
inline void PokemonData::clear_captured_cell_id() {
  captured_cell_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PokemonData::captured_cell_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.captured_cell_id)
  return captured_cell_id_;
}
inline void PokemonData::set_captured_cell_id(::google::protobuf::uint64 value) {
  
  captured_cell_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.captured_cell_id)
}

// optional int32 battles_attacked = 23;
inline void PokemonData::clear_battles_attacked() {
  battles_attacked_ = 0;
}
inline ::google::protobuf::int32 PokemonData::battles_attacked() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.battles_attacked)
  return battles_attacked_;
}
inline void PokemonData::set_battles_attacked(::google::protobuf::int32 value) {
  
  battles_attacked_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.battles_attacked)
}

// optional int32 battles_defended = 24;
inline void PokemonData::clear_battles_defended() {
  battles_defended_ = 0;
}
inline ::google::protobuf::int32 PokemonData::battles_defended() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.battles_defended)
  return battles_defended_;
}
inline void PokemonData::set_battles_defended(::google::protobuf::int32 value) {
  
  battles_defended_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.battles_defended)
}

// optional string egg_incubator_id = 25;
inline void PokemonData::clear_egg_incubator_id() {
  egg_incubator_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PokemonData::egg_incubator_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.egg_incubator_id)
  return egg_incubator_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PokemonData::set_egg_incubator_id(const ::std::string& value) {
  
  egg_incubator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.egg_incubator_id)
}
inline void PokemonData::set_egg_incubator_id(const char* value) {
  
  egg_incubator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Data.PokemonData.egg_incubator_id)
}
inline void PokemonData::set_egg_incubator_id(const char* value, size_t size) {
  
  egg_incubator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Data.PokemonData.egg_incubator_id)
}
inline ::std::string* PokemonData::mutable_egg_incubator_id() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PokemonData.egg_incubator_id)
  return egg_incubator_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PokemonData::release_egg_incubator_id() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PokemonData.egg_incubator_id)
  
  return egg_incubator_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PokemonData::set_allocated_egg_incubator_id(::std::string* egg_incubator_id) {
  if (egg_incubator_id != NULL) {
    
  } else {
    
  }
  egg_incubator_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), egg_incubator_id);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PokemonData.egg_incubator_id)
}

// optional uint64 creation_time_ms = 26;
inline void PokemonData::clear_creation_time_ms() {
  creation_time_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PokemonData::creation_time_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.creation_time_ms)
  return creation_time_ms_;
}
inline void PokemonData::set_creation_time_ms(::google::protobuf::uint64 value) {
  
  creation_time_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.creation_time_ms)
}

// optional int32 num_upgrades = 27;
inline void PokemonData::clear_num_upgrades() {
  num_upgrades_ = 0;
}
inline ::google::protobuf::int32 PokemonData::num_upgrades() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.num_upgrades)
  return num_upgrades_;
}
inline void PokemonData::set_num_upgrades(::google::protobuf::int32 value) {
  
  num_upgrades_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.num_upgrades)
}

// optional float additional_cp_multiplier = 28;
inline void PokemonData::clear_additional_cp_multiplier() {
  additional_cp_multiplier_ = 0;
}
inline float PokemonData::additional_cp_multiplier() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.additional_cp_multiplier)
  return additional_cp_multiplier_;
}
inline void PokemonData::set_additional_cp_multiplier(float value) {
  
  additional_cp_multiplier_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.additional_cp_multiplier)
}

// optional int32 favorite = 29;
inline void PokemonData::clear_favorite() {
  favorite_ = 0;
}
inline ::google::protobuf::int32 PokemonData::favorite() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.favorite)
  return favorite_;
}
inline void PokemonData::set_favorite(::google::protobuf::int32 value) {
  
  favorite_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.favorite)
}

// optional string nickname = 30;
inline void PokemonData::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PokemonData::nickname() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PokemonData::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.nickname)
}
inline void PokemonData::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Data.PokemonData.nickname)
}
inline void PokemonData::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Data.PokemonData.nickname)
}
inline ::std::string* PokemonData::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PokemonData.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PokemonData::release_nickname() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PokemonData.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PokemonData::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PokemonData.nickname)
}

// optional int32 from_fort = 31;
inline void PokemonData::clear_from_fort() {
  from_fort_ = 0;
}
inline ::google::protobuf::int32 PokemonData::from_fort() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PokemonData.from_fort)
  return from_fort_;
}
inline void PokemonData::set_from_fort(::google::protobuf::int32 value) {
  
  from_fort_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PokemonData.from_fort)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Data
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fData_2fPokemonData_2eproto__INCLUDED
