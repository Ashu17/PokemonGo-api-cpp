// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/PlayerData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Data/PlayerData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Data {

namespace {

const ::google::protobuf::Descriptor* PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fData_2fPlayerData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fData_2fPlayerData_2eproto() {
  protobuf_AddDesc_POGOProtos_2fData_2fPlayerData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Data/PlayerData.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerData_descriptor_ = file->message_type(0);
  static const int PlayerData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, creation_timestamp_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, tutorial_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, max_pokemon_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, max_item_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, daily_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, equipped_badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, contact_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, currencies_),
  };
  PlayerData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerData_descriptor_,
      PlayerData::default_instance_,
      PlayerData_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fData_2fPlayerData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerData_descriptor_, &PlayerData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fData_2fPlayerData_2eproto() {
  delete PlayerData::default_instance_;
  delete PlayerData_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fData_2fPlayerData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fData_2fPlayerData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fTutorialState_2eproto();
  ::POGOProtos::Data::Player::protobuf_AddDesc_POGOProtos_2fData_2fPlayer_2fPlayerAvatar_2eproto();
  ::POGOProtos::Data::Player::protobuf_AddDesc_POGOProtos_2fData_2fPlayer_2fDailyBonus_2eproto();
  ::POGOProtos::Data::Player::protobuf_AddDesc_POGOProtos_2fData_2fPlayer_2fEquippedBadge_2eproto();
  ::POGOProtos::Data::Player::protobuf_AddDesc_POGOProtos_2fData_2fPlayer_2fContactSettings_2eproto();
  ::POGOProtos::Data::Player::protobuf_AddDesc_POGOProtos_2fData_2fPlayer_2fCurrency_2eproto();
  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fTeamColor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n POGOProtos/Data/PlayerData.proto\022\017POGO"
    "Protos.Data\032$POGOProtos/Enums/TutorialSt"
    "ate.proto\032)POGOProtos/Data/Player/Player"
    "Avatar.proto\032\'POGOProtos/Data/Player/Dai"
    "lyBonus.proto\032*POGOProtos/Data/Player/Eq"
    "uippedBadge.proto\032,POGOProtos/Data/Playe"
    "r/ContactSettings.proto\032%POGOProtos/Data"
    "/Player/Currency.proto\032 POGOProtos/Enums"
    "/TeamColor.proto\"\203\004\n\nPlayerData\022\035\n\025creat"
    "ion_timestamp_ms\030\001 \001(\003\022\020\n\010username\030\002 \001(\t"
    "\022)\n\004team\030\005 \001(\0162\033.POGOProtos.Enums.TeamCo"
    "lor\022;\n\016tutorial_state\030\007 \003(\0162\037.POGOProtos"
    ".Enums.TutorialStateB\002\020\001\0224\n\006avatar\030\010 \001(\013"
    "2$.POGOProtos.Data.Player.PlayerAvatar\022\033"
    "\n\023max_pokemon_storage\030\t \001(\005\022\030\n\020max_item_"
    "storage\030\n \001(\005\0227\n\013daily_bonus\030\013 \001(\0132\".POG"
    "OProtos.Data.Player.DailyBonus\022=\n\016equipp"
    "ed_badge\030\014 \001(\0132%.POGOProtos.Data.Player."
    "EquippedBadge\022A\n\020contact_settings\030\r \001(\0132"
    "\'.POGOProtos.Data.Player.ContactSettings"
    "\0224\n\ncurrencies\030\016 \003(\0132 .POGOProtos.Data.P"
    "layer.Currencyb\006proto3", 862);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Data/PlayerData.proto", &protobuf_RegisterTypes);
  PlayerData::default_instance_ = new PlayerData();
  PlayerData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fData_2fPlayerData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fData_2fPlayerData_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fData_2fPlayerData_2eproto() {
    protobuf_AddDesc_POGOProtos_2fData_2fPlayerData_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fData_2fPlayerData_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerData::kCreationTimestampMsFieldNumber;
const int PlayerData::kUsernameFieldNumber;
const int PlayerData::kTeamFieldNumber;
const int PlayerData::kTutorialStateFieldNumber;
const int PlayerData::kAvatarFieldNumber;
const int PlayerData::kMaxPokemonStorageFieldNumber;
const int PlayerData::kMaxItemStorageFieldNumber;
const int PlayerData::kDailyBonusFieldNumber;
const int PlayerData::kEquippedBadgeFieldNumber;
const int PlayerData::kContactSettingsFieldNumber;
const int PlayerData::kCurrenciesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerData::PlayerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Data.PlayerData)
}

void PlayerData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  avatar_ = const_cast< ::POGOProtos::Data::Player::PlayerAvatar*>(&::POGOProtos::Data::Player::PlayerAvatar::default_instance());
  daily_bonus_ = const_cast< ::POGOProtos::Data::Player::DailyBonus*>(&::POGOProtos::Data::Player::DailyBonus::default_instance());
  equipped_badge_ = const_cast< ::POGOProtos::Data::Player::EquippedBadge*>(&::POGOProtos::Data::Player::EquippedBadge::default_instance());
  contact_settings_ = const_cast< ::POGOProtos::Data::Player::ContactSettings*>(&::POGOProtos::Data::Player::ContactSettings::default_instance());
}

PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Data.PlayerData)
}

void PlayerData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creation_timestamp_ms_ = GOOGLE_LONGLONG(0);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ = 0;
  avatar_ = NULL;
  max_pokemon_storage_ = 0;
  max_item_storage_ = 0;
  daily_bonus_ = NULL;
  equipped_badge_ = NULL;
  contact_settings_ = NULL;
}

PlayerData::~PlayerData() {
  // @@protoc_insertion_point(destructor:POGOProtos.Data.PlayerData)
  SharedDtor();
}

void PlayerData::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete avatar_;
    delete daily_bonus_;
    delete equipped_badge_;
    delete contact_settings_;
  }
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerData_descriptor_;
}

const PlayerData& PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fData_2fPlayerData_2eproto();
  return *default_instance_;
}

PlayerData* PlayerData::default_instance_ = NULL;

PlayerData* PlayerData::New(::google::protobuf::Arena* arena) const {
  PlayerData* n = new PlayerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Data.PlayerData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(team_, max_pokemon_storage_);
  creation_timestamp_ms_ = GOOGLE_LONGLONG(0);
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && avatar_ != NULL) delete avatar_;
  avatar_ = NULL;
  max_item_storage_ = 0;
  if (GetArenaNoVirtual() == NULL && daily_bonus_ != NULL) delete daily_bonus_;
  daily_bonus_ = NULL;
  if (GetArenaNoVirtual() == NULL && equipped_badge_ != NULL) delete equipped_badge_;
  equipped_badge_ = NULL;
  if (GetArenaNoVirtual() == NULL && contact_settings_ != NULL) delete contact_settings_;
  contact_settings_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  tutorial_state_.Clear();
  currencies_.Clear();
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Data.PlayerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 creation_timestamp_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_timestamp_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Data.PlayerData.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_team;
        break;
      }

      // optional .POGOProtos.Enums.TeamColor team = 5;
      case 5: {
        if (tag == 40) {
         parse_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_team(static_cast< ::POGOProtos::Enums::TeamColor >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tutorial_state;
        break;
      }

      // repeated .POGOProtos.Enums.TutorialState tutorial_state = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_tutorial_state:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_tutorial_state(static_cast< ::POGOProtos::Enums::TutorialState >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 56) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_tutorial_state(static_cast< ::POGOProtos::Enums::TutorialState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avatar;
        break;
      }

      // optional .POGOProtos.Data.Player.PlayerAvatar avatar = 8;
      case 8: {
        if (tag == 66) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_pokemon_storage;
        break;
      }

      // optional int32 max_pokemon_storage = 9;
      case 9: {
        if (tag == 72) {
         parse_max_pokemon_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pokemon_storage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_max_item_storage;
        break;
      }

      // optional int32 max_item_storage = 10;
      case 10: {
        if (tag == 80) {
         parse_max_item_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_item_storage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_daily_bonus;
        break;
      }

      // optional .POGOProtos.Data.Player.DailyBonus daily_bonus = 11;
      case 11: {
        if (tag == 90) {
         parse_daily_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_bonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_equipped_badge;
        break;
      }

      // optional .POGOProtos.Data.Player.EquippedBadge equipped_badge = 12;
      case 12: {
        if (tag == 98) {
         parse_equipped_badge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipped_badge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_contact_settings;
        break;
      }

      // optional .POGOProtos.Data.Player.ContactSettings contact_settings = 13;
      case 13: {
        if (tag == 106) {
         parse_contact_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_currencies;
        break;
      }

      // repeated .POGOProtos.Data.Player.Currency currencies = 14;
      case 14: {
        if (tag == 114) {
         parse_currencies:
          DO_(input->IncrementRecursionDepth());
         parse_loop_currencies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_currencies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_currencies;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Data.PlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Data.PlayerData)
  return false;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Data.PlayerData)
  // optional int64 creation_timestamp_ms = 1;
  if (this->creation_timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->creation_timestamp_ms(), output);
  }

  // optional string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Data.PlayerData.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional .POGOProtos.Enums.TeamColor team = 5;
  if (this->team() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->team(), output);
  }

  // repeated .POGOProtos.Enums.TutorialState tutorial_state = 7 [packed = true];
  if (this->tutorial_state_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_tutorial_state_cached_byte_size_);
  }
  for (int i = 0; i < this->tutorial_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->tutorial_state(i), output);
  }

  // optional .POGOProtos.Data.Player.PlayerAvatar avatar = 8;
  if (this->has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->avatar_, output);
  }

  // optional int32 max_pokemon_storage = 9;
  if (this->max_pokemon_storage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_pokemon_storage(), output);
  }

  // optional int32 max_item_storage = 10;
  if (this->max_item_storage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_item_storage(), output);
  }

  // optional .POGOProtos.Data.Player.DailyBonus daily_bonus = 11;
  if (this->has_daily_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->daily_bonus_, output);
  }

  // optional .POGOProtos.Data.Player.EquippedBadge equipped_badge = 12;
  if (this->has_equipped_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->equipped_badge_, output);
  }

  // optional .POGOProtos.Data.Player.ContactSettings contact_settings = 13;
  if (this->has_contact_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->contact_settings_, output);
  }

  // repeated .POGOProtos.Data.Player.Currency currencies = 14;
  for (unsigned int i = 0, n = this->currencies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->currencies(i), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Data.PlayerData)
}

::google::protobuf::uint8* PlayerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Data.PlayerData)
  // optional int64 creation_timestamp_ms = 1;
  if (this->creation_timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->creation_timestamp_ms(), target);
  }

  // optional string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Data.PlayerData.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional .POGOProtos.Enums.TeamColor team = 5;
  if (this->team() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->team(), target);
  }

  // repeated .POGOProtos.Enums.TutorialState tutorial_state = 7 [packed = true];
  if (this->tutorial_state_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _tutorial_state_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tutorial_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->tutorial_state(i), target);
  }

  // optional .POGOProtos.Data.Player.PlayerAvatar avatar = 8;
  if (this->has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->avatar_, false, target);
  }

  // optional int32 max_pokemon_storage = 9;
  if (this->max_pokemon_storage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_pokemon_storage(), target);
  }

  // optional int32 max_item_storage = 10;
  if (this->max_item_storage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->max_item_storage(), target);
  }

  // optional .POGOProtos.Data.Player.DailyBonus daily_bonus = 11;
  if (this->has_daily_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->daily_bonus_, false, target);
  }

  // optional .POGOProtos.Data.Player.EquippedBadge equipped_badge = 12;
  if (this->has_equipped_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->equipped_badge_, false, target);
  }

  // optional .POGOProtos.Data.Player.ContactSettings contact_settings = 13;
  if (this->has_contact_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->contact_settings_, false, target);
  }

  // repeated .POGOProtos.Data.Player.Currency currencies = 14;
  for (unsigned int i = 0, n = this->currencies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->currencies(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Data.PlayerData)
  return target;
}

int PlayerData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Data.PlayerData)
  int total_size = 0;

  // optional int64 creation_timestamp_ms = 1;
  if (this->creation_timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->creation_timestamp_ms());
  }

  // optional string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional .POGOProtos.Enums.TeamColor team = 5;
  if (this->team() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
  }

  // optional .POGOProtos.Data.Player.PlayerAvatar avatar = 8;
  if (this->has_avatar()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->avatar_);
  }

  // optional int32 max_pokemon_storage = 9;
  if (this->max_pokemon_storage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_pokemon_storage());
  }

  // optional int32 max_item_storage = 10;
  if (this->max_item_storage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_item_storage());
  }

  // optional .POGOProtos.Data.Player.DailyBonus daily_bonus = 11;
  if (this->has_daily_bonus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->daily_bonus_);
  }

  // optional .POGOProtos.Data.Player.EquippedBadge equipped_badge = 12;
  if (this->has_equipped_badge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipped_badge_);
  }

  // optional .POGOProtos.Data.Player.ContactSettings contact_settings = 13;
  if (this->has_contact_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->contact_settings_);
  }

  // repeated .POGOProtos.Enums.TutorialState tutorial_state = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->tutorial_state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->tutorial_state(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tutorial_state_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .POGOProtos.Data.Player.Currency currencies = 14;
  total_size += 1 * this->currencies_size();
  for (int i = 0; i < this->currencies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->currencies(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Data.PlayerData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Data.PlayerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Data.PlayerData)
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Data.PlayerData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tutorial_state_.MergeFrom(from.tutorial_state_);
  currencies_.MergeFrom(from.currencies_);
  if (from.creation_timestamp_ms() != 0) {
    set_creation_timestamp_ms(from.creation_timestamp_ms());
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.team() != 0) {
    set_team(from.team());
  }
  if (from.has_avatar()) {
    mutable_avatar()->::POGOProtos::Data::Player::PlayerAvatar::MergeFrom(from.avatar());
  }
  if (from.max_pokemon_storage() != 0) {
    set_max_pokemon_storage(from.max_pokemon_storage());
  }
  if (from.max_item_storage() != 0) {
    set_max_item_storage(from.max_item_storage());
  }
  if (from.has_daily_bonus()) {
    mutable_daily_bonus()->::POGOProtos::Data::Player::DailyBonus::MergeFrom(from.daily_bonus());
  }
  if (from.has_equipped_badge()) {
    mutable_equipped_badge()->::POGOProtos::Data::Player::EquippedBadge::MergeFrom(from.equipped_badge());
  }
  if (from.has_contact_settings()) {
    mutable_contact_settings()->::POGOProtos::Data::Player::ContactSettings::MergeFrom(from.contact_settings());
  }
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Data.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Data.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {

  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerData::InternalSwap(PlayerData* other) {
  std::swap(creation_timestamp_ms_, other->creation_timestamp_ms_);
  username_.Swap(&other->username_);
  std::swap(team_, other->team_);
  tutorial_state_.UnsafeArenaSwap(&other->tutorial_state_);
  std::swap(avatar_, other->avatar_);
  std::swap(max_pokemon_storage_, other->max_pokemon_storage_);
  std::swap(max_item_storage_, other->max_item_storage_);
  std::swap(daily_bonus_, other->daily_bonus_);
  std::swap(equipped_badge_, other->equipped_badge_);
  std::swap(contact_settings_, other->contact_settings_);
  currencies_.UnsafeArenaSwap(&other->currencies_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerData_descriptor_;
  metadata.reflection = PlayerData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerData

// optional int64 creation_timestamp_ms = 1;
void PlayerData::clear_creation_timestamp_ms() {
  creation_timestamp_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PlayerData::creation_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.creation_timestamp_ms)
  return creation_timestamp_ms_;
}
 void PlayerData::set_creation_timestamp_ms(::google::protobuf::int64 value) {
  
  creation_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.creation_timestamp_ms)
}

// optional string username = 2;
void PlayerData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerData::username() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerData::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.username)
}
 void PlayerData::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Data.PlayerData.username)
}
 void PlayerData::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Data.PlayerData.username)
}
 ::std::string* PlayerData::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerData::release_username() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PlayerData.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerData::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PlayerData.username)
}

// optional .POGOProtos.Enums.TeamColor team = 5;
void PlayerData::clear_team() {
  team_ = 0;
}
 ::POGOProtos::Enums::TeamColor PlayerData::team() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.team)
  return static_cast< ::POGOProtos::Enums::TeamColor >(team_);
}
 void PlayerData::set_team(::POGOProtos::Enums::TeamColor value) {
  
  team_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.team)
}

// repeated .POGOProtos.Enums.TutorialState tutorial_state = 7 [packed = true];
int PlayerData::tutorial_state_size() const {
  return tutorial_state_.size();
}
void PlayerData::clear_tutorial_state() {
  tutorial_state_.Clear();
}
 ::POGOProtos::Enums::TutorialState PlayerData::tutorial_state(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.tutorial_state)
  return static_cast< ::POGOProtos::Enums::TutorialState >(tutorial_state_.Get(index));
}
 void PlayerData::set_tutorial_state(int index, ::POGOProtos::Enums::TutorialState value) {
  tutorial_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.tutorial_state)
}
 void PlayerData::add_tutorial_state(::POGOProtos::Enums::TutorialState value) {
  tutorial_state_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Data.PlayerData.tutorial_state)
}
 const ::google::protobuf::RepeatedField<int>&
PlayerData::tutorial_state() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Data.PlayerData.tutorial_state)
  return tutorial_state_;
}
 ::google::protobuf::RepeatedField<int>*
PlayerData::mutable_tutorial_state() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Data.PlayerData.tutorial_state)
  return &tutorial_state_;
}

// optional .POGOProtos.Data.Player.PlayerAvatar avatar = 8;
bool PlayerData::has_avatar() const {
  return !_is_default_instance_ && avatar_ != NULL;
}
void PlayerData::clear_avatar() {
  if (GetArenaNoVirtual() == NULL && avatar_ != NULL) delete avatar_;
  avatar_ = NULL;
}
const ::POGOProtos::Data::Player::PlayerAvatar& PlayerData::avatar() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.avatar)
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
::POGOProtos::Data::Player::PlayerAvatar* PlayerData::mutable_avatar() {
  
  if (avatar_ == NULL) {
    avatar_ = new ::POGOProtos::Data::Player::PlayerAvatar;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.avatar)
  return avatar_;
}
::POGOProtos::Data::Player::PlayerAvatar* PlayerData::release_avatar() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PlayerData.avatar)
  
  ::POGOProtos::Data::Player::PlayerAvatar* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
void PlayerData::set_allocated_avatar(::POGOProtos::Data::Player::PlayerAvatar* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PlayerData.avatar)
}

// optional int32 max_pokemon_storage = 9;
void PlayerData::clear_max_pokemon_storage() {
  max_pokemon_storage_ = 0;
}
 ::google::protobuf::int32 PlayerData::max_pokemon_storage() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.max_pokemon_storage)
  return max_pokemon_storage_;
}
 void PlayerData::set_max_pokemon_storage(::google::protobuf::int32 value) {
  
  max_pokemon_storage_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.max_pokemon_storage)
}

// optional int32 max_item_storage = 10;
void PlayerData::clear_max_item_storage() {
  max_item_storage_ = 0;
}
 ::google::protobuf::int32 PlayerData::max_item_storage() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.max_item_storage)
  return max_item_storage_;
}
 void PlayerData::set_max_item_storage(::google::protobuf::int32 value) {
  
  max_item_storage_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.max_item_storage)
}

// optional .POGOProtos.Data.Player.DailyBonus daily_bonus = 11;
bool PlayerData::has_daily_bonus() const {
  return !_is_default_instance_ && daily_bonus_ != NULL;
}
void PlayerData::clear_daily_bonus() {
  if (GetArenaNoVirtual() == NULL && daily_bonus_ != NULL) delete daily_bonus_;
  daily_bonus_ = NULL;
}
const ::POGOProtos::Data::Player::DailyBonus& PlayerData::daily_bonus() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.daily_bonus)
  return daily_bonus_ != NULL ? *daily_bonus_ : *default_instance_->daily_bonus_;
}
::POGOProtos::Data::Player::DailyBonus* PlayerData::mutable_daily_bonus() {
  
  if (daily_bonus_ == NULL) {
    daily_bonus_ = new ::POGOProtos::Data::Player::DailyBonus;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.daily_bonus)
  return daily_bonus_;
}
::POGOProtos::Data::Player::DailyBonus* PlayerData::release_daily_bonus() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PlayerData.daily_bonus)
  
  ::POGOProtos::Data::Player::DailyBonus* temp = daily_bonus_;
  daily_bonus_ = NULL;
  return temp;
}
void PlayerData::set_allocated_daily_bonus(::POGOProtos::Data::Player::DailyBonus* daily_bonus) {
  delete daily_bonus_;
  daily_bonus_ = daily_bonus;
  if (daily_bonus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PlayerData.daily_bonus)
}

// optional .POGOProtos.Data.Player.EquippedBadge equipped_badge = 12;
bool PlayerData::has_equipped_badge() const {
  return !_is_default_instance_ && equipped_badge_ != NULL;
}
void PlayerData::clear_equipped_badge() {
  if (GetArenaNoVirtual() == NULL && equipped_badge_ != NULL) delete equipped_badge_;
  equipped_badge_ = NULL;
}
const ::POGOProtos::Data::Player::EquippedBadge& PlayerData::equipped_badge() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.equipped_badge)
  return equipped_badge_ != NULL ? *equipped_badge_ : *default_instance_->equipped_badge_;
}
::POGOProtos::Data::Player::EquippedBadge* PlayerData::mutable_equipped_badge() {
  
  if (equipped_badge_ == NULL) {
    equipped_badge_ = new ::POGOProtos::Data::Player::EquippedBadge;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.equipped_badge)
  return equipped_badge_;
}
::POGOProtos::Data::Player::EquippedBadge* PlayerData::release_equipped_badge() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PlayerData.equipped_badge)
  
  ::POGOProtos::Data::Player::EquippedBadge* temp = equipped_badge_;
  equipped_badge_ = NULL;
  return temp;
}
void PlayerData::set_allocated_equipped_badge(::POGOProtos::Data::Player::EquippedBadge* equipped_badge) {
  delete equipped_badge_;
  equipped_badge_ = equipped_badge;
  if (equipped_badge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PlayerData.equipped_badge)
}

// optional .POGOProtos.Data.Player.ContactSettings contact_settings = 13;
bool PlayerData::has_contact_settings() const {
  return !_is_default_instance_ && contact_settings_ != NULL;
}
void PlayerData::clear_contact_settings() {
  if (GetArenaNoVirtual() == NULL && contact_settings_ != NULL) delete contact_settings_;
  contact_settings_ = NULL;
}
const ::POGOProtos::Data::Player::ContactSettings& PlayerData::contact_settings() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.contact_settings)
  return contact_settings_ != NULL ? *contact_settings_ : *default_instance_->contact_settings_;
}
::POGOProtos::Data::Player::ContactSettings* PlayerData::mutable_contact_settings() {
  
  if (contact_settings_ == NULL) {
    contact_settings_ = new ::POGOProtos::Data::Player::ContactSettings;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.contact_settings)
  return contact_settings_;
}
::POGOProtos::Data::Player::ContactSettings* PlayerData::release_contact_settings() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PlayerData.contact_settings)
  
  ::POGOProtos::Data::Player::ContactSettings* temp = contact_settings_;
  contact_settings_ = NULL;
  return temp;
}
void PlayerData::set_allocated_contact_settings(::POGOProtos::Data::Player::ContactSettings* contact_settings) {
  delete contact_settings_;
  contact_settings_ = contact_settings;
  if (contact_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PlayerData.contact_settings)
}

// repeated .POGOProtos.Data.Player.Currency currencies = 14;
int PlayerData::currencies_size() const {
  return currencies_.size();
}
void PlayerData::clear_currencies() {
  currencies_.Clear();
}
const ::POGOProtos::Data::Player::Currency& PlayerData::currencies(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.currencies)
  return currencies_.Get(index);
}
::POGOProtos::Data::Player::Currency* PlayerData::mutable_currencies(int index) {
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.currencies)
  return currencies_.Mutable(index);
}
::POGOProtos::Data::Player::Currency* PlayerData::add_currencies() {
  // @@protoc_insertion_point(field_add:POGOProtos.Data.PlayerData.currencies)
  return currencies_.Add();
}
::google::protobuf::RepeatedPtrField< ::POGOProtos::Data::Player::Currency >*
PlayerData::mutable_currencies() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Data.PlayerData.currencies)
  return &currencies_;
}
const ::google::protobuf::RepeatedPtrField< ::POGOProtos::Data::Player::Currency >&
PlayerData::currencies() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Data.PlayerData.currencies)
  return currencies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Data
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
