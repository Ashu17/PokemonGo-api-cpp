// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/PlayerData.proto

#ifndef PROTOBUF_POGOProtos_2fData_2fPlayerData_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fData_2fPlayerData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "POGOProtos/Enums/TutorialState.pb.h"
#include "POGOProtos/Data/Player/PlayerAvatar.pb.h"
#include "POGOProtos/Data/Player/DailyBonus.pb.h"
#include "POGOProtos/Data/Player/EquippedBadge.pb.h"
#include "POGOProtos/Data/Player/ContactSettings.pb.h"
#include "POGOProtos/Data/Player/Currency.pb.h"
#include "POGOProtos/Enums/TeamColor.pb.h"
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Data {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fData_2fPlayerData_2eproto();
void protobuf_AssignDesc_POGOProtos_2fData_2fPlayerData_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fData_2fPlayerData_2eproto();

class PlayerData;

// ===================================================================

class PlayerData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Data.PlayerData) */ {
 public:
  PlayerData();
  virtual ~PlayerData();

  PlayerData(const PlayerData& from);

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerData& default_instance();

  void Swap(PlayerData* other);

  // implements Message ----------------------------------------------

  inline PlayerData* New() const { return New(NULL); }

  PlayerData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 creation_timestamp_ms = 1;
  void clear_creation_timestamp_ms();
  static const int kCreationTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 creation_timestamp_ms() const;
  void set_creation_timestamp_ms(::google::protobuf::int64 value);

  // optional string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional .POGOProtos.Enums.TeamColor team = 5;
  void clear_team();
  static const int kTeamFieldNumber = 5;
  ::POGOProtos::Enums::TeamColor team() const;
  void set_team(::POGOProtos::Enums::TeamColor value);

  // repeated .POGOProtos.Enums.TutorialState tutorial_state = 7 [packed = true];
  int tutorial_state_size() const;
  void clear_tutorial_state();
  static const int kTutorialStateFieldNumber = 7;
  ::POGOProtos::Enums::TutorialState tutorial_state(int index) const;
  void set_tutorial_state(int index, ::POGOProtos::Enums::TutorialState value);
  void add_tutorial_state(::POGOProtos::Enums::TutorialState value);
  const ::google::protobuf::RepeatedField<int>& tutorial_state() const;
  ::google::protobuf::RepeatedField<int>* mutable_tutorial_state();

  // optional .POGOProtos.Data.Player.PlayerAvatar avatar = 8;
  bool has_avatar() const;
  void clear_avatar();
  static const int kAvatarFieldNumber = 8;
  const ::POGOProtos::Data::Player::PlayerAvatar& avatar() const;
  ::POGOProtos::Data::Player::PlayerAvatar* mutable_avatar();
  ::POGOProtos::Data::Player::PlayerAvatar* release_avatar();
  void set_allocated_avatar(::POGOProtos::Data::Player::PlayerAvatar* avatar);

  // optional int32 max_pokemon_storage = 9;
  void clear_max_pokemon_storage();
  static const int kMaxPokemonStorageFieldNumber = 9;
  ::google::protobuf::int32 max_pokemon_storage() const;
  void set_max_pokemon_storage(::google::protobuf::int32 value);

  // optional int32 max_item_storage = 10;
  void clear_max_item_storage();
  static const int kMaxItemStorageFieldNumber = 10;
  ::google::protobuf::int32 max_item_storage() const;
  void set_max_item_storage(::google::protobuf::int32 value);

  // optional .POGOProtos.Data.Player.DailyBonus daily_bonus = 11;
  bool has_daily_bonus() const;
  void clear_daily_bonus();
  static const int kDailyBonusFieldNumber = 11;
  const ::POGOProtos::Data::Player::DailyBonus& daily_bonus() const;
  ::POGOProtos::Data::Player::DailyBonus* mutable_daily_bonus();
  ::POGOProtos::Data::Player::DailyBonus* release_daily_bonus();
  void set_allocated_daily_bonus(::POGOProtos::Data::Player::DailyBonus* daily_bonus);

  // optional .POGOProtos.Data.Player.EquippedBadge equipped_badge = 12;
  bool has_equipped_badge() const;
  void clear_equipped_badge();
  static const int kEquippedBadgeFieldNumber = 12;
  const ::POGOProtos::Data::Player::EquippedBadge& equipped_badge() const;
  ::POGOProtos::Data::Player::EquippedBadge* mutable_equipped_badge();
  ::POGOProtos::Data::Player::EquippedBadge* release_equipped_badge();
  void set_allocated_equipped_badge(::POGOProtos::Data::Player::EquippedBadge* equipped_badge);

  // optional .POGOProtos.Data.Player.ContactSettings contact_settings = 13;
  bool has_contact_settings() const;
  void clear_contact_settings();
  static const int kContactSettingsFieldNumber = 13;
  const ::POGOProtos::Data::Player::ContactSettings& contact_settings() const;
  ::POGOProtos::Data::Player::ContactSettings* mutable_contact_settings();
  ::POGOProtos::Data::Player::ContactSettings* release_contact_settings();
  void set_allocated_contact_settings(::POGOProtos::Data::Player::ContactSettings* contact_settings);

  // repeated .POGOProtos.Data.Player.Currency currencies = 14;
  int currencies_size() const;
  void clear_currencies();
  static const int kCurrenciesFieldNumber = 14;
  const ::POGOProtos::Data::Player::Currency& currencies(int index) const;
  ::POGOProtos::Data::Player::Currency* mutable_currencies(int index);
  ::POGOProtos::Data::Player::Currency* add_currencies();
  ::google::protobuf::RepeatedPtrField< ::POGOProtos::Data::Player::Currency >*
      mutable_currencies();
  const ::google::protobuf::RepeatedPtrField< ::POGOProtos::Data::Player::Currency >&
      currencies() const;

  // optional int32 remaining_codename_claims = 15;
  void clear_remaining_codename_claims();
  static const int kRemainingCodenameClaimsFieldNumber = 15;
  ::google::protobuf::int32 remaining_codename_claims() const;
  void set_remaining_codename_claims(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:POGOProtos.Data.PlayerData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 creation_timestamp_ms_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::RepeatedField<int> tutorial_state_;
  mutable int _tutorial_state_cached_byte_size_;
  int team_;
  ::google::protobuf::int32 max_pokemon_storage_;
  ::POGOProtos::Data::Player::PlayerAvatar* avatar_;
  ::POGOProtos::Data::Player::DailyBonus* daily_bonus_;
  ::POGOProtos::Data::Player::EquippedBadge* equipped_badge_;
  ::google::protobuf::int32 max_item_storage_;
  ::google::protobuf::int32 remaining_codename_claims_;
  ::POGOProtos::Data::Player::ContactSettings* contact_settings_;
  ::google::protobuf::RepeatedPtrField< ::POGOProtos::Data::Player::Currency > currencies_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fData_2fPlayerData_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fData_2fPlayerData_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fData_2fPlayerData_2eproto();

  void InitAsDefaultInstance();
  static PlayerData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerData

// optional int64 creation_timestamp_ms = 1;
inline void PlayerData::clear_creation_timestamp_ms() {
  creation_timestamp_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerData::creation_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.creation_timestamp_ms)
  return creation_timestamp_ms_;
}
inline void PlayerData::set_creation_timestamp_ms(::google::protobuf::int64 value) {
  
  creation_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.creation_timestamp_ms)
}

// optional string username = 2;
inline void PlayerData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerData::username() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerData::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.username)
}
inline void PlayerData::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Data.PlayerData.username)
}
inline void PlayerData::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Data.PlayerData.username)
}
inline ::std::string* PlayerData::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerData::release_username() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PlayerData.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerData::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PlayerData.username)
}

// optional .POGOProtos.Enums.TeamColor team = 5;
inline void PlayerData::clear_team() {
  team_ = 0;
}
inline ::POGOProtos::Enums::TeamColor PlayerData::team() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.team)
  return static_cast< ::POGOProtos::Enums::TeamColor >(team_);
}
inline void PlayerData::set_team(::POGOProtos::Enums::TeamColor value) {
  
  team_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.team)
}

// repeated .POGOProtos.Enums.TutorialState tutorial_state = 7 [packed = true];
inline int PlayerData::tutorial_state_size() const {
  return tutorial_state_.size();
}
inline void PlayerData::clear_tutorial_state() {
  tutorial_state_.Clear();
}
inline ::POGOProtos::Enums::TutorialState PlayerData::tutorial_state(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.tutorial_state)
  return static_cast< ::POGOProtos::Enums::TutorialState >(tutorial_state_.Get(index));
}
inline void PlayerData::set_tutorial_state(int index, ::POGOProtos::Enums::TutorialState value) {
  tutorial_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.tutorial_state)
}
inline void PlayerData::add_tutorial_state(::POGOProtos::Enums::TutorialState value) {
  tutorial_state_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Data.PlayerData.tutorial_state)
}
inline const ::google::protobuf::RepeatedField<int>&
PlayerData::tutorial_state() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Data.PlayerData.tutorial_state)
  return tutorial_state_;
}
inline ::google::protobuf::RepeatedField<int>*
PlayerData::mutable_tutorial_state() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Data.PlayerData.tutorial_state)
  return &tutorial_state_;
}

// optional .POGOProtos.Data.Player.PlayerAvatar avatar = 8;
inline bool PlayerData::has_avatar() const {
  return !_is_default_instance_ && avatar_ != NULL;
}
inline void PlayerData::clear_avatar() {
  if (GetArenaNoVirtual() == NULL && avatar_ != NULL) delete avatar_;
  avatar_ = NULL;
}
inline const ::POGOProtos::Data::Player::PlayerAvatar& PlayerData::avatar() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.avatar)
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
inline ::POGOProtos::Data::Player::PlayerAvatar* PlayerData::mutable_avatar() {
  
  if (avatar_ == NULL) {
    avatar_ = new ::POGOProtos::Data::Player::PlayerAvatar;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.avatar)
  return avatar_;
}
inline ::POGOProtos::Data::Player::PlayerAvatar* PlayerData::release_avatar() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PlayerData.avatar)
  
  ::POGOProtos::Data::Player::PlayerAvatar* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_avatar(::POGOProtos::Data::Player::PlayerAvatar* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PlayerData.avatar)
}

// optional int32 max_pokemon_storage = 9;
inline void PlayerData::clear_max_pokemon_storage() {
  max_pokemon_storage_ = 0;
}
inline ::google::protobuf::int32 PlayerData::max_pokemon_storage() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.max_pokemon_storage)
  return max_pokemon_storage_;
}
inline void PlayerData::set_max_pokemon_storage(::google::protobuf::int32 value) {
  
  max_pokemon_storage_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.max_pokemon_storage)
}

// optional int32 max_item_storage = 10;
inline void PlayerData::clear_max_item_storage() {
  max_item_storage_ = 0;
}
inline ::google::protobuf::int32 PlayerData::max_item_storage() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.max_item_storage)
  return max_item_storage_;
}
inline void PlayerData::set_max_item_storage(::google::protobuf::int32 value) {
  
  max_item_storage_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.max_item_storage)
}

// optional .POGOProtos.Data.Player.DailyBonus daily_bonus = 11;
inline bool PlayerData::has_daily_bonus() const {
  return !_is_default_instance_ && daily_bonus_ != NULL;
}
inline void PlayerData::clear_daily_bonus() {
  if (GetArenaNoVirtual() == NULL && daily_bonus_ != NULL) delete daily_bonus_;
  daily_bonus_ = NULL;
}
inline const ::POGOProtos::Data::Player::DailyBonus& PlayerData::daily_bonus() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.daily_bonus)
  return daily_bonus_ != NULL ? *daily_bonus_ : *default_instance_->daily_bonus_;
}
inline ::POGOProtos::Data::Player::DailyBonus* PlayerData::mutable_daily_bonus() {
  
  if (daily_bonus_ == NULL) {
    daily_bonus_ = new ::POGOProtos::Data::Player::DailyBonus;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.daily_bonus)
  return daily_bonus_;
}
inline ::POGOProtos::Data::Player::DailyBonus* PlayerData::release_daily_bonus() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PlayerData.daily_bonus)
  
  ::POGOProtos::Data::Player::DailyBonus* temp = daily_bonus_;
  daily_bonus_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_daily_bonus(::POGOProtos::Data::Player::DailyBonus* daily_bonus) {
  delete daily_bonus_;
  daily_bonus_ = daily_bonus;
  if (daily_bonus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PlayerData.daily_bonus)
}

// optional .POGOProtos.Data.Player.EquippedBadge equipped_badge = 12;
inline bool PlayerData::has_equipped_badge() const {
  return !_is_default_instance_ && equipped_badge_ != NULL;
}
inline void PlayerData::clear_equipped_badge() {
  if (GetArenaNoVirtual() == NULL && equipped_badge_ != NULL) delete equipped_badge_;
  equipped_badge_ = NULL;
}
inline const ::POGOProtos::Data::Player::EquippedBadge& PlayerData::equipped_badge() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.equipped_badge)
  return equipped_badge_ != NULL ? *equipped_badge_ : *default_instance_->equipped_badge_;
}
inline ::POGOProtos::Data::Player::EquippedBadge* PlayerData::mutable_equipped_badge() {
  
  if (equipped_badge_ == NULL) {
    equipped_badge_ = new ::POGOProtos::Data::Player::EquippedBadge;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.equipped_badge)
  return equipped_badge_;
}
inline ::POGOProtos::Data::Player::EquippedBadge* PlayerData::release_equipped_badge() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PlayerData.equipped_badge)
  
  ::POGOProtos::Data::Player::EquippedBadge* temp = equipped_badge_;
  equipped_badge_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_equipped_badge(::POGOProtos::Data::Player::EquippedBadge* equipped_badge) {
  delete equipped_badge_;
  equipped_badge_ = equipped_badge;
  if (equipped_badge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PlayerData.equipped_badge)
}

// optional .POGOProtos.Data.Player.ContactSettings contact_settings = 13;
inline bool PlayerData::has_contact_settings() const {
  return !_is_default_instance_ && contact_settings_ != NULL;
}
inline void PlayerData::clear_contact_settings() {
  if (GetArenaNoVirtual() == NULL && contact_settings_ != NULL) delete contact_settings_;
  contact_settings_ = NULL;
}
inline const ::POGOProtos::Data::Player::ContactSettings& PlayerData::contact_settings() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.contact_settings)
  return contact_settings_ != NULL ? *contact_settings_ : *default_instance_->contact_settings_;
}
inline ::POGOProtos::Data::Player::ContactSettings* PlayerData::mutable_contact_settings() {
  
  if (contact_settings_ == NULL) {
    contact_settings_ = new ::POGOProtos::Data::Player::ContactSettings;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.contact_settings)
  return contact_settings_;
}
inline ::POGOProtos::Data::Player::ContactSettings* PlayerData::release_contact_settings() {
  // @@protoc_insertion_point(field_release:POGOProtos.Data.PlayerData.contact_settings)
  
  ::POGOProtos::Data::Player::ContactSettings* temp = contact_settings_;
  contact_settings_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_contact_settings(::POGOProtos::Data::Player::ContactSettings* contact_settings) {
  delete contact_settings_;
  contact_settings_ = contact_settings;
  if (contact_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Data.PlayerData.contact_settings)
}

// repeated .POGOProtos.Data.Player.Currency currencies = 14;
inline int PlayerData::currencies_size() const {
  return currencies_.size();
}
inline void PlayerData::clear_currencies() {
  currencies_.Clear();
}
inline const ::POGOProtos::Data::Player::Currency& PlayerData::currencies(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.currencies)
  return currencies_.Get(index);
}
inline ::POGOProtos::Data::Player::Currency* PlayerData::mutable_currencies(int index) {
  // @@protoc_insertion_point(field_mutable:POGOProtos.Data.PlayerData.currencies)
  return currencies_.Mutable(index);
}
inline ::POGOProtos::Data::Player::Currency* PlayerData::add_currencies() {
  // @@protoc_insertion_point(field_add:POGOProtos.Data.PlayerData.currencies)
  return currencies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::POGOProtos::Data::Player::Currency >*
PlayerData::mutable_currencies() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Data.PlayerData.currencies)
  return &currencies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::POGOProtos::Data::Player::Currency >&
PlayerData::currencies() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Data.PlayerData.currencies)
  return currencies_;
}

// optional int32 remaining_codename_claims = 15;
inline void PlayerData::clear_remaining_codename_claims() {
  remaining_codename_claims_ = 0;
}
inline ::google::protobuf::int32 PlayerData::remaining_codename_claims() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Data.PlayerData.remaining_codename_claims)
  return remaining_codename_claims_;
}
inline void PlayerData::set_remaining_codename_claims(::google::protobuf::int32 value) {
  
  remaining_codename_claims_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Data.PlayerData.remaining_codename_claims)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Data
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fData_2fPlayerData_2eproto__INCLUDED
