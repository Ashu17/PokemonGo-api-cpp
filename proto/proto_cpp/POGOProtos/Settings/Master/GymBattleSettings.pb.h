// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/GymBattleSettings.proto

#ifndef PROTOBUF_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {
namespace Master {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto();
void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto();

class GymBattleSettings;

// ===================================================================

class GymBattleSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Settings.Master.GymBattleSettings) */ {
 public:
  GymBattleSettings();
  virtual ~GymBattleSettings();

  GymBattleSettings(const GymBattleSettings& from);

  inline GymBattleSettings& operator=(const GymBattleSettings& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GymBattleSettings& default_instance();

  void Swap(GymBattleSettings* other);

  // implements Message ----------------------------------------------

  inline GymBattleSettings* New() const { return New(NULL); }

  GymBattleSettings* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GymBattleSettings& from);
  void MergeFrom(const GymBattleSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GymBattleSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float energy_per_sec = 1;
  void clear_energy_per_sec();
  static const int kEnergyPerSecFieldNumber = 1;
  float energy_per_sec() const;
  void set_energy_per_sec(float value);

  // optional float dodge_energy_cost = 2;
  void clear_dodge_energy_cost();
  static const int kDodgeEnergyCostFieldNumber = 2;
  float dodge_energy_cost() const;
  void set_dodge_energy_cost(float value);

  // optional float retarget_seconds = 3;
  void clear_retarget_seconds();
  static const int kRetargetSecondsFieldNumber = 3;
  float retarget_seconds() const;
  void set_retarget_seconds(float value);

  // optional float enemy_attack_interval = 4;
  void clear_enemy_attack_interval();
  static const int kEnemyAttackIntervalFieldNumber = 4;
  float enemy_attack_interval() const;
  void set_enemy_attack_interval(float value);

  // optional float attack_server_interval = 5;
  void clear_attack_server_interval();
  static const int kAttackServerIntervalFieldNumber = 5;
  float attack_server_interval() const;
  void set_attack_server_interval(float value);

  // optional float round_duration_seconds = 6;
  void clear_round_duration_seconds();
  static const int kRoundDurationSecondsFieldNumber = 6;
  float round_duration_seconds() const;
  void set_round_duration_seconds(float value);

  // optional float bonus_time_per_ally_seconds = 7;
  void clear_bonus_time_per_ally_seconds();
  static const int kBonusTimePerAllySecondsFieldNumber = 7;
  float bonus_time_per_ally_seconds() const;
  void set_bonus_time_per_ally_seconds(float value);

  // optional int32 maximum_attackers_per_battle = 8;
  void clear_maximum_attackers_per_battle();
  static const int kMaximumAttackersPerBattleFieldNumber = 8;
  ::google::protobuf::int32 maximum_attackers_per_battle() const;
  void set_maximum_attackers_per_battle(::google::protobuf::int32 value);

  // optional float same_type_attack_bonus_multiplier = 9;
  void clear_same_type_attack_bonus_multiplier();
  static const int kSameTypeAttackBonusMultiplierFieldNumber = 9;
  float same_type_attack_bonus_multiplier() const;
  void set_same_type_attack_bonus_multiplier(float value);

  // optional int32 maximum_energy = 10;
  void clear_maximum_energy();
  static const int kMaximumEnergyFieldNumber = 10;
  ::google::protobuf::int32 maximum_energy() const;
  void set_maximum_energy(::google::protobuf::int32 value);

  // optional float energy_delta_per_health_lost = 11;
  void clear_energy_delta_per_health_lost();
  static const int kEnergyDeltaPerHealthLostFieldNumber = 11;
  float energy_delta_per_health_lost() const;
  void set_energy_delta_per_health_lost(float value);

  // optional int32 dodge_duration_ms = 12;
  void clear_dodge_duration_ms();
  static const int kDodgeDurationMsFieldNumber = 12;
  ::google::protobuf::int32 dodge_duration_ms() const;
  void set_dodge_duration_ms(::google::protobuf::int32 value);

  // optional int32 minimum_player_level = 13;
  void clear_minimum_player_level();
  static const int kMinimumPlayerLevelFieldNumber = 13;
  ::google::protobuf::int32 minimum_player_level() const;
  void set_minimum_player_level(::google::protobuf::int32 value);

  // optional int32 swap_duration_ms = 14;
  void clear_swap_duration_ms();
  static const int kSwapDurationMsFieldNumber = 14;
  ::google::protobuf::int32 swap_duration_ms() const;
  void set_swap_duration_ms(::google::protobuf::int32 value);

  // optional float dodge_damage_reduction_percent = 15;
  void clear_dodge_damage_reduction_percent();
  static const int kDodgeDamageReductionPercentFieldNumber = 15;
  float dodge_damage_reduction_percent() const;
  void set_dodge_damage_reduction_percent(float value);

  // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.GymBattleSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float energy_per_sec_;
  float dodge_energy_cost_;
  float retarget_seconds_;
  float enemy_attack_interval_;
  float attack_server_interval_;
  float round_duration_seconds_;
  float bonus_time_per_ally_seconds_;
  ::google::protobuf::int32 maximum_attackers_per_battle_;
  float same_type_attack_bonus_multiplier_;
  ::google::protobuf::int32 maximum_energy_;
  float energy_delta_per_health_lost_;
  ::google::protobuf::int32 dodge_duration_ms_;
  ::google::protobuf::int32 minimum_player_level_;
  ::google::protobuf::int32 swap_duration_ms_;
  float dodge_damage_reduction_percent_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto();

  void InitAsDefaultInstance();
  static GymBattleSettings* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GymBattleSettings

// optional float energy_per_sec = 1;
inline void GymBattleSettings::clear_energy_per_sec() {
  energy_per_sec_ = 0;
}
inline float GymBattleSettings::energy_per_sec() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.energy_per_sec)
  return energy_per_sec_;
}
inline void GymBattleSettings::set_energy_per_sec(float value) {
  
  energy_per_sec_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.energy_per_sec)
}

// optional float dodge_energy_cost = 2;
inline void GymBattleSettings::clear_dodge_energy_cost() {
  dodge_energy_cost_ = 0;
}
inline float GymBattleSettings::dodge_energy_cost() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.dodge_energy_cost)
  return dodge_energy_cost_;
}
inline void GymBattleSettings::set_dodge_energy_cost(float value) {
  
  dodge_energy_cost_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.dodge_energy_cost)
}

// optional float retarget_seconds = 3;
inline void GymBattleSettings::clear_retarget_seconds() {
  retarget_seconds_ = 0;
}
inline float GymBattleSettings::retarget_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.retarget_seconds)
  return retarget_seconds_;
}
inline void GymBattleSettings::set_retarget_seconds(float value) {
  
  retarget_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.retarget_seconds)
}

// optional float enemy_attack_interval = 4;
inline void GymBattleSettings::clear_enemy_attack_interval() {
  enemy_attack_interval_ = 0;
}
inline float GymBattleSettings::enemy_attack_interval() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.enemy_attack_interval)
  return enemy_attack_interval_;
}
inline void GymBattleSettings::set_enemy_attack_interval(float value) {
  
  enemy_attack_interval_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.enemy_attack_interval)
}

// optional float attack_server_interval = 5;
inline void GymBattleSettings::clear_attack_server_interval() {
  attack_server_interval_ = 0;
}
inline float GymBattleSettings::attack_server_interval() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.attack_server_interval)
  return attack_server_interval_;
}
inline void GymBattleSettings::set_attack_server_interval(float value) {
  
  attack_server_interval_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.attack_server_interval)
}

// optional float round_duration_seconds = 6;
inline void GymBattleSettings::clear_round_duration_seconds() {
  round_duration_seconds_ = 0;
}
inline float GymBattleSettings::round_duration_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.round_duration_seconds)
  return round_duration_seconds_;
}
inline void GymBattleSettings::set_round_duration_seconds(float value) {
  
  round_duration_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.round_duration_seconds)
}

// optional float bonus_time_per_ally_seconds = 7;
inline void GymBattleSettings::clear_bonus_time_per_ally_seconds() {
  bonus_time_per_ally_seconds_ = 0;
}
inline float GymBattleSettings::bonus_time_per_ally_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.bonus_time_per_ally_seconds)
  return bonus_time_per_ally_seconds_;
}
inline void GymBattleSettings::set_bonus_time_per_ally_seconds(float value) {
  
  bonus_time_per_ally_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.bonus_time_per_ally_seconds)
}

// optional int32 maximum_attackers_per_battle = 8;
inline void GymBattleSettings::clear_maximum_attackers_per_battle() {
  maximum_attackers_per_battle_ = 0;
}
inline ::google::protobuf::int32 GymBattleSettings::maximum_attackers_per_battle() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.maximum_attackers_per_battle)
  return maximum_attackers_per_battle_;
}
inline void GymBattleSettings::set_maximum_attackers_per_battle(::google::protobuf::int32 value) {
  
  maximum_attackers_per_battle_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.maximum_attackers_per_battle)
}

// optional float same_type_attack_bonus_multiplier = 9;
inline void GymBattleSettings::clear_same_type_attack_bonus_multiplier() {
  same_type_attack_bonus_multiplier_ = 0;
}
inline float GymBattleSettings::same_type_attack_bonus_multiplier() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.same_type_attack_bonus_multiplier)
  return same_type_attack_bonus_multiplier_;
}
inline void GymBattleSettings::set_same_type_attack_bonus_multiplier(float value) {
  
  same_type_attack_bonus_multiplier_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.same_type_attack_bonus_multiplier)
}

// optional int32 maximum_energy = 10;
inline void GymBattleSettings::clear_maximum_energy() {
  maximum_energy_ = 0;
}
inline ::google::protobuf::int32 GymBattleSettings::maximum_energy() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.maximum_energy)
  return maximum_energy_;
}
inline void GymBattleSettings::set_maximum_energy(::google::protobuf::int32 value) {
  
  maximum_energy_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.maximum_energy)
}

// optional float energy_delta_per_health_lost = 11;
inline void GymBattleSettings::clear_energy_delta_per_health_lost() {
  energy_delta_per_health_lost_ = 0;
}
inline float GymBattleSettings::energy_delta_per_health_lost() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.energy_delta_per_health_lost)
  return energy_delta_per_health_lost_;
}
inline void GymBattleSettings::set_energy_delta_per_health_lost(float value) {
  
  energy_delta_per_health_lost_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.energy_delta_per_health_lost)
}

// optional int32 dodge_duration_ms = 12;
inline void GymBattleSettings::clear_dodge_duration_ms() {
  dodge_duration_ms_ = 0;
}
inline ::google::protobuf::int32 GymBattleSettings::dodge_duration_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.dodge_duration_ms)
  return dodge_duration_ms_;
}
inline void GymBattleSettings::set_dodge_duration_ms(::google::protobuf::int32 value) {
  
  dodge_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.dodge_duration_ms)
}

// optional int32 minimum_player_level = 13;
inline void GymBattleSettings::clear_minimum_player_level() {
  minimum_player_level_ = 0;
}
inline ::google::protobuf::int32 GymBattleSettings::minimum_player_level() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.minimum_player_level)
  return minimum_player_level_;
}
inline void GymBattleSettings::set_minimum_player_level(::google::protobuf::int32 value) {
  
  minimum_player_level_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.minimum_player_level)
}

// optional int32 swap_duration_ms = 14;
inline void GymBattleSettings::clear_swap_duration_ms() {
  swap_duration_ms_ = 0;
}
inline ::google::protobuf::int32 GymBattleSettings::swap_duration_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.swap_duration_ms)
  return swap_duration_ms_;
}
inline void GymBattleSettings::set_swap_duration_ms(::google::protobuf::int32 value) {
  
  swap_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.swap_duration_ms)
}

// optional float dodge_damage_reduction_percent = 15;
inline void GymBattleSettings::clear_dodge_damage_reduction_percent() {
  dodge_damage_reduction_percent_ = 0;
}
inline float GymBattleSettings::dodge_damage_reduction_percent() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.dodge_damage_reduction_percent)
  return dodge_damage_reduction_percent_;
}
inline void GymBattleSettings::set_dodge_damage_reduction_percent(float value) {
  
  dodge_damage_reduction_percent_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.dodge_damage_reduction_percent)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Master
}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto__INCLUDED
