// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/Pokemon/CameraAttributes.proto

#ifndef PROTOBUF_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {
namespace Master {
namespace Pokemon {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto();
void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto();

class CameraAttributes;

// ===================================================================

class CameraAttributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Settings.Master.Pokemon.CameraAttributes) */ {
 public:
  CameraAttributes();
  virtual ~CameraAttributes();

  CameraAttributes(const CameraAttributes& from);

  inline CameraAttributes& operator=(const CameraAttributes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraAttributes& default_instance();

  void Swap(CameraAttributes* other);

  // implements Message ----------------------------------------------

  inline CameraAttributes* New() const { return New(NULL); }

  CameraAttributes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraAttributes& from);
  void MergeFrom(const CameraAttributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float disk_radius_m = 1;
  void clear_disk_radius_m();
  static const int kDiskRadiusMFieldNumber = 1;
  float disk_radius_m() const;
  void set_disk_radius_m(float value);

  // optional float cylinder_radius_m = 2;
  void clear_cylinder_radius_m();
  static const int kCylinderRadiusMFieldNumber = 2;
  float cylinder_radius_m() const;
  void set_cylinder_radius_m(float value);

  // optional float cylinder_height_m = 3;
  void clear_cylinder_height_m();
  static const int kCylinderHeightMFieldNumber = 3;
  float cylinder_height_m() const;
  void set_cylinder_height_m(float value);

  // optional float cylinder_ground_m = 4;
  void clear_cylinder_ground_m();
  static const int kCylinderGroundMFieldNumber = 4;
  float cylinder_ground_m() const;
  void set_cylinder_ground_m(float value);

  // optional float shoulder_mode_scale = 5;
  void clear_shoulder_mode_scale();
  static const int kShoulderModeScaleFieldNumber = 5;
  float shoulder_mode_scale() const;
  void set_shoulder_mode_scale(float value);

  // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float disk_radius_m_;
  float cylinder_radius_m_;
  float cylinder_height_m_;
  float cylinder_ground_m_;
  float shoulder_mode_scale_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto();

  void InitAsDefaultInstance();
  static CameraAttributes* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraAttributes

// optional float disk_radius_m = 1;
inline void CameraAttributes::clear_disk_radius_m() {
  disk_radius_m_ = 0;
}
inline float CameraAttributes::disk_radius_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.CameraAttributes.disk_radius_m)
  return disk_radius_m_;
}
inline void CameraAttributes::set_disk_radius_m(float value) {
  
  disk_radius_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.CameraAttributes.disk_radius_m)
}

// optional float cylinder_radius_m = 2;
inline void CameraAttributes::clear_cylinder_radius_m() {
  cylinder_radius_m_ = 0;
}
inline float CameraAttributes::cylinder_radius_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_radius_m)
  return cylinder_radius_m_;
}
inline void CameraAttributes::set_cylinder_radius_m(float value) {
  
  cylinder_radius_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_radius_m)
}

// optional float cylinder_height_m = 3;
inline void CameraAttributes::clear_cylinder_height_m() {
  cylinder_height_m_ = 0;
}
inline float CameraAttributes::cylinder_height_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_height_m)
  return cylinder_height_m_;
}
inline void CameraAttributes::set_cylinder_height_m(float value) {
  
  cylinder_height_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_height_m)
}

// optional float cylinder_ground_m = 4;
inline void CameraAttributes::clear_cylinder_ground_m() {
  cylinder_ground_m_ = 0;
}
inline float CameraAttributes::cylinder_ground_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_ground_m)
  return cylinder_ground_m_;
}
inline void CameraAttributes::set_cylinder_ground_m(float value) {
  
  cylinder_ground_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_ground_m)
}

// optional float shoulder_mode_scale = 5;
inline void CameraAttributes::clear_shoulder_mode_scale() {
  shoulder_mode_scale_ = 0;
}
inline float CameraAttributes::shoulder_mode_scale() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.CameraAttributes.shoulder_mode_scale)
  return shoulder_mode_scale_;
}
inline void CameraAttributes::set_shoulder_mode_scale(float value) {
  
  shoulder_mode_scale_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.CameraAttributes.shoulder_mode_scale)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pokemon
}  // namespace Master
}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto__INCLUDED
