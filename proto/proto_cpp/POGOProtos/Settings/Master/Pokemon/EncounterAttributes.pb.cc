// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/Pokemon/EncounterAttributes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Settings/Master/Pokemon/EncounterAttributes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {
namespace Master {
namespace Pokemon {

namespace {

const ::google::protobuf::Descriptor* EncounterAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncounterAttributes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto() {
  protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Settings/Master/Pokemon/EncounterAttributes.proto");
  GOOGLE_CHECK(file != NULL);
  EncounterAttributes_descriptor_ = file->message_type(0);
  static const int EncounterAttributes_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncounterAttributes, base_capture_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncounterAttributes, base_flee_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncounterAttributes, collision_radius_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncounterAttributes, collision_height_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncounterAttributes, collision_head_radius_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncounterAttributes, movement_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncounterAttributes, movement_timer_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncounterAttributes, jump_time_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncounterAttributes, attack_timer_s_),
  };
  EncounterAttributes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EncounterAttributes_descriptor_,
      EncounterAttributes::default_instance_,
      EncounterAttributes_offsets_,
      -1,
      -1,
      -1,
      sizeof(EncounterAttributes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncounterAttributes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncounterAttributes, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EncounterAttributes_descriptor_, &EncounterAttributes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto() {
  delete EncounterAttributes::default_instance_;
  delete EncounterAttributes_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonMovementType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n<POGOProtos/Settings/Master/Pokemon/Enc"
    "ounterAttributes.proto\022\"POGOProtos.Setti"
    "ngs.Master.Pokemon\032*POGOProtos/Enums/Pok"
    "emonMovementType.proto\"\246\002\n\023EncounterAttr"
    "ibutes\022\031\n\021base_capture_rate\030\001 \001(\002\022\026\n\016bas"
    "e_flee_rate\030\002 \001(\002\022\032\n\022collision_radius_m\030"
    "\003 \001(\002\022\032\n\022collision_height_m\030\004 \001(\002\022\037\n\027col"
    "lision_head_radius_m\030\005 \001(\002\022<\n\rmovement_t"
    "ype\030\006 \001(\0162%.POGOProtos.Enums.PokemonMove"
    "mentType\022\030\n\020movement_timer_s\030\007 \001(\002\022\023\n\013ju"
    "mp_time_s\030\010 \001(\002\022\026\n\016attack_timer_s\030\t \001(\002b"
    "\006proto3", 447);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Settings/Master/Pokemon/EncounterAttributes.proto", &protobuf_RegisterTypes);
  EncounterAttributes::default_instance_ = new EncounterAttributes();
  EncounterAttributes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto() {
    protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncounterAttributes::kBaseCaptureRateFieldNumber;
const int EncounterAttributes::kBaseFleeRateFieldNumber;
const int EncounterAttributes::kCollisionRadiusMFieldNumber;
const int EncounterAttributes::kCollisionHeightMFieldNumber;
const int EncounterAttributes::kCollisionHeadRadiusMFieldNumber;
const int EncounterAttributes::kMovementTypeFieldNumber;
const int EncounterAttributes::kMovementTimerSFieldNumber;
const int EncounterAttributes::kJumpTimeSFieldNumber;
const int EncounterAttributes::kAttackTimerSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncounterAttributes::EncounterAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
}

void EncounterAttributes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EncounterAttributes::EncounterAttributes(const EncounterAttributes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
}

void EncounterAttributes::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_capture_rate_ = 0;
  base_flee_rate_ = 0;
  collision_radius_m_ = 0;
  collision_height_m_ = 0;
  collision_head_radius_m_ = 0;
  movement_type_ = 0;
  movement_timer_s_ = 0;
  jump_time_s_ = 0;
  attack_timer_s_ = 0;
}

EncounterAttributes::~EncounterAttributes() {
  // @@protoc_insertion_point(destructor:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  SharedDtor();
}

void EncounterAttributes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EncounterAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncounterAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncounterAttributes_descriptor_;
}

const EncounterAttributes& EncounterAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto();
  return *default_instance_;
}

EncounterAttributes* EncounterAttributes::default_instance_ = NULL;

EncounterAttributes* EncounterAttributes::New(::google::protobuf::Arena* arena) const {
  EncounterAttributes* n = new EncounterAttributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EncounterAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EncounterAttributes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EncounterAttributes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(base_capture_rate_, jump_time_s_);
  attack_timer_s_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool EncounterAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base_capture_rate = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_capture_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_base_flee_rate;
        break;
      }

      // optional float base_flee_rate = 2;
      case 2: {
        if (tag == 21) {
         parse_base_flee_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_flee_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_collision_radius_m;
        break;
      }

      // optional float collision_radius_m = 3;
      case 3: {
        if (tag == 29) {
         parse_collision_radius_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_radius_m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_collision_height_m;
        break;
      }

      // optional float collision_height_m = 4;
      case 4: {
        if (tag == 37) {
         parse_collision_height_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_height_m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_collision_head_radius_m;
        break;
      }

      // optional float collision_head_radius_m = 5;
      case 5: {
        if (tag == 45) {
         parse_collision_head_radius_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_head_radius_m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_movement_type;
        break;
      }

      // optional .POGOProtos.Enums.PokemonMovementType movement_type = 6;
      case 6: {
        if (tag == 48) {
         parse_movement_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_movement_type(static_cast< ::POGOProtos::Enums::PokemonMovementType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_movement_timer_s;
        break;
      }

      // optional float movement_timer_s = 7;
      case 7: {
        if (tag == 61) {
         parse_movement_timer_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movement_timer_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_jump_time_s;
        break;
      }

      // optional float jump_time_s = 8;
      case 8: {
        if (tag == 69) {
         parse_jump_time_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jump_time_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_attack_timer_s;
        break;
      }

      // optional float attack_timer_s = 9;
      case 9: {
        if (tag == 77) {
         parse_attack_timer_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attack_timer_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  return false;
#undef DO_
}

void EncounterAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  // optional float base_capture_rate = 1;
  if (this->base_capture_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base_capture_rate(), output);
  }

  // optional float base_flee_rate = 2;
  if (this->base_flee_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->base_flee_rate(), output);
  }

  // optional float collision_radius_m = 3;
  if (this->collision_radius_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->collision_radius_m(), output);
  }

  // optional float collision_height_m = 4;
  if (this->collision_height_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->collision_height_m(), output);
  }

  // optional float collision_head_radius_m = 5;
  if (this->collision_head_radius_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->collision_head_radius_m(), output);
  }

  // optional .POGOProtos.Enums.PokemonMovementType movement_type = 6;
  if (this->movement_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->movement_type(), output);
  }

  // optional float movement_timer_s = 7;
  if (this->movement_timer_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->movement_timer_s(), output);
  }

  // optional float jump_time_s = 8;
  if (this->jump_time_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->jump_time_s(), output);
  }

  // optional float attack_timer_s = 9;
  if (this->attack_timer_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->attack_timer_s(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
}

::google::protobuf::uint8* EncounterAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  // optional float base_capture_rate = 1;
  if (this->base_capture_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base_capture_rate(), target);
  }

  // optional float base_flee_rate = 2;
  if (this->base_flee_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->base_flee_rate(), target);
  }

  // optional float collision_radius_m = 3;
  if (this->collision_radius_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->collision_radius_m(), target);
  }

  // optional float collision_height_m = 4;
  if (this->collision_height_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->collision_height_m(), target);
  }

  // optional float collision_head_radius_m = 5;
  if (this->collision_head_radius_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->collision_head_radius_m(), target);
  }

  // optional .POGOProtos.Enums.PokemonMovementType movement_type = 6;
  if (this->movement_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->movement_type(), target);
  }

  // optional float movement_timer_s = 7;
  if (this->movement_timer_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->movement_timer_s(), target);
  }

  // optional float jump_time_s = 8;
  if (this->jump_time_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->jump_time_s(), target);
  }

  // optional float attack_timer_s = 9;
  if (this->attack_timer_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->attack_timer_s(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  return target;
}

int EncounterAttributes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  int total_size = 0;

  // optional float base_capture_rate = 1;
  if (this->base_capture_rate() != 0) {
    total_size += 1 + 4;
  }

  // optional float base_flee_rate = 2;
  if (this->base_flee_rate() != 0) {
    total_size += 1 + 4;
  }

  // optional float collision_radius_m = 3;
  if (this->collision_radius_m() != 0) {
    total_size += 1 + 4;
  }

  // optional float collision_height_m = 4;
  if (this->collision_height_m() != 0) {
    total_size += 1 + 4;
  }

  // optional float collision_head_radius_m = 5;
  if (this->collision_head_radius_m() != 0) {
    total_size += 1 + 4;
  }

  // optional .POGOProtos.Enums.PokemonMovementType movement_type = 6;
  if (this->movement_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->movement_type());
  }

  // optional float movement_timer_s = 7;
  if (this->movement_timer_s() != 0) {
    total_size += 1 + 4;
  }

  // optional float jump_time_s = 8;
  if (this->jump_time_s() != 0) {
    total_size += 1 + 4;
  }

  // optional float attack_timer_s = 9;
  if (this->attack_timer_s() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncounterAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EncounterAttributes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EncounterAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
    MergeFrom(*source);
  }
}

void EncounterAttributes::MergeFrom(const EncounterAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.base_capture_rate() != 0) {
    set_base_capture_rate(from.base_capture_rate());
  }
  if (from.base_flee_rate() != 0) {
    set_base_flee_rate(from.base_flee_rate());
  }
  if (from.collision_radius_m() != 0) {
    set_collision_radius_m(from.collision_radius_m());
  }
  if (from.collision_height_m() != 0) {
    set_collision_height_m(from.collision_height_m());
  }
  if (from.collision_head_radius_m() != 0) {
    set_collision_head_radius_m(from.collision_head_radius_m());
  }
  if (from.movement_type() != 0) {
    set_movement_type(from.movement_type());
  }
  if (from.movement_timer_s() != 0) {
    set_movement_timer_s(from.movement_timer_s());
  }
  if (from.jump_time_s() != 0) {
    set_jump_time_s(from.jump_time_s());
  }
  if (from.attack_timer_s() != 0) {
    set_attack_timer_s(from.attack_timer_s());
  }
}

void EncounterAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncounterAttributes::CopyFrom(const EncounterAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Settings.Master.Pokemon.EncounterAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncounterAttributes::IsInitialized() const {

  return true;
}

void EncounterAttributes::Swap(EncounterAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncounterAttributes::InternalSwap(EncounterAttributes* other) {
  std::swap(base_capture_rate_, other->base_capture_rate_);
  std::swap(base_flee_rate_, other->base_flee_rate_);
  std::swap(collision_radius_m_, other->collision_radius_m_);
  std::swap(collision_height_m_, other->collision_height_m_);
  std::swap(collision_head_radius_m_, other->collision_head_radius_m_);
  std::swap(movement_type_, other->movement_type_);
  std::swap(movement_timer_s_, other->movement_timer_s_);
  std::swap(jump_time_s_, other->jump_time_s_);
  std::swap(attack_timer_s_, other->attack_timer_s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EncounterAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncounterAttributes_descriptor_;
  metadata.reflection = EncounterAttributes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EncounterAttributes

// optional float base_capture_rate = 1;
void EncounterAttributes::clear_base_capture_rate() {
  base_capture_rate_ = 0;
}
 float EncounterAttributes::base_capture_rate() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.base_capture_rate)
  return base_capture_rate_;
}
 void EncounterAttributes::set_base_capture_rate(float value) {
  
  base_capture_rate_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.base_capture_rate)
}

// optional float base_flee_rate = 2;
void EncounterAttributes::clear_base_flee_rate() {
  base_flee_rate_ = 0;
}
 float EncounterAttributes::base_flee_rate() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.base_flee_rate)
  return base_flee_rate_;
}
 void EncounterAttributes::set_base_flee_rate(float value) {
  
  base_flee_rate_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.base_flee_rate)
}

// optional float collision_radius_m = 3;
void EncounterAttributes::clear_collision_radius_m() {
  collision_radius_m_ = 0;
}
 float EncounterAttributes::collision_radius_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.collision_radius_m)
  return collision_radius_m_;
}
 void EncounterAttributes::set_collision_radius_m(float value) {
  
  collision_radius_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.collision_radius_m)
}

// optional float collision_height_m = 4;
void EncounterAttributes::clear_collision_height_m() {
  collision_height_m_ = 0;
}
 float EncounterAttributes::collision_height_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.collision_height_m)
  return collision_height_m_;
}
 void EncounterAttributes::set_collision_height_m(float value) {
  
  collision_height_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.collision_height_m)
}

// optional float collision_head_radius_m = 5;
void EncounterAttributes::clear_collision_head_radius_m() {
  collision_head_radius_m_ = 0;
}
 float EncounterAttributes::collision_head_radius_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.collision_head_radius_m)
  return collision_head_radius_m_;
}
 void EncounterAttributes::set_collision_head_radius_m(float value) {
  
  collision_head_radius_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.collision_head_radius_m)
}

// optional .POGOProtos.Enums.PokemonMovementType movement_type = 6;
void EncounterAttributes::clear_movement_type() {
  movement_type_ = 0;
}
 ::POGOProtos::Enums::PokemonMovementType EncounterAttributes::movement_type() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.movement_type)
  return static_cast< ::POGOProtos::Enums::PokemonMovementType >(movement_type_);
}
 void EncounterAttributes::set_movement_type(::POGOProtos::Enums::PokemonMovementType value) {
  
  movement_type_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.movement_type)
}

// optional float movement_timer_s = 7;
void EncounterAttributes::clear_movement_timer_s() {
  movement_timer_s_ = 0;
}
 float EncounterAttributes::movement_timer_s() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.movement_timer_s)
  return movement_timer_s_;
}
 void EncounterAttributes::set_movement_timer_s(float value) {
  
  movement_timer_s_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.movement_timer_s)
}

// optional float jump_time_s = 8;
void EncounterAttributes::clear_jump_time_s() {
  jump_time_s_ = 0;
}
 float EncounterAttributes::jump_time_s() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.jump_time_s)
  return jump_time_s_;
}
 void EncounterAttributes::set_jump_time_s(float value) {
  
  jump_time_s_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.jump_time_s)
}

// optional float attack_timer_s = 9;
void EncounterAttributes::clear_attack_timer_s() {
  attack_timer_s_ = 0;
}
 float EncounterAttributes::attack_timer_s() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.attack_timer_s)
  return attack_timer_s_;
}
 void EncounterAttributes::set_attack_timer_s(float value) {
  
  attack_timer_s_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.EncounterAttributes.attack_timer_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pokemon
}  // namespace Master
}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
