// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/Pokemon/CameraAttributes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Settings/Master/Pokemon/CameraAttributes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {
namespace Master {
namespace Pokemon {

namespace {

const ::google::protobuf::Descriptor* CameraAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraAttributes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto() {
  protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Settings/Master/Pokemon/CameraAttributes.proto");
  GOOGLE_CHECK(file != NULL);
  CameraAttributes_descriptor_ = file->message_type(0);
  static const int CameraAttributes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraAttributes, disk_radius_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraAttributes, cylinder_radius_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraAttributes, cylinder_height_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraAttributes, cylinder_ground_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraAttributes, shoulder_mode_scale_),
  };
  CameraAttributes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraAttributes_descriptor_,
      CameraAttributes::default_instance_,
      CameraAttributes_offsets_,
      -1,
      -1,
      -1,
      sizeof(CameraAttributes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraAttributes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraAttributes, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraAttributes_descriptor_, &CameraAttributes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto() {
  delete CameraAttributes::default_instance_;
  delete CameraAttributes_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n9POGOProtos/Settings/Master/Pokemon/Cam"
    "eraAttributes.proto\022\"POGOProtos.Settings"
    ".Master.Pokemon\"\227\001\n\020CameraAttributes\022\025\n\r"
    "disk_radius_m\030\001 \001(\002\022\031\n\021cylinder_radius_m"
    "\030\002 \001(\002\022\031\n\021cylinder_height_m\030\003 \001(\002\022\031\n\021cyl"
    "inder_ground_m\030\004 \001(\002\022\033\n\023shoulder_mode_sc"
    "ale\030\005 \001(\002b\006proto3", 257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Settings/Master/Pokemon/CameraAttributes.proto", &protobuf_RegisterTypes);
  CameraAttributes::default_instance_ = new CameraAttributes();
  CameraAttributes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto() {
    protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraAttributes::kDiskRadiusMFieldNumber;
const int CameraAttributes::kCylinderRadiusMFieldNumber;
const int CameraAttributes::kCylinderHeightMFieldNumber;
const int CameraAttributes::kCylinderGroundMFieldNumber;
const int CameraAttributes::kShoulderModeScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraAttributes::CameraAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
}

void CameraAttributes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CameraAttributes::CameraAttributes(const CameraAttributes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
}

void CameraAttributes::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  disk_radius_m_ = 0;
  cylinder_radius_m_ = 0;
  cylinder_height_m_ = 0;
  cylinder_ground_m_ = 0;
  shoulder_mode_scale_ = 0;
}

CameraAttributes::~CameraAttributes() {
  // @@protoc_insertion_point(destructor:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  SharedDtor();
}

void CameraAttributes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraAttributes_descriptor_;
}

const CameraAttributes& CameraAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto();
  return *default_instance_;
}

CameraAttributes* CameraAttributes::default_instance_ = NULL;

CameraAttributes* CameraAttributes::New(::google::protobuf::Arena* arena) const {
  CameraAttributes* n = new CameraAttributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CameraAttributes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CameraAttributes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(disk_radius_m_, shoulder_mode_scale_);

#undef ZR_HELPER_
#undef ZR_

}

bool CameraAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float disk_radius_m = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &disk_radius_m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_cylinder_radius_m;
        break;
      }

      // optional float cylinder_radius_m = 2;
      case 2: {
        if (tag == 21) {
         parse_cylinder_radius_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cylinder_radius_m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_cylinder_height_m;
        break;
      }

      // optional float cylinder_height_m = 3;
      case 3: {
        if (tag == 29) {
         parse_cylinder_height_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cylinder_height_m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cylinder_ground_m;
        break;
      }

      // optional float cylinder_ground_m = 4;
      case 4: {
        if (tag == 37) {
         parse_cylinder_ground_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cylinder_ground_m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_shoulder_mode_scale;
        break;
      }

      // optional float shoulder_mode_scale = 5;
      case 5: {
        if (tag == 45) {
         parse_shoulder_mode_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shoulder_mode_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  return false;
#undef DO_
}

void CameraAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  // optional float disk_radius_m = 1;
  if (this->disk_radius_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->disk_radius_m(), output);
  }

  // optional float cylinder_radius_m = 2;
  if (this->cylinder_radius_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cylinder_radius_m(), output);
  }

  // optional float cylinder_height_m = 3;
  if (this->cylinder_height_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cylinder_height_m(), output);
  }

  // optional float cylinder_ground_m = 4;
  if (this->cylinder_ground_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cylinder_ground_m(), output);
  }

  // optional float shoulder_mode_scale = 5;
  if (this->shoulder_mode_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->shoulder_mode_scale(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
}

::google::protobuf::uint8* CameraAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  // optional float disk_radius_m = 1;
  if (this->disk_radius_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->disk_radius_m(), target);
  }

  // optional float cylinder_radius_m = 2;
  if (this->cylinder_radius_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cylinder_radius_m(), target);
  }

  // optional float cylinder_height_m = 3;
  if (this->cylinder_height_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cylinder_height_m(), target);
  }

  // optional float cylinder_ground_m = 4;
  if (this->cylinder_ground_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cylinder_ground_m(), target);
  }

  // optional float shoulder_mode_scale = 5;
  if (this->shoulder_mode_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->shoulder_mode_scale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  return target;
}

int CameraAttributes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  int total_size = 0;

  // optional float disk_radius_m = 1;
  if (this->disk_radius_m() != 0) {
    total_size += 1 + 4;
  }

  // optional float cylinder_radius_m = 2;
  if (this->cylinder_radius_m() != 0) {
    total_size += 1 + 4;
  }

  // optional float cylinder_height_m = 3;
  if (this->cylinder_height_m() != 0) {
    total_size += 1 + 4;
  }

  // optional float cylinder_ground_m = 4;
  if (this->cylinder_ground_m() != 0) {
    total_size += 1 + 4;
  }

  // optional float shoulder_mode_scale = 5;
  if (this->shoulder_mode_scale() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CameraAttributes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
    MergeFrom(*source);
  }
}

void CameraAttributes::MergeFrom(const CameraAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.disk_radius_m() != 0) {
    set_disk_radius_m(from.disk_radius_m());
  }
  if (from.cylinder_radius_m() != 0) {
    set_cylinder_radius_m(from.cylinder_radius_m());
  }
  if (from.cylinder_height_m() != 0) {
    set_cylinder_height_m(from.cylinder_height_m());
  }
  if (from.cylinder_ground_m() != 0) {
    set_cylinder_ground_m(from.cylinder_ground_m());
  }
  if (from.shoulder_mode_scale() != 0) {
    set_shoulder_mode_scale(from.shoulder_mode_scale());
  }
}

void CameraAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraAttributes::CopyFrom(const CameraAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraAttributes::IsInitialized() const {

  return true;
}

void CameraAttributes::Swap(CameraAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraAttributes::InternalSwap(CameraAttributes* other) {
  std::swap(disk_radius_m_, other->disk_radius_m_);
  std::swap(cylinder_radius_m_, other->cylinder_radius_m_);
  std::swap(cylinder_height_m_, other->cylinder_height_m_);
  std::swap(cylinder_ground_m_, other->cylinder_ground_m_);
  std::swap(shoulder_mode_scale_, other->shoulder_mode_scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraAttributes_descriptor_;
  metadata.reflection = CameraAttributes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraAttributes

// optional float disk_radius_m = 1;
void CameraAttributes::clear_disk_radius_m() {
  disk_radius_m_ = 0;
}
 float CameraAttributes::disk_radius_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.CameraAttributes.disk_radius_m)
  return disk_radius_m_;
}
 void CameraAttributes::set_disk_radius_m(float value) {
  
  disk_radius_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.CameraAttributes.disk_radius_m)
}

// optional float cylinder_radius_m = 2;
void CameraAttributes::clear_cylinder_radius_m() {
  cylinder_radius_m_ = 0;
}
 float CameraAttributes::cylinder_radius_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_radius_m)
  return cylinder_radius_m_;
}
 void CameraAttributes::set_cylinder_radius_m(float value) {
  
  cylinder_radius_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_radius_m)
}

// optional float cylinder_height_m = 3;
void CameraAttributes::clear_cylinder_height_m() {
  cylinder_height_m_ = 0;
}
 float CameraAttributes::cylinder_height_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_height_m)
  return cylinder_height_m_;
}
 void CameraAttributes::set_cylinder_height_m(float value) {
  
  cylinder_height_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_height_m)
}

// optional float cylinder_ground_m = 4;
void CameraAttributes::clear_cylinder_ground_m() {
  cylinder_ground_m_ = 0;
}
 float CameraAttributes::cylinder_ground_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_ground_m)
  return cylinder_ground_m_;
}
 void CameraAttributes::set_cylinder_ground_m(float value) {
  
  cylinder_ground_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.CameraAttributes.cylinder_ground_m)
}

// optional float shoulder_mode_scale = 5;
void CameraAttributes::clear_shoulder_mode_scale() {
  shoulder_mode_scale_ = 0;
}
 float CameraAttributes::shoulder_mode_scale() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Pokemon.CameraAttributes.shoulder_mode_scale)
  return shoulder_mode_scale_;
}
 void CameraAttributes::set_shoulder_mode_scale(float value) {
  
  shoulder_mode_scale_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Pokemon.CameraAttributes.shoulder_mode_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pokemon
}  // namespace Master
}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
