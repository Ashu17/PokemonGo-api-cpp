// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/EquippedBadgeSettings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Settings/Master/EquippedBadgeSettings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {
namespace Master {

namespace {

const ::google::protobuf::Descriptor* EquippedBadgeSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquippedBadgeSettings_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto() {
  protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Settings/Master/EquippedBadgeSettings.proto");
  GOOGLE_CHECK(file != NULL);
  EquippedBadgeSettings_descriptor_ = file->message_type(0);
  static const int EquippedBadgeSettings_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquippedBadgeSettings, equip_badge_cooldown_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquippedBadgeSettings, catch_probability_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquippedBadgeSettings, flee_probability_bonus_),
  };
  EquippedBadgeSettings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EquippedBadgeSettings_descriptor_,
      EquippedBadgeSettings::default_instance_,
      EquippedBadgeSettings_offsets_,
      -1,
      -1,
      -1,
      sizeof(EquippedBadgeSettings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquippedBadgeSettings, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquippedBadgeSettings, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EquippedBadgeSettings_descriptor_, &EquippedBadgeSettings::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto() {
  delete EquippedBadgeSettings::default_instance_;
  delete EquippedBadgeSettings_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n6POGOProtos/Settings/Master/EquippedBad"
    "geSettings.proto\022\032POGOProtos.Settings.Ma"
    "ster\"y\n\025EquippedBadgeSettings\022\037\n\027equip_b"
    "adge_cooldown_ms\030\001 \001(\003\022\037\n\027catch_probabil"
    "ity_bonus\030\002 \003(\002\022\036\n\026flee_probability_bonu"
    "s\030\003 \003(\002b\006proto3", 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Settings/Master/EquippedBadgeSettings.proto", &protobuf_RegisterTypes);
  EquippedBadgeSettings::default_instance_ = new EquippedBadgeSettings();
  EquippedBadgeSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto() {
    protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquippedBadgeSettings::kEquipBadgeCooldownMsFieldNumber;
const int EquippedBadgeSettings::kCatchProbabilityBonusFieldNumber;
const int EquippedBadgeSettings::kFleeProbabilityBonusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquippedBadgeSettings::EquippedBadgeSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Settings.Master.EquippedBadgeSettings)
}

void EquippedBadgeSettings::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EquippedBadgeSettings::EquippedBadgeSettings(const EquippedBadgeSettings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Settings.Master.EquippedBadgeSettings)
}

void EquippedBadgeSettings::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  equip_badge_cooldown_ms_ = GOOGLE_LONGLONG(0);
}

EquippedBadgeSettings::~EquippedBadgeSettings() {
  // @@protoc_insertion_point(destructor:POGOProtos.Settings.Master.EquippedBadgeSettings)
  SharedDtor();
}

void EquippedBadgeSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquippedBadgeSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquippedBadgeSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquippedBadgeSettings_descriptor_;
}

const EquippedBadgeSettings& EquippedBadgeSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fEquippedBadgeSettings_2eproto();
  return *default_instance_;
}

EquippedBadgeSettings* EquippedBadgeSettings::default_instance_ = NULL;

EquippedBadgeSettings* EquippedBadgeSettings::New(::google::protobuf::Arena* arena) const {
  EquippedBadgeSettings* n = new EquippedBadgeSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EquippedBadgeSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Settings.Master.EquippedBadgeSettings)
  equip_badge_cooldown_ms_ = GOOGLE_LONGLONG(0);
  catch_probability_bonus_.Clear();
  flee_probability_bonus_.Clear();
}

bool EquippedBadgeSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Settings.Master.EquippedBadgeSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 equip_badge_cooldown_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_badge_cooldown_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_catch_probability_bonus;
        break;
      }

      // repeated float catch_probability_bonus = 2;
      case 2: {
        if (tag == 18) {
         parse_catch_probability_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_catch_probability_bonus())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_catch_probability_bonus())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_flee_probability_bonus;
        break;
      }

      // repeated float flee_probability_bonus = 3;
      case 3: {
        if (tag == 26) {
         parse_flee_probability_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_flee_probability_bonus())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_flee_probability_bonus())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Settings.Master.EquippedBadgeSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Settings.Master.EquippedBadgeSettings)
  return false;
#undef DO_
}

void EquippedBadgeSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Settings.Master.EquippedBadgeSettings)
  // optional int64 equip_badge_cooldown_ms = 1;
  if (this->equip_badge_cooldown_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->equip_badge_cooldown_ms(), output);
  }

  // repeated float catch_probability_bonus = 2;
  if (this->catch_probability_bonus_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_catch_probability_bonus_cached_byte_size_);
  }
  for (int i = 0; i < this->catch_probability_bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->catch_probability_bonus(i), output);
  }

  // repeated float flee_probability_bonus = 3;
  if (this->flee_probability_bonus_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_flee_probability_bonus_cached_byte_size_);
  }
  for (int i = 0; i < this->flee_probability_bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->flee_probability_bonus(i), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Settings.Master.EquippedBadgeSettings)
}

::google::protobuf::uint8* EquippedBadgeSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Settings.Master.EquippedBadgeSettings)
  // optional int64 equip_badge_cooldown_ms = 1;
  if (this->equip_badge_cooldown_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->equip_badge_cooldown_ms(), target);
  }

  // repeated float catch_probability_bonus = 2;
  if (this->catch_probability_bonus_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _catch_probability_bonus_cached_byte_size_, target);
  }
  for (int i = 0; i < this->catch_probability_bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->catch_probability_bonus(i), target);
  }

  // repeated float flee_probability_bonus = 3;
  if (this->flee_probability_bonus_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _flee_probability_bonus_cached_byte_size_, target);
  }
  for (int i = 0; i < this->flee_probability_bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->flee_probability_bonus(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Settings.Master.EquippedBadgeSettings)
  return target;
}

int EquippedBadgeSettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Settings.Master.EquippedBadgeSettings)
  int total_size = 0;

  // optional int64 equip_badge_cooldown_ms = 1;
  if (this->equip_badge_cooldown_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->equip_badge_cooldown_ms());
  }

  // repeated float catch_probability_bonus = 2;
  {
    int data_size = 0;
    data_size = 4 * this->catch_probability_bonus_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _catch_probability_bonus_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float flee_probability_bonus = 3;
  {
    int data_size = 0;
    data_size = 4 * this->flee_probability_bonus_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _flee_probability_bonus_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquippedBadgeSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Settings.Master.EquippedBadgeSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EquippedBadgeSettings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EquippedBadgeSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Settings.Master.EquippedBadgeSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Settings.Master.EquippedBadgeSettings)
    MergeFrom(*source);
  }
}

void EquippedBadgeSettings::MergeFrom(const EquippedBadgeSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Settings.Master.EquippedBadgeSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  catch_probability_bonus_.MergeFrom(from.catch_probability_bonus_);
  flee_probability_bonus_.MergeFrom(from.flee_probability_bonus_);
  if (from.equip_badge_cooldown_ms() != 0) {
    set_equip_badge_cooldown_ms(from.equip_badge_cooldown_ms());
  }
}

void EquippedBadgeSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Settings.Master.EquippedBadgeSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquippedBadgeSettings::CopyFrom(const EquippedBadgeSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Settings.Master.EquippedBadgeSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquippedBadgeSettings::IsInitialized() const {

  return true;
}

void EquippedBadgeSettings::Swap(EquippedBadgeSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EquippedBadgeSettings::InternalSwap(EquippedBadgeSettings* other) {
  std::swap(equip_badge_cooldown_ms_, other->equip_badge_cooldown_ms_);
  catch_probability_bonus_.UnsafeArenaSwap(&other->catch_probability_bonus_);
  flee_probability_bonus_.UnsafeArenaSwap(&other->flee_probability_bonus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EquippedBadgeSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquippedBadgeSettings_descriptor_;
  metadata.reflection = EquippedBadgeSettings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EquippedBadgeSettings

// optional int64 equip_badge_cooldown_ms = 1;
void EquippedBadgeSettings::clear_equip_badge_cooldown_ms() {
  equip_badge_cooldown_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 EquippedBadgeSettings::equip_badge_cooldown_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.EquippedBadgeSettings.equip_badge_cooldown_ms)
  return equip_badge_cooldown_ms_;
}
 void EquippedBadgeSettings::set_equip_badge_cooldown_ms(::google::protobuf::int64 value) {
  
  equip_badge_cooldown_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.EquippedBadgeSettings.equip_badge_cooldown_ms)
}

// repeated float catch_probability_bonus = 2;
int EquippedBadgeSettings::catch_probability_bonus_size() const {
  return catch_probability_bonus_.size();
}
void EquippedBadgeSettings::clear_catch_probability_bonus() {
  catch_probability_bonus_.Clear();
}
 float EquippedBadgeSettings::catch_probability_bonus(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.EquippedBadgeSettings.catch_probability_bonus)
  return catch_probability_bonus_.Get(index);
}
 void EquippedBadgeSettings::set_catch_probability_bonus(int index, float value) {
  catch_probability_bonus_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.EquippedBadgeSettings.catch_probability_bonus)
}
 void EquippedBadgeSettings::add_catch_probability_bonus(float value) {
  catch_probability_bonus_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Settings.Master.EquippedBadgeSettings.catch_probability_bonus)
}
 const ::google::protobuf::RepeatedField< float >&
EquippedBadgeSettings::catch_probability_bonus() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Settings.Master.EquippedBadgeSettings.catch_probability_bonus)
  return catch_probability_bonus_;
}
 ::google::protobuf::RepeatedField< float >*
EquippedBadgeSettings::mutable_catch_probability_bonus() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Settings.Master.EquippedBadgeSettings.catch_probability_bonus)
  return &catch_probability_bonus_;
}

// repeated float flee_probability_bonus = 3;
int EquippedBadgeSettings::flee_probability_bonus_size() const {
  return flee_probability_bonus_.size();
}
void EquippedBadgeSettings::clear_flee_probability_bonus() {
  flee_probability_bonus_.Clear();
}
 float EquippedBadgeSettings::flee_probability_bonus(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.EquippedBadgeSettings.flee_probability_bonus)
  return flee_probability_bonus_.Get(index);
}
 void EquippedBadgeSettings::set_flee_probability_bonus(int index, float value) {
  flee_probability_bonus_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.EquippedBadgeSettings.flee_probability_bonus)
}
 void EquippedBadgeSettings::add_flee_probability_bonus(float value) {
  flee_probability_bonus_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Settings.Master.EquippedBadgeSettings.flee_probability_bonus)
}
 const ::google::protobuf::RepeatedField< float >&
EquippedBadgeSettings::flee_probability_bonus() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Settings.Master.EquippedBadgeSettings.flee_probability_bonus)
  return flee_probability_bonus_;
}
 ::google::protobuf::RepeatedField< float >*
EquippedBadgeSettings::mutable_flee_probability_bonus() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Settings.Master.EquippedBadgeSettings.flee_probability_bonus)
  return &flee_probability_bonus_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Master
}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
