// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/PokemonSettings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Settings/Master/PokemonSettings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {
namespace Master {

namespace {

const ::google::protobuf::Descriptor* PokemonSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PokemonSettings_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto() {
  protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Settings/Master/PokemonSettings.proto");
  GOOGLE_CHECK(file != NULL);
  PokemonSettings_descriptor_ = file->message_type(0);
  static const int PokemonSettings_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, pokemon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, model_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, type_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, encounter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, quick_moves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, cinematic_moves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, animation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, evolution_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, evolution_pips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, rarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, pokedex_height_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, pokedex_weight_kg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, parent_pokemon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, height_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, weight_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, km_distance_to_hatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, candy_to_evolve_),
  };
  PokemonSettings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PokemonSettings_descriptor_,
      PokemonSettings::default_instance_,
      PokemonSettings_offsets_,
      -1,
      -1,
      -1,
      sizeof(PokemonSettings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokemonSettings, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PokemonSettings_descriptor_, &PokemonSettings::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto() {
  delete PokemonSettings::default_instance_;
  delete PokemonSettings_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonId_2eproto();
  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonRarity_2eproto();
  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonType_2eproto();
  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonMove_2eproto();
  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonFamilyId_2eproto();
  ::POGOProtos::Settings::Master::Pokemon::protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fStatsAttributes_2eproto();
  ::POGOProtos::Settings::Master::Pokemon::protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fCameraAttributes_2eproto();
  ::POGOProtos::Settings::Master::Pokemon::protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemon_2fEncounterAttributes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n0POGOProtos/Settings/Master/PokemonSett"
    "ings.proto\022\032POGOProtos.Settings.Master\032 "
    "POGOProtos/Enums/PokemonId.proto\032$POGOPr"
    "otos/Enums/PokemonRarity.proto\032\"POGOProt"
    "os/Enums/PokemonType.proto\032\"POGOProtos/E"
    "nums/PokemonMove.proto\032&POGOProtos/Enums"
    "/PokemonFamilyId.proto\0328POGOProtos/Setti"
    "ngs/Master/Pokemon/StatsAttributes.proto"
    "\0329POGOProtos/Settings/Master/Pokemon/Cam"
    "eraAttributes.proto\032<POGOProtos/Settings"
    "/Master/Pokemon/EncounterAttributes.prot"
    "o\"\224\007\n\017PokemonSettings\022/\n\npokemon_id\030\001 \001("
    "\0162\033.POGOProtos.Enums.PokemonId\022\023\n\013model_"
    "scale\030\003 \001(\002\022+\n\004type\030\004 \001(\0162\035.POGOProtos.E"
    "nums.PokemonType\022-\n\006type_2\030\005 \001(\0162\035.POGOP"
    "rotos.Enums.PokemonType\022D\n\006camera\030\006 \001(\0132"
    "4.POGOProtos.Settings.Master.Pokemon.Cam"
    "eraAttributes\022J\n\tencounter\030\007 \001(\01327.POGOP"
    "rotos.Settings.Master.Pokemon.EncounterA"
    "ttributes\022B\n\005stats\030\010 \001(\01323.POGOProtos.Se"
    "ttings.Master.Pokemon.StatsAttributes\0222\n"
    "\013quick_moves\030\t \003(\0162\035.POGOProtos.Enums.Po"
    "kemonMove\0226\n\017cinematic_moves\030\n \003(\0162\035.POG"
    "OProtos.Enums.PokemonMove\022\026\n\016animation_t"
    "ime\030\013 \003(\002\0222\n\revolution_ids\030\014 \003(\0162\033.POGOP"
    "rotos.Enums.PokemonId\022\026\n\016evolution_pips\030"
    "\r \001(\005\022/\n\006rarity\030\016 \001(\0162\037.POGOProtos.Enums"
    ".PokemonRarity\022\030\n\020pokedex_height_m\030\017 \001(\002"
    "\022\031\n\021pokedex_weight_kg\030\020 \001(\002\0226\n\021parent_po"
    "kemon_id\030\021 \001(\0162\033.POGOProtos.Enums.Pokemo"
    "nId\022\026\n\016height_std_dev\030\022 \001(\002\022\026\n\016weight_st"
    "d_dev\030\023 \001(\002\022\034\n\024km_distance_to_hatch\030\024 \001("
    "\002\0224\n\tfamily_id\030\025 \001(\0162!.POGOProtos.Enums."
    "PokemonFamilyId\022\027\n\017candy_to_evolve\030\026 \001(\005"
    "b\006proto3", 1368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Settings/Master/PokemonSettings.proto", &protobuf_RegisterTypes);
  PokemonSettings::default_instance_ = new PokemonSettings();
  PokemonSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto() {
    protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PokemonSettings::kPokemonIdFieldNumber;
const int PokemonSettings::kModelScaleFieldNumber;
const int PokemonSettings::kTypeFieldNumber;
const int PokemonSettings::kType2FieldNumber;
const int PokemonSettings::kCameraFieldNumber;
const int PokemonSettings::kEncounterFieldNumber;
const int PokemonSettings::kStatsFieldNumber;
const int PokemonSettings::kQuickMovesFieldNumber;
const int PokemonSettings::kCinematicMovesFieldNumber;
const int PokemonSettings::kAnimationTimeFieldNumber;
const int PokemonSettings::kEvolutionIdsFieldNumber;
const int PokemonSettings::kEvolutionPipsFieldNumber;
const int PokemonSettings::kRarityFieldNumber;
const int PokemonSettings::kPokedexHeightMFieldNumber;
const int PokemonSettings::kPokedexWeightKgFieldNumber;
const int PokemonSettings::kParentPokemonIdFieldNumber;
const int PokemonSettings::kHeightStdDevFieldNumber;
const int PokemonSettings::kWeightStdDevFieldNumber;
const int PokemonSettings::kKmDistanceToHatchFieldNumber;
const int PokemonSettings::kFamilyIdFieldNumber;
const int PokemonSettings::kCandyToEvolveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PokemonSettings::PokemonSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Settings.Master.PokemonSettings)
}

void PokemonSettings::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  camera_ = const_cast< ::POGOProtos::Settings::Master::Pokemon::CameraAttributes*>(&::POGOProtos::Settings::Master::Pokemon::CameraAttributes::default_instance());
  encounter_ = const_cast< ::POGOProtos::Settings::Master::Pokemon::EncounterAttributes*>(&::POGOProtos::Settings::Master::Pokemon::EncounterAttributes::default_instance());
  stats_ = const_cast< ::POGOProtos::Settings::Master::Pokemon::StatsAttributes*>(&::POGOProtos::Settings::Master::Pokemon::StatsAttributes::default_instance());
}

PokemonSettings::PokemonSettings(const PokemonSettings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Settings.Master.PokemonSettings)
}

void PokemonSettings::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pokemon_id_ = 0;
  model_scale_ = 0;
  type_ = 0;
  type_2_ = 0;
  camera_ = NULL;
  encounter_ = NULL;
  stats_ = NULL;
  evolution_pips_ = 0;
  rarity_ = 0;
  pokedex_height_m_ = 0;
  pokedex_weight_kg_ = 0;
  parent_pokemon_id_ = 0;
  height_std_dev_ = 0;
  weight_std_dev_ = 0;
  km_distance_to_hatch_ = 0;
  family_id_ = 0;
  candy_to_evolve_ = 0;
}

PokemonSettings::~PokemonSettings() {
  // @@protoc_insertion_point(destructor:POGOProtos.Settings.Master.PokemonSettings)
  SharedDtor();
}

void PokemonSettings::SharedDtor() {
  if (this != default_instance_) {
    delete camera_;
    delete encounter_;
    delete stats_;
  }
}

void PokemonSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PokemonSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokemonSettings_descriptor_;
}

const PokemonSettings& PokemonSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fPokemonSettings_2eproto();
  return *default_instance_;
}

PokemonSettings* PokemonSettings::default_instance_ = NULL;

PokemonSettings* PokemonSettings::New(::google::protobuf::Arena* arena) const {
  PokemonSettings* n = new PokemonSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PokemonSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Settings.Master.PokemonSettings)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PokemonSettings, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PokemonSettings*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pokemon_id_, type_2_);
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) delete camera_;
  camera_ = NULL;
  if (GetArenaNoVirtual() == NULL && encounter_ != NULL) delete encounter_;
  encounter_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
  ZR_(evolution_pips_, parent_pokemon_id_);
  ZR_(height_std_dev_, candy_to_evolve_);

#undef ZR_HELPER_
#undef ZR_

  quick_moves_.Clear();
  cinematic_moves_.Clear();
  animation_time_.Clear();
  evolution_ids_.Clear();
}

bool PokemonSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Settings.Master.PokemonSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Enums.PokemonId pokemon_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pokemon_id(static_cast< ::POGOProtos::Enums::PokemonId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_model_scale;
        break;
      }

      // optional float model_scale = 3;
      case 3: {
        if (tag == 29) {
         parse_model_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &model_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .POGOProtos.Enums.PokemonType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::POGOProtos::Enums::PokemonType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type_2;
        break;
      }

      // optional .POGOProtos.Enums.PokemonType type_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_type_2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type_2(static_cast< ::POGOProtos::Enums::PokemonType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_camera;
        break;
      }

      // optional .POGOProtos.Settings.Master.Pokemon.CameraAttributes camera = 6;
      case 6: {
        if (tag == 50) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_encounter;
        break;
      }

      // optional .POGOProtos.Settings.Master.Pokemon.EncounterAttributes encounter = 7;
      case 7: {
        if (tag == 58) {
         parse_encounter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encounter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_stats;
        break;
      }

      // optional .POGOProtos.Settings.Master.Pokemon.StatsAttributes stats = 8;
      case 8: {
        if (tag == 66) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_quick_moves;
        break;
      }

      // repeated .POGOProtos.Enums.PokemonMove quick_moves = 9;
      case 9: {
        if (tag == 74) {
         parse_quick_moves:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_quick_moves(static_cast< ::POGOProtos::Enums::PokemonMove >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 72) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_quick_moves(static_cast< ::POGOProtos::Enums::PokemonMove >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cinematic_moves;
        break;
      }

      // repeated .POGOProtos.Enums.PokemonMove cinematic_moves = 10;
      case 10: {
        if (tag == 82) {
         parse_cinematic_moves:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_cinematic_moves(static_cast< ::POGOProtos::Enums::PokemonMove >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_cinematic_moves(static_cast< ::POGOProtos::Enums::PokemonMove >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_animation_time;
        break;
      }

      // repeated float animation_time = 11;
      case 11: {
        if (tag == 90) {
         parse_animation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_animation_time())));
        } else if (tag == 93) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90, input, this->mutable_animation_time())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_evolution_ids;
        break;
      }

      // repeated .POGOProtos.Enums.PokemonId evolution_ids = 12;
      case 12: {
        if (tag == 98) {
         parse_evolution_ids:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_evolution_ids(static_cast< ::POGOProtos::Enums::PokemonId >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 96) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_evolution_ids(static_cast< ::POGOProtos::Enums::PokemonId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_evolution_pips;
        break;
      }

      // optional int32 evolution_pips = 13;
      case 13: {
        if (tag == 104) {
         parse_evolution_pips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolution_pips_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_rarity;
        break;
      }

      // optional .POGOProtos.Enums.PokemonRarity rarity = 14;
      case 14: {
        if (tag == 112) {
         parse_rarity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rarity(static_cast< ::POGOProtos::Enums::PokemonRarity >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_pokedex_height_m;
        break;
      }

      // optional float pokedex_height_m = 15;
      case 15: {
        if (tag == 125) {
         parse_pokedex_height_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pokedex_height_m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_pokedex_weight_kg;
        break;
      }

      // optional float pokedex_weight_kg = 16;
      case 16: {
        if (tag == 133) {
         parse_pokedex_weight_kg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pokedex_weight_kg_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_parent_pokemon_id;
        break;
      }

      // optional .POGOProtos.Enums.PokemonId parent_pokemon_id = 17;
      case 17: {
        if (tag == 136) {
         parse_parent_pokemon_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parent_pokemon_id(static_cast< ::POGOProtos::Enums::PokemonId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_height_std_dev;
        break;
      }

      // optional float height_std_dev = 18;
      case 18: {
        if (tag == 149) {
         parse_height_std_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_std_dev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_weight_std_dev;
        break;
      }

      // optional float weight_std_dev = 19;
      case 19: {
        if (tag == 157) {
         parse_weight_std_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_std_dev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_km_distance_to_hatch;
        break;
      }

      // optional float km_distance_to_hatch = 20;
      case 20: {
        if (tag == 165) {
         parse_km_distance_to_hatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &km_distance_to_hatch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_family_id;
        break;
      }

      // optional .POGOProtos.Enums.PokemonFamilyId family_id = 21;
      case 21: {
        if (tag == 168) {
         parse_family_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_family_id(static_cast< ::POGOProtos::Enums::PokemonFamilyId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_candy_to_evolve;
        break;
      }

      // optional int32 candy_to_evolve = 22;
      case 22: {
        if (tag == 176) {
         parse_candy_to_evolve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candy_to_evolve_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Settings.Master.PokemonSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Settings.Master.PokemonSettings)
  return false;
#undef DO_
}

void PokemonSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Settings.Master.PokemonSettings)
  // optional .POGOProtos.Enums.PokemonId pokemon_id = 1;
  if (this->pokemon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pokemon_id(), output);
  }

  // optional float model_scale = 3;
  if (this->model_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->model_scale(), output);
  }

  // optional .POGOProtos.Enums.PokemonType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional .POGOProtos.Enums.PokemonType type_2 = 5;
  if (this->type_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type_2(), output);
  }

  // optional .POGOProtos.Settings.Master.Pokemon.CameraAttributes camera = 6;
  if (this->has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->camera_, output);
  }

  // optional .POGOProtos.Settings.Master.Pokemon.EncounterAttributes encounter = 7;
  if (this->has_encounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->encounter_, output);
  }

  // optional .POGOProtos.Settings.Master.Pokemon.StatsAttributes stats = 8;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->stats_, output);
  }

  // repeated .POGOProtos.Enums.PokemonMove quick_moves = 9;
  if (this->quick_moves_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_quick_moves_cached_byte_size_);
  }
  for (int i = 0; i < this->quick_moves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->quick_moves(i), output);
  }

  // repeated .POGOProtos.Enums.PokemonMove cinematic_moves = 10;
  if (this->cinematic_moves_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_cinematic_moves_cached_byte_size_);
  }
  for (int i = 0; i < this->cinematic_moves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->cinematic_moves(i), output);
  }

  // repeated float animation_time = 11;
  if (this->animation_time_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_animation_time_cached_byte_size_);
  }
  for (int i = 0; i < this->animation_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->animation_time(i), output);
  }

  // repeated .POGOProtos.Enums.PokemonId evolution_ids = 12;
  if (this->evolution_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_evolution_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->evolution_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->evolution_ids(i), output);
  }

  // optional int32 evolution_pips = 13;
  if (this->evolution_pips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->evolution_pips(), output);
  }

  // optional .POGOProtos.Enums.PokemonRarity rarity = 14;
  if (this->rarity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->rarity(), output);
  }

  // optional float pokedex_height_m = 15;
  if (this->pokedex_height_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->pokedex_height_m(), output);
  }

  // optional float pokedex_weight_kg = 16;
  if (this->pokedex_weight_kg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->pokedex_weight_kg(), output);
  }

  // optional .POGOProtos.Enums.PokemonId parent_pokemon_id = 17;
  if (this->parent_pokemon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->parent_pokemon_id(), output);
  }

  // optional float height_std_dev = 18;
  if (this->height_std_dev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->height_std_dev(), output);
  }

  // optional float weight_std_dev = 19;
  if (this->weight_std_dev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->weight_std_dev(), output);
  }

  // optional float km_distance_to_hatch = 20;
  if (this->km_distance_to_hatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->km_distance_to_hatch(), output);
  }

  // optional .POGOProtos.Enums.PokemonFamilyId family_id = 21;
  if (this->family_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->family_id(), output);
  }

  // optional int32 candy_to_evolve = 22;
  if (this->candy_to_evolve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->candy_to_evolve(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Settings.Master.PokemonSettings)
}

::google::protobuf::uint8* PokemonSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Settings.Master.PokemonSettings)
  // optional .POGOProtos.Enums.PokemonId pokemon_id = 1;
  if (this->pokemon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pokemon_id(), target);
  }

  // optional float model_scale = 3;
  if (this->model_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->model_scale(), target);
  }

  // optional .POGOProtos.Enums.PokemonType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional .POGOProtos.Enums.PokemonType type_2 = 5;
  if (this->type_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type_2(), target);
  }

  // optional .POGOProtos.Settings.Master.Pokemon.CameraAttributes camera = 6;
  if (this->has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->camera_, false, target);
  }

  // optional .POGOProtos.Settings.Master.Pokemon.EncounterAttributes encounter = 7;
  if (this->has_encounter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->encounter_, false, target);
  }

  // optional .POGOProtos.Settings.Master.Pokemon.StatsAttributes stats = 8;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->stats_, false, target);
  }

  // repeated .POGOProtos.Enums.PokemonMove quick_moves = 9;
  if (this->quick_moves_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _quick_moves_cached_byte_size_, target);
  }
  for (int i = 0; i < this->quick_moves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->quick_moves(i), target);
  }

  // repeated .POGOProtos.Enums.PokemonMove cinematic_moves = 10;
  if (this->cinematic_moves_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _cinematic_moves_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cinematic_moves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->cinematic_moves(i), target);
  }

  // repeated float animation_time = 11;
  if (this->animation_time_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _animation_time_cached_byte_size_, target);
  }
  for (int i = 0; i < this->animation_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->animation_time(i), target);
  }

  // repeated .POGOProtos.Enums.PokemonId evolution_ids = 12;
  if (this->evolution_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _evolution_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->evolution_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->evolution_ids(i), target);
  }

  // optional int32 evolution_pips = 13;
  if (this->evolution_pips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->evolution_pips(), target);
  }

  // optional .POGOProtos.Enums.PokemonRarity rarity = 14;
  if (this->rarity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->rarity(), target);
  }

  // optional float pokedex_height_m = 15;
  if (this->pokedex_height_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->pokedex_height_m(), target);
  }

  // optional float pokedex_weight_kg = 16;
  if (this->pokedex_weight_kg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->pokedex_weight_kg(), target);
  }

  // optional .POGOProtos.Enums.PokemonId parent_pokemon_id = 17;
  if (this->parent_pokemon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->parent_pokemon_id(), target);
  }

  // optional float height_std_dev = 18;
  if (this->height_std_dev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->height_std_dev(), target);
  }

  // optional float weight_std_dev = 19;
  if (this->weight_std_dev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->weight_std_dev(), target);
  }

  // optional float km_distance_to_hatch = 20;
  if (this->km_distance_to_hatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->km_distance_to_hatch(), target);
  }

  // optional .POGOProtos.Enums.PokemonFamilyId family_id = 21;
  if (this->family_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->family_id(), target);
  }

  // optional int32 candy_to_evolve = 22;
  if (this->candy_to_evolve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->candy_to_evolve(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Settings.Master.PokemonSettings)
  return target;
}

int PokemonSettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Settings.Master.PokemonSettings)
  int total_size = 0;

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 1;
  if (this->pokemon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pokemon_id());
  }

  // optional float model_scale = 3;
  if (this->model_scale() != 0) {
    total_size += 1 + 4;
  }

  // optional .POGOProtos.Enums.PokemonType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .POGOProtos.Enums.PokemonType type_2 = 5;
  if (this->type_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_2());
  }

  // optional .POGOProtos.Settings.Master.Pokemon.CameraAttributes camera = 6;
  if (this->has_camera()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->camera_);
  }

  // optional .POGOProtos.Settings.Master.Pokemon.EncounterAttributes encounter = 7;
  if (this->has_encounter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->encounter_);
  }

  // optional .POGOProtos.Settings.Master.Pokemon.StatsAttributes stats = 8;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // optional int32 evolution_pips = 13;
  if (this->evolution_pips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->evolution_pips());
  }

  // optional .POGOProtos.Enums.PokemonRarity rarity = 14;
  if (this->rarity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rarity());
  }

  // optional float pokedex_height_m = 15;
  if (this->pokedex_height_m() != 0) {
    total_size += 1 + 4;
  }

  // optional float pokedex_weight_kg = 16;
  if (this->pokedex_weight_kg() != 0) {
    total_size += 2 + 4;
  }

  // optional .POGOProtos.Enums.PokemonId parent_pokemon_id = 17;
  if (this->parent_pokemon_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parent_pokemon_id());
  }

  // optional float height_std_dev = 18;
  if (this->height_std_dev() != 0) {
    total_size += 2 + 4;
  }

  // optional float weight_std_dev = 19;
  if (this->weight_std_dev() != 0) {
    total_size += 2 + 4;
  }

  // optional float km_distance_to_hatch = 20;
  if (this->km_distance_to_hatch() != 0) {
    total_size += 2 + 4;
  }

  // optional .POGOProtos.Enums.PokemonFamilyId family_id = 21;
  if (this->family_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->family_id());
  }

  // optional int32 candy_to_evolve = 22;
  if (this->candy_to_evolve() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->candy_to_evolve());
  }

  // repeated .POGOProtos.Enums.PokemonMove quick_moves = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->quick_moves_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->quick_moves(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _quick_moves_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .POGOProtos.Enums.PokemonMove cinematic_moves = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->cinematic_moves_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cinematic_moves(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cinematic_moves_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float animation_time = 11;
  {
    int data_size = 0;
    data_size = 4 * this->animation_time_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _animation_time_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .POGOProtos.Enums.PokemonId evolution_ids = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->evolution_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->evolution_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _evolution_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokemonSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Settings.Master.PokemonSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PokemonSettings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PokemonSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Settings.Master.PokemonSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Settings.Master.PokemonSettings)
    MergeFrom(*source);
  }
}

void PokemonSettings::MergeFrom(const PokemonSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Settings.Master.PokemonSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  quick_moves_.MergeFrom(from.quick_moves_);
  cinematic_moves_.MergeFrom(from.cinematic_moves_);
  animation_time_.MergeFrom(from.animation_time_);
  evolution_ids_.MergeFrom(from.evolution_ids_);
  if (from.pokemon_id() != 0) {
    set_pokemon_id(from.pokemon_id());
  }
  if (from.model_scale() != 0) {
    set_model_scale(from.model_scale());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.type_2() != 0) {
    set_type_2(from.type_2());
  }
  if (from.has_camera()) {
    mutable_camera()->::POGOProtos::Settings::Master::Pokemon::CameraAttributes::MergeFrom(from.camera());
  }
  if (from.has_encounter()) {
    mutable_encounter()->::POGOProtos::Settings::Master::Pokemon::EncounterAttributes::MergeFrom(from.encounter());
  }
  if (from.has_stats()) {
    mutable_stats()->::POGOProtos::Settings::Master::Pokemon::StatsAttributes::MergeFrom(from.stats());
  }
  if (from.evolution_pips() != 0) {
    set_evolution_pips(from.evolution_pips());
  }
  if (from.rarity() != 0) {
    set_rarity(from.rarity());
  }
  if (from.pokedex_height_m() != 0) {
    set_pokedex_height_m(from.pokedex_height_m());
  }
  if (from.pokedex_weight_kg() != 0) {
    set_pokedex_weight_kg(from.pokedex_weight_kg());
  }
  if (from.parent_pokemon_id() != 0) {
    set_parent_pokemon_id(from.parent_pokemon_id());
  }
  if (from.height_std_dev() != 0) {
    set_height_std_dev(from.height_std_dev());
  }
  if (from.weight_std_dev() != 0) {
    set_weight_std_dev(from.weight_std_dev());
  }
  if (from.km_distance_to_hatch() != 0) {
    set_km_distance_to_hatch(from.km_distance_to_hatch());
  }
  if (from.family_id() != 0) {
    set_family_id(from.family_id());
  }
  if (from.candy_to_evolve() != 0) {
    set_candy_to_evolve(from.candy_to_evolve());
  }
}

void PokemonSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Settings.Master.PokemonSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokemonSettings::CopyFrom(const PokemonSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Settings.Master.PokemonSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokemonSettings::IsInitialized() const {

  return true;
}

void PokemonSettings::Swap(PokemonSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PokemonSettings::InternalSwap(PokemonSettings* other) {
  std::swap(pokemon_id_, other->pokemon_id_);
  std::swap(model_scale_, other->model_scale_);
  std::swap(type_, other->type_);
  std::swap(type_2_, other->type_2_);
  std::swap(camera_, other->camera_);
  std::swap(encounter_, other->encounter_);
  std::swap(stats_, other->stats_);
  quick_moves_.UnsafeArenaSwap(&other->quick_moves_);
  cinematic_moves_.UnsafeArenaSwap(&other->cinematic_moves_);
  animation_time_.UnsafeArenaSwap(&other->animation_time_);
  evolution_ids_.UnsafeArenaSwap(&other->evolution_ids_);
  std::swap(evolution_pips_, other->evolution_pips_);
  std::swap(rarity_, other->rarity_);
  std::swap(pokedex_height_m_, other->pokedex_height_m_);
  std::swap(pokedex_weight_kg_, other->pokedex_weight_kg_);
  std::swap(parent_pokemon_id_, other->parent_pokemon_id_);
  std::swap(height_std_dev_, other->height_std_dev_);
  std::swap(weight_std_dev_, other->weight_std_dev_);
  std::swap(km_distance_to_hatch_, other->km_distance_to_hatch_);
  std::swap(family_id_, other->family_id_);
  std::swap(candy_to_evolve_, other->candy_to_evolve_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PokemonSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PokemonSettings_descriptor_;
  metadata.reflection = PokemonSettings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PokemonSettings

// optional .POGOProtos.Enums.PokemonId pokemon_id = 1;
void PokemonSettings::clear_pokemon_id() {
  pokemon_id_ = 0;
}
 ::POGOProtos::Enums::PokemonId PokemonSettings::pokemon_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.pokemon_id)
  return static_cast< ::POGOProtos::Enums::PokemonId >(pokemon_id_);
}
 void PokemonSettings::set_pokemon_id(::POGOProtos::Enums::PokemonId value) {
  
  pokemon_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.pokemon_id)
}

// optional float model_scale = 3;
void PokemonSettings::clear_model_scale() {
  model_scale_ = 0;
}
 float PokemonSettings::model_scale() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.model_scale)
  return model_scale_;
}
 void PokemonSettings::set_model_scale(float value) {
  
  model_scale_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.model_scale)
}

// optional .POGOProtos.Enums.PokemonType type = 4;
void PokemonSettings::clear_type() {
  type_ = 0;
}
 ::POGOProtos::Enums::PokemonType PokemonSettings::type() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.type)
  return static_cast< ::POGOProtos::Enums::PokemonType >(type_);
}
 void PokemonSettings::set_type(::POGOProtos::Enums::PokemonType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.type)
}

// optional .POGOProtos.Enums.PokemonType type_2 = 5;
void PokemonSettings::clear_type_2() {
  type_2_ = 0;
}
 ::POGOProtos::Enums::PokemonType PokemonSettings::type_2() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.type_2)
  return static_cast< ::POGOProtos::Enums::PokemonType >(type_2_);
}
 void PokemonSettings::set_type_2(::POGOProtos::Enums::PokemonType value) {
  
  type_2_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.type_2)
}

// optional .POGOProtos.Settings.Master.Pokemon.CameraAttributes camera = 6;
bool PokemonSettings::has_camera() const {
  return !_is_default_instance_ && camera_ != NULL;
}
void PokemonSettings::clear_camera() {
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) delete camera_;
  camera_ = NULL;
}
const ::POGOProtos::Settings::Master::Pokemon::CameraAttributes& PokemonSettings::camera() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.camera)
  return camera_ != NULL ? *camera_ : *default_instance_->camera_;
}
::POGOProtos::Settings::Master::Pokemon::CameraAttributes* PokemonSettings::mutable_camera() {
  
  if (camera_ == NULL) {
    camera_ = new ::POGOProtos::Settings::Master::Pokemon::CameraAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.PokemonSettings.camera)
  return camera_;
}
::POGOProtos::Settings::Master::Pokemon::CameraAttributes* PokemonSettings::release_camera() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.PokemonSettings.camera)
  
  ::POGOProtos::Settings::Master::Pokemon::CameraAttributes* temp = camera_;
  camera_ = NULL;
  return temp;
}
void PokemonSettings::set_allocated_camera(::POGOProtos::Settings::Master::Pokemon::CameraAttributes* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.PokemonSettings.camera)
}

// optional .POGOProtos.Settings.Master.Pokemon.EncounterAttributes encounter = 7;
bool PokemonSettings::has_encounter() const {
  return !_is_default_instance_ && encounter_ != NULL;
}
void PokemonSettings::clear_encounter() {
  if (GetArenaNoVirtual() == NULL && encounter_ != NULL) delete encounter_;
  encounter_ = NULL;
}
const ::POGOProtos::Settings::Master::Pokemon::EncounterAttributes& PokemonSettings::encounter() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.encounter)
  return encounter_ != NULL ? *encounter_ : *default_instance_->encounter_;
}
::POGOProtos::Settings::Master::Pokemon::EncounterAttributes* PokemonSettings::mutable_encounter() {
  
  if (encounter_ == NULL) {
    encounter_ = new ::POGOProtos::Settings::Master::Pokemon::EncounterAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.PokemonSettings.encounter)
  return encounter_;
}
::POGOProtos::Settings::Master::Pokemon::EncounterAttributes* PokemonSettings::release_encounter() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.PokemonSettings.encounter)
  
  ::POGOProtos::Settings::Master::Pokemon::EncounterAttributes* temp = encounter_;
  encounter_ = NULL;
  return temp;
}
void PokemonSettings::set_allocated_encounter(::POGOProtos::Settings::Master::Pokemon::EncounterAttributes* encounter) {
  delete encounter_;
  encounter_ = encounter;
  if (encounter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.PokemonSettings.encounter)
}

// optional .POGOProtos.Settings.Master.Pokemon.StatsAttributes stats = 8;
bool PokemonSettings::has_stats() const {
  return !_is_default_instance_ && stats_ != NULL;
}
void PokemonSettings::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::POGOProtos::Settings::Master::Pokemon::StatsAttributes& PokemonSettings::stats() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
::POGOProtos::Settings::Master::Pokemon::StatsAttributes* PokemonSettings::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::POGOProtos::Settings::Master::Pokemon::StatsAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.PokemonSettings.stats)
  return stats_;
}
::POGOProtos::Settings::Master::Pokemon::StatsAttributes* PokemonSettings::release_stats() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.PokemonSettings.stats)
  
  ::POGOProtos::Settings::Master::Pokemon::StatsAttributes* temp = stats_;
  stats_ = NULL;
  return temp;
}
void PokemonSettings::set_allocated_stats(::POGOProtos::Settings::Master::Pokemon::StatsAttributes* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.PokemonSettings.stats)
}

// repeated .POGOProtos.Enums.PokemonMove quick_moves = 9;
int PokemonSettings::quick_moves_size() const {
  return quick_moves_.size();
}
void PokemonSettings::clear_quick_moves() {
  quick_moves_.Clear();
}
 ::POGOProtos::Enums::PokemonMove PokemonSettings::quick_moves(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.quick_moves)
  return static_cast< ::POGOProtos::Enums::PokemonMove >(quick_moves_.Get(index));
}
 void PokemonSettings::set_quick_moves(int index, ::POGOProtos::Enums::PokemonMove value) {
  quick_moves_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.quick_moves)
}
 void PokemonSettings::add_quick_moves(::POGOProtos::Enums::PokemonMove value) {
  quick_moves_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Settings.Master.PokemonSettings.quick_moves)
}
 const ::google::protobuf::RepeatedField<int>&
PokemonSettings::quick_moves() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Settings.Master.PokemonSettings.quick_moves)
  return quick_moves_;
}
 ::google::protobuf::RepeatedField<int>*
PokemonSettings::mutable_quick_moves() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Settings.Master.PokemonSettings.quick_moves)
  return &quick_moves_;
}

// repeated .POGOProtos.Enums.PokemonMove cinematic_moves = 10;
int PokemonSettings::cinematic_moves_size() const {
  return cinematic_moves_.size();
}
void PokemonSettings::clear_cinematic_moves() {
  cinematic_moves_.Clear();
}
 ::POGOProtos::Enums::PokemonMove PokemonSettings::cinematic_moves(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.cinematic_moves)
  return static_cast< ::POGOProtos::Enums::PokemonMove >(cinematic_moves_.Get(index));
}
 void PokemonSettings::set_cinematic_moves(int index, ::POGOProtos::Enums::PokemonMove value) {
  cinematic_moves_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.cinematic_moves)
}
 void PokemonSettings::add_cinematic_moves(::POGOProtos::Enums::PokemonMove value) {
  cinematic_moves_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Settings.Master.PokemonSettings.cinematic_moves)
}
 const ::google::protobuf::RepeatedField<int>&
PokemonSettings::cinematic_moves() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Settings.Master.PokemonSettings.cinematic_moves)
  return cinematic_moves_;
}
 ::google::protobuf::RepeatedField<int>*
PokemonSettings::mutable_cinematic_moves() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Settings.Master.PokemonSettings.cinematic_moves)
  return &cinematic_moves_;
}

// repeated float animation_time = 11;
int PokemonSettings::animation_time_size() const {
  return animation_time_.size();
}
void PokemonSettings::clear_animation_time() {
  animation_time_.Clear();
}
 float PokemonSettings::animation_time(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.animation_time)
  return animation_time_.Get(index);
}
 void PokemonSettings::set_animation_time(int index, float value) {
  animation_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.animation_time)
}
 void PokemonSettings::add_animation_time(float value) {
  animation_time_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Settings.Master.PokemonSettings.animation_time)
}
 const ::google::protobuf::RepeatedField< float >&
PokemonSettings::animation_time() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Settings.Master.PokemonSettings.animation_time)
  return animation_time_;
}
 ::google::protobuf::RepeatedField< float >*
PokemonSettings::mutable_animation_time() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Settings.Master.PokemonSettings.animation_time)
  return &animation_time_;
}

// repeated .POGOProtos.Enums.PokemonId evolution_ids = 12;
int PokemonSettings::evolution_ids_size() const {
  return evolution_ids_.size();
}
void PokemonSettings::clear_evolution_ids() {
  evolution_ids_.Clear();
}
 ::POGOProtos::Enums::PokemonId PokemonSettings::evolution_ids(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.evolution_ids)
  return static_cast< ::POGOProtos::Enums::PokemonId >(evolution_ids_.Get(index));
}
 void PokemonSettings::set_evolution_ids(int index, ::POGOProtos::Enums::PokemonId value) {
  evolution_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.evolution_ids)
}
 void PokemonSettings::add_evolution_ids(::POGOProtos::Enums::PokemonId value) {
  evolution_ids_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Settings.Master.PokemonSettings.evolution_ids)
}
 const ::google::protobuf::RepeatedField<int>&
PokemonSettings::evolution_ids() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Settings.Master.PokemonSettings.evolution_ids)
  return evolution_ids_;
}
 ::google::protobuf::RepeatedField<int>*
PokemonSettings::mutable_evolution_ids() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Settings.Master.PokemonSettings.evolution_ids)
  return &evolution_ids_;
}

// optional int32 evolution_pips = 13;
void PokemonSettings::clear_evolution_pips() {
  evolution_pips_ = 0;
}
 ::google::protobuf::int32 PokemonSettings::evolution_pips() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.evolution_pips)
  return evolution_pips_;
}
 void PokemonSettings::set_evolution_pips(::google::protobuf::int32 value) {
  
  evolution_pips_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.evolution_pips)
}

// optional .POGOProtos.Enums.PokemonRarity rarity = 14;
void PokemonSettings::clear_rarity() {
  rarity_ = 0;
}
 ::POGOProtos::Enums::PokemonRarity PokemonSettings::rarity() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.rarity)
  return static_cast< ::POGOProtos::Enums::PokemonRarity >(rarity_);
}
 void PokemonSettings::set_rarity(::POGOProtos::Enums::PokemonRarity value) {
  
  rarity_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.rarity)
}

// optional float pokedex_height_m = 15;
void PokemonSettings::clear_pokedex_height_m() {
  pokedex_height_m_ = 0;
}
 float PokemonSettings::pokedex_height_m() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.pokedex_height_m)
  return pokedex_height_m_;
}
 void PokemonSettings::set_pokedex_height_m(float value) {
  
  pokedex_height_m_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.pokedex_height_m)
}

// optional float pokedex_weight_kg = 16;
void PokemonSettings::clear_pokedex_weight_kg() {
  pokedex_weight_kg_ = 0;
}
 float PokemonSettings::pokedex_weight_kg() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.pokedex_weight_kg)
  return pokedex_weight_kg_;
}
 void PokemonSettings::set_pokedex_weight_kg(float value) {
  
  pokedex_weight_kg_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.pokedex_weight_kg)
}

// optional .POGOProtos.Enums.PokemonId parent_pokemon_id = 17;
void PokemonSettings::clear_parent_pokemon_id() {
  parent_pokemon_id_ = 0;
}
 ::POGOProtos::Enums::PokemonId PokemonSettings::parent_pokemon_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.parent_pokemon_id)
  return static_cast< ::POGOProtos::Enums::PokemonId >(parent_pokemon_id_);
}
 void PokemonSettings::set_parent_pokemon_id(::POGOProtos::Enums::PokemonId value) {
  
  parent_pokemon_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.parent_pokemon_id)
}

// optional float height_std_dev = 18;
void PokemonSettings::clear_height_std_dev() {
  height_std_dev_ = 0;
}
 float PokemonSettings::height_std_dev() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.height_std_dev)
  return height_std_dev_;
}
 void PokemonSettings::set_height_std_dev(float value) {
  
  height_std_dev_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.height_std_dev)
}

// optional float weight_std_dev = 19;
void PokemonSettings::clear_weight_std_dev() {
  weight_std_dev_ = 0;
}
 float PokemonSettings::weight_std_dev() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.weight_std_dev)
  return weight_std_dev_;
}
 void PokemonSettings::set_weight_std_dev(float value) {
  
  weight_std_dev_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.weight_std_dev)
}

// optional float km_distance_to_hatch = 20;
void PokemonSettings::clear_km_distance_to_hatch() {
  km_distance_to_hatch_ = 0;
}
 float PokemonSettings::km_distance_to_hatch() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.km_distance_to_hatch)
  return km_distance_to_hatch_;
}
 void PokemonSettings::set_km_distance_to_hatch(float value) {
  
  km_distance_to_hatch_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.km_distance_to_hatch)
}

// optional .POGOProtos.Enums.PokemonFamilyId family_id = 21;
void PokemonSettings::clear_family_id() {
  family_id_ = 0;
}
 ::POGOProtos::Enums::PokemonFamilyId PokemonSettings::family_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.family_id)
  return static_cast< ::POGOProtos::Enums::PokemonFamilyId >(family_id_);
}
 void PokemonSettings::set_family_id(::POGOProtos::Enums::PokemonFamilyId value) {
  
  family_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.family_id)
}

// optional int32 candy_to_evolve = 22;
void PokemonSettings::clear_candy_to_evolve() {
  candy_to_evolve_ = 0;
}
 ::google::protobuf::int32 PokemonSettings::candy_to_evolve() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.PokemonSettings.candy_to_evolve)
  return candy_to_evolve_;
}
 void PokemonSettings::set_candy_to_evolve(::google::protobuf::int32 value) {
  
  candy_to_evolve_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.PokemonSettings.candy_to_evolve)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Master
}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
