// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/Item/IncenseAttributes.proto

#ifndef PROTOBUF_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "POGOProtos/Enums/PokemonType.pb.h"
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {
namespace Master {
namespace Item {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto();
void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto();

class IncenseAttributes;

// ===================================================================

class IncenseAttributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Settings.Master.Item.IncenseAttributes) */ {
 public:
  IncenseAttributes();
  virtual ~IncenseAttributes();

  IncenseAttributes(const IncenseAttributes& from);

  inline IncenseAttributes& operator=(const IncenseAttributes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IncenseAttributes& default_instance();

  void Swap(IncenseAttributes* other);

  // implements Message ----------------------------------------------

  inline IncenseAttributes* New() const { return New(NULL); }

  IncenseAttributes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IncenseAttributes& from);
  void MergeFrom(const IncenseAttributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncenseAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 incense_lifetime_seconds = 1;
  void clear_incense_lifetime_seconds();
  static const int kIncenseLifetimeSecondsFieldNumber = 1;
  ::google::protobuf::int32 incense_lifetime_seconds() const;
  void set_incense_lifetime_seconds(::google::protobuf::int32 value);

  // repeated .POGOProtos.Enums.PokemonType pokemon_type = 2;
  int pokemon_type_size() const;
  void clear_pokemon_type();
  static const int kPokemonTypeFieldNumber = 2;
  ::POGOProtos::Enums::PokemonType pokemon_type(int index) const;
  void set_pokemon_type(int index, ::POGOProtos::Enums::PokemonType value);
  void add_pokemon_type(::POGOProtos::Enums::PokemonType value);
  const ::google::protobuf::RepeatedField<int>& pokemon_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_pokemon_type();

  // optional float pokemon_incense_type_probability = 3;
  void clear_pokemon_incense_type_probability();
  static const int kPokemonIncenseTypeProbabilityFieldNumber = 3;
  float pokemon_incense_type_probability() const;
  void set_pokemon_incense_type_probability(float value);

  // optional int32 standing_time_between_encounters_seconds = 4;
  void clear_standing_time_between_encounters_seconds();
  static const int kStandingTimeBetweenEncountersSecondsFieldNumber = 4;
  ::google::protobuf::int32 standing_time_between_encounters_seconds() const;
  void set_standing_time_between_encounters_seconds(::google::protobuf::int32 value);

  // optional int32 moving_time_between_encounter_seconds = 5;
  void clear_moving_time_between_encounter_seconds();
  static const int kMovingTimeBetweenEncounterSecondsFieldNumber = 5;
  ::google::protobuf::int32 moving_time_between_encounter_seconds() const;
  void set_moving_time_between_encounter_seconds(::google::protobuf::int32 value);

  // optional int32 distance_required_for_shorter_interval_meters = 6;
  void clear_distance_required_for_shorter_interval_meters();
  static const int kDistanceRequiredForShorterIntervalMetersFieldNumber = 6;
  ::google::protobuf::int32 distance_required_for_shorter_interval_meters() const;
  void set_distance_required_for_shorter_interval_meters(::google::protobuf::int32 value);

  // optional int32 pokemon_attracted_length_sec = 7;
  void clear_pokemon_attracted_length_sec();
  static const int kPokemonAttractedLengthSecFieldNumber = 7;
  ::google::protobuf::int32 pokemon_attracted_length_sec() const;
  void set_pokemon_attracted_length_sec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.Item.IncenseAttributes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField<int> pokemon_type_;
  mutable int _pokemon_type_cached_byte_size_;
  ::google::protobuf::int32 incense_lifetime_seconds_;
  float pokemon_incense_type_probability_;
  ::google::protobuf::int32 standing_time_between_encounters_seconds_;
  ::google::protobuf::int32 moving_time_between_encounter_seconds_;
  ::google::protobuf::int32 distance_required_for_shorter_interval_meters_;
  ::google::protobuf::int32 pokemon_attracted_length_sec_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto();

  void InitAsDefaultInstance();
  static IncenseAttributes* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IncenseAttributes

// optional int32 incense_lifetime_seconds = 1;
inline void IncenseAttributes::clear_incense_lifetime_seconds() {
  incense_lifetime_seconds_ = 0;
}
inline ::google::protobuf::int32 IncenseAttributes::incense_lifetime_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.incense_lifetime_seconds)
  return incense_lifetime_seconds_;
}
inline void IncenseAttributes::set_incense_lifetime_seconds(::google::protobuf::int32 value) {
  
  incense_lifetime_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.incense_lifetime_seconds)
}

// repeated .POGOProtos.Enums.PokemonType pokemon_type = 2;
inline int IncenseAttributes::pokemon_type_size() const {
  return pokemon_type_.size();
}
inline void IncenseAttributes::clear_pokemon_type() {
  pokemon_type_.Clear();
}
inline ::POGOProtos::Enums::PokemonType IncenseAttributes::pokemon_type(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_type)
  return static_cast< ::POGOProtos::Enums::PokemonType >(pokemon_type_.Get(index));
}
inline void IncenseAttributes::set_pokemon_type(int index, ::POGOProtos::Enums::PokemonType value) {
  pokemon_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_type)
}
inline void IncenseAttributes::add_pokemon_type(::POGOProtos::Enums::PokemonType value) {
  pokemon_type_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_type)
}
inline const ::google::protobuf::RepeatedField<int>&
IncenseAttributes::pokemon_type() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_type)
  return pokemon_type_;
}
inline ::google::protobuf::RepeatedField<int>*
IncenseAttributes::mutable_pokemon_type() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_type)
  return &pokemon_type_;
}

// optional float pokemon_incense_type_probability = 3;
inline void IncenseAttributes::clear_pokemon_incense_type_probability() {
  pokemon_incense_type_probability_ = 0;
}
inline float IncenseAttributes::pokemon_incense_type_probability() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_incense_type_probability)
  return pokemon_incense_type_probability_;
}
inline void IncenseAttributes::set_pokemon_incense_type_probability(float value) {
  
  pokemon_incense_type_probability_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_incense_type_probability)
}

// optional int32 standing_time_between_encounters_seconds = 4;
inline void IncenseAttributes::clear_standing_time_between_encounters_seconds() {
  standing_time_between_encounters_seconds_ = 0;
}
inline ::google::protobuf::int32 IncenseAttributes::standing_time_between_encounters_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.standing_time_between_encounters_seconds)
  return standing_time_between_encounters_seconds_;
}
inline void IncenseAttributes::set_standing_time_between_encounters_seconds(::google::protobuf::int32 value) {
  
  standing_time_between_encounters_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.standing_time_between_encounters_seconds)
}

// optional int32 moving_time_between_encounter_seconds = 5;
inline void IncenseAttributes::clear_moving_time_between_encounter_seconds() {
  moving_time_between_encounter_seconds_ = 0;
}
inline ::google::protobuf::int32 IncenseAttributes::moving_time_between_encounter_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.moving_time_between_encounter_seconds)
  return moving_time_between_encounter_seconds_;
}
inline void IncenseAttributes::set_moving_time_between_encounter_seconds(::google::protobuf::int32 value) {
  
  moving_time_between_encounter_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.moving_time_between_encounter_seconds)
}

// optional int32 distance_required_for_shorter_interval_meters = 6;
inline void IncenseAttributes::clear_distance_required_for_shorter_interval_meters() {
  distance_required_for_shorter_interval_meters_ = 0;
}
inline ::google::protobuf::int32 IncenseAttributes::distance_required_for_shorter_interval_meters() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.distance_required_for_shorter_interval_meters)
  return distance_required_for_shorter_interval_meters_;
}
inline void IncenseAttributes::set_distance_required_for_shorter_interval_meters(::google::protobuf::int32 value) {
  
  distance_required_for_shorter_interval_meters_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.distance_required_for_shorter_interval_meters)
}

// optional int32 pokemon_attracted_length_sec = 7;
inline void IncenseAttributes::clear_pokemon_attracted_length_sec() {
  pokemon_attracted_length_sec_ = 0;
}
inline ::google::protobuf::int32 IncenseAttributes::pokemon_attracted_length_sec() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_attracted_length_sec)
  return pokemon_attracted_length_sec_;
}
inline void IncenseAttributes::set_pokemon_attracted_length_sec(::google::protobuf::int32 value) {
  
  pokemon_attracted_length_sec_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_attracted_length_sec)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Item
}  // namespace Master
}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto__INCLUDED
