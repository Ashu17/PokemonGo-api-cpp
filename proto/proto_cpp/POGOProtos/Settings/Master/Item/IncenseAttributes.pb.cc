// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/Item/IncenseAttributes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Settings/Master/Item/IncenseAttributes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {
namespace Master {
namespace Item {

namespace {

const ::google::protobuf::Descriptor* IncenseAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncenseAttributes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto() {
  protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Settings/Master/Item/IncenseAttributes.proto");
  GOOGLE_CHECK(file != NULL);
  IncenseAttributes_descriptor_ = file->message_type(0);
  static const int IncenseAttributes_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseAttributes, incense_lifetime_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseAttributes, pokemon_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseAttributes, pokemon_incense_type_probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseAttributes, standing_time_between_encounters_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseAttributes, moving_time_between_encounter_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseAttributes, distance_required_for_shorter_interval_meters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseAttributes, pokemon_attracted_length_sec_),
  };
  IncenseAttributes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IncenseAttributes_descriptor_,
      IncenseAttributes::default_instance_,
      IncenseAttributes_offsets_,
      -1,
      -1,
      -1,
      sizeof(IncenseAttributes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseAttributes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseAttributes, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IncenseAttributes_descriptor_, &IncenseAttributes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto() {
  delete IncenseAttributes::default_instance_;
  delete IncenseAttributes_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n7POGOProtos/Settings/Master/Item/Incens"
    "eAttributes.proto\022\037POGOProtos.Settings.M"
    "aster.Item\032\"POGOProtos/Enums/PokemonType"
    ".proto\"\322\002\n\021IncenseAttributes\022 \n\030incense_"
    "lifetime_seconds\030\001 \001(\005\0223\n\014pokemon_type\030\002"
    " \003(\0162\035.POGOProtos.Enums.PokemonType\022(\n p"
    "okemon_incense_type_probability\030\003 \001(\002\0220\n"
    "(standing_time_between_encounters_second"
    "s\030\004 \001(\005\022-\n%moving_time_between_encounter"
    "_seconds\030\005 \001(\005\0225\n-distance_required_for_"
    "shorter_interval_meters\030\006 \001(\005\022$\n\034pokemon"
    "_attracted_length_sec\030\007 \001(\005b\006proto3", 475);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Settings/Master/Item/IncenseAttributes.proto", &protobuf_RegisterTypes);
  IncenseAttributes::default_instance_ = new IncenseAttributes();
  IncenseAttributes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto() {
    protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncenseAttributes::kIncenseLifetimeSecondsFieldNumber;
const int IncenseAttributes::kPokemonTypeFieldNumber;
const int IncenseAttributes::kPokemonIncenseTypeProbabilityFieldNumber;
const int IncenseAttributes::kStandingTimeBetweenEncountersSecondsFieldNumber;
const int IncenseAttributes::kMovingTimeBetweenEncounterSecondsFieldNumber;
const int IncenseAttributes::kDistanceRequiredForShorterIntervalMetersFieldNumber;
const int IncenseAttributes::kPokemonAttractedLengthSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncenseAttributes::IncenseAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Settings.Master.Item.IncenseAttributes)
}

void IncenseAttributes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IncenseAttributes::IncenseAttributes(const IncenseAttributes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Settings.Master.Item.IncenseAttributes)
}

void IncenseAttributes::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  incense_lifetime_seconds_ = 0;
  pokemon_incense_type_probability_ = 0;
  standing_time_between_encounters_seconds_ = 0;
  moving_time_between_encounter_seconds_ = 0;
  distance_required_for_shorter_interval_meters_ = 0;
  pokemon_attracted_length_sec_ = 0;
}

IncenseAttributes::~IncenseAttributes() {
  // @@protoc_insertion_point(destructor:POGOProtos.Settings.Master.Item.IncenseAttributes)
  SharedDtor();
}

void IncenseAttributes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IncenseAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncenseAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncenseAttributes_descriptor_;
}

const IncenseAttributes& IncenseAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fItem_2fIncenseAttributes_2eproto();
  return *default_instance_;
}

IncenseAttributes* IncenseAttributes::default_instance_ = NULL;

IncenseAttributes* IncenseAttributes::New(::google::protobuf::Arena* arena) const {
  IncenseAttributes* n = new IncenseAttributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IncenseAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Settings.Master.Item.IncenseAttributes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IncenseAttributes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IncenseAttributes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(incense_lifetime_seconds_, pokemon_attracted_length_sec_);

#undef ZR_HELPER_
#undef ZR_

  pokemon_type_.Clear();
}

bool IncenseAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Settings.Master.Item.IncenseAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 incense_lifetime_seconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &incense_lifetime_seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pokemon_type;
        break;
      }

      // repeated .POGOProtos.Enums.PokemonType pokemon_type = 2;
      case 2: {
        if (tag == 18) {
         parse_pokemon_type:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_pokemon_type(static_cast< ::POGOProtos::Enums::PokemonType >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_pokemon_type(static_cast< ::POGOProtos::Enums::PokemonType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_pokemon_incense_type_probability;
        break;
      }

      // optional float pokemon_incense_type_probability = 3;
      case 3: {
        if (tag == 29) {
         parse_pokemon_incense_type_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pokemon_incense_type_probability_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_standing_time_between_encounters_seconds;
        break;
      }

      // optional int32 standing_time_between_encounters_seconds = 4;
      case 4: {
        if (tag == 32) {
         parse_standing_time_between_encounters_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &standing_time_between_encounters_seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_moving_time_between_encounter_seconds;
        break;
      }

      // optional int32 moving_time_between_encounter_seconds = 5;
      case 5: {
        if (tag == 40) {
         parse_moving_time_between_encounter_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moving_time_between_encounter_seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_distance_required_for_shorter_interval_meters;
        break;
      }

      // optional int32 distance_required_for_shorter_interval_meters = 6;
      case 6: {
        if (tag == 48) {
         parse_distance_required_for_shorter_interval_meters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_required_for_shorter_interval_meters_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pokemon_attracted_length_sec;
        break;
      }

      // optional int32 pokemon_attracted_length_sec = 7;
      case 7: {
        if (tag == 56) {
         parse_pokemon_attracted_length_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokemon_attracted_length_sec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Settings.Master.Item.IncenseAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Settings.Master.Item.IncenseAttributes)
  return false;
#undef DO_
}

void IncenseAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Settings.Master.Item.IncenseAttributes)
  // optional int32 incense_lifetime_seconds = 1;
  if (this->incense_lifetime_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->incense_lifetime_seconds(), output);
  }

  // repeated .POGOProtos.Enums.PokemonType pokemon_type = 2;
  if (this->pokemon_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_pokemon_type_cached_byte_size_);
  }
  for (int i = 0; i < this->pokemon_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->pokemon_type(i), output);
  }

  // optional float pokemon_incense_type_probability = 3;
  if (this->pokemon_incense_type_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pokemon_incense_type_probability(), output);
  }

  // optional int32 standing_time_between_encounters_seconds = 4;
  if (this->standing_time_between_encounters_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->standing_time_between_encounters_seconds(), output);
  }

  // optional int32 moving_time_between_encounter_seconds = 5;
  if (this->moving_time_between_encounter_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->moving_time_between_encounter_seconds(), output);
  }

  // optional int32 distance_required_for_shorter_interval_meters = 6;
  if (this->distance_required_for_shorter_interval_meters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->distance_required_for_shorter_interval_meters(), output);
  }

  // optional int32 pokemon_attracted_length_sec = 7;
  if (this->pokemon_attracted_length_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pokemon_attracted_length_sec(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Settings.Master.Item.IncenseAttributes)
}

::google::protobuf::uint8* IncenseAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Settings.Master.Item.IncenseAttributes)
  // optional int32 incense_lifetime_seconds = 1;
  if (this->incense_lifetime_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->incense_lifetime_seconds(), target);
  }

  // repeated .POGOProtos.Enums.PokemonType pokemon_type = 2;
  if (this->pokemon_type_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _pokemon_type_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pokemon_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->pokemon_type(i), target);
  }

  // optional float pokemon_incense_type_probability = 3;
  if (this->pokemon_incense_type_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pokemon_incense_type_probability(), target);
  }

  // optional int32 standing_time_between_encounters_seconds = 4;
  if (this->standing_time_between_encounters_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->standing_time_between_encounters_seconds(), target);
  }

  // optional int32 moving_time_between_encounter_seconds = 5;
  if (this->moving_time_between_encounter_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->moving_time_between_encounter_seconds(), target);
  }

  // optional int32 distance_required_for_shorter_interval_meters = 6;
  if (this->distance_required_for_shorter_interval_meters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->distance_required_for_shorter_interval_meters(), target);
  }

  // optional int32 pokemon_attracted_length_sec = 7;
  if (this->pokemon_attracted_length_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pokemon_attracted_length_sec(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Settings.Master.Item.IncenseAttributes)
  return target;
}

int IncenseAttributes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Settings.Master.Item.IncenseAttributes)
  int total_size = 0;

  // optional int32 incense_lifetime_seconds = 1;
  if (this->incense_lifetime_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->incense_lifetime_seconds());
  }

  // optional float pokemon_incense_type_probability = 3;
  if (this->pokemon_incense_type_probability() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 standing_time_between_encounters_seconds = 4;
  if (this->standing_time_between_encounters_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->standing_time_between_encounters_seconds());
  }

  // optional int32 moving_time_between_encounter_seconds = 5;
  if (this->moving_time_between_encounter_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->moving_time_between_encounter_seconds());
  }

  // optional int32 distance_required_for_shorter_interval_meters = 6;
  if (this->distance_required_for_shorter_interval_meters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->distance_required_for_shorter_interval_meters());
  }

  // optional int32 pokemon_attracted_length_sec = 7;
  if (this->pokemon_attracted_length_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pokemon_attracted_length_sec());
  }

  // repeated .POGOProtos.Enums.PokemonType pokemon_type = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pokemon_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->pokemon_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pokemon_type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncenseAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Settings.Master.Item.IncenseAttributes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IncenseAttributes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IncenseAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Settings.Master.Item.IncenseAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Settings.Master.Item.IncenseAttributes)
    MergeFrom(*source);
  }
}

void IncenseAttributes::MergeFrom(const IncenseAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Settings.Master.Item.IncenseAttributes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pokemon_type_.MergeFrom(from.pokemon_type_);
  if (from.incense_lifetime_seconds() != 0) {
    set_incense_lifetime_seconds(from.incense_lifetime_seconds());
  }
  if (from.pokemon_incense_type_probability() != 0) {
    set_pokemon_incense_type_probability(from.pokemon_incense_type_probability());
  }
  if (from.standing_time_between_encounters_seconds() != 0) {
    set_standing_time_between_encounters_seconds(from.standing_time_between_encounters_seconds());
  }
  if (from.moving_time_between_encounter_seconds() != 0) {
    set_moving_time_between_encounter_seconds(from.moving_time_between_encounter_seconds());
  }
  if (from.distance_required_for_shorter_interval_meters() != 0) {
    set_distance_required_for_shorter_interval_meters(from.distance_required_for_shorter_interval_meters());
  }
  if (from.pokemon_attracted_length_sec() != 0) {
    set_pokemon_attracted_length_sec(from.pokemon_attracted_length_sec());
  }
}

void IncenseAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Settings.Master.Item.IncenseAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncenseAttributes::CopyFrom(const IncenseAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Settings.Master.Item.IncenseAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncenseAttributes::IsInitialized() const {

  return true;
}

void IncenseAttributes::Swap(IncenseAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncenseAttributes::InternalSwap(IncenseAttributes* other) {
  std::swap(incense_lifetime_seconds_, other->incense_lifetime_seconds_);
  pokemon_type_.UnsafeArenaSwap(&other->pokemon_type_);
  std::swap(pokemon_incense_type_probability_, other->pokemon_incense_type_probability_);
  std::swap(standing_time_between_encounters_seconds_, other->standing_time_between_encounters_seconds_);
  std::swap(moving_time_between_encounter_seconds_, other->moving_time_between_encounter_seconds_);
  std::swap(distance_required_for_shorter_interval_meters_, other->distance_required_for_shorter_interval_meters_);
  std::swap(pokemon_attracted_length_sec_, other->pokemon_attracted_length_sec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IncenseAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncenseAttributes_descriptor_;
  metadata.reflection = IncenseAttributes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IncenseAttributes

// optional int32 incense_lifetime_seconds = 1;
void IncenseAttributes::clear_incense_lifetime_seconds() {
  incense_lifetime_seconds_ = 0;
}
 ::google::protobuf::int32 IncenseAttributes::incense_lifetime_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.incense_lifetime_seconds)
  return incense_lifetime_seconds_;
}
 void IncenseAttributes::set_incense_lifetime_seconds(::google::protobuf::int32 value) {
  
  incense_lifetime_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.incense_lifetime_seconds)
}

// repeated .POGOProtos.Enums.PokemonType pokemon_type = 2;
int IncenseAttributes::pokemon_type_size() const {
  return pokemon_type_.size();
}
void IncenseAttributes::clear_pokemon_type() {
  pokemon_type_.Clear();
}
 ::POGOProtos::Enums::PokemonType IncenseAttributes::pokemon_type(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_type)
  return static_cast< ::POGOProtos::Enums::PokemonType >(pokemon_type_.Get(index));
}
 void IncenseAttributes::set_pokemon_type(int index, ::POGOProtos::Enums::PokemonType value) {
  pokemon_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_type)
}
 void IncenseAttributes::add_pokemon_type(::POGOProtos::Enums::PokemonType value) {
  pokemon_type_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_type)
}
 const ::google::protobuf::RepeatedField<int>&
IncenseAttributes::pokemon_type() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_type)
  return pokemon_type_;
}
 ::google::protobuf::RepeatedField<int>*
IncenseAttributes::mutable_pokemon_type() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_type)
  return &pokemon_type_;
}

// optional float pokemon_incense_type_probability = 3;
void IncenseAttributes::clear_pokemon_incense_type_probability() {
  pokemon_incense_type_probability_ = 0;
}
 float IncenseAttributes::pokemon_incense_type_probability() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_incense_type_probability)
  return pokemon_incense_type_probability_;
}
 void IncenseAttributes::set_pokemon_incense_type_probability(float value) {
  
  pokemon_incense_type_probability_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_incense_type_probability)
}

// optional int32 standing_time_between_encounters_seconds = 4;
void IncenseAttributes::clear_standing_time_between_encounters_seconds() {
  standing_time_between_encounters_seconds_ = 0;
}
 ::google::protobuf::int32 IncenseAttributes::standing_time_between_encounters_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.standing_time_between_encounters_seconds)
  return standing_time_between_encounters_seconds_;
}
 void IncenseAttributes::set_standing_time_between_encounters_seconds(::google::protobuf::int32 value) {
  
  standing_time_between_encounters_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.standing_time_between_encounters_seconds)
}

// optional int32 moving_time_between_encounter_seconds = 5;
void IncenseAttributes::clear_moving_time_between_encounter_seconds() {
  moving_time_between_encounter_seconds_ = 0;
}
 ::google::protobuf::int32 IncenseAttributes::moving_time_between_encounter_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.moving_time_between_encounter_seconds)
  return moving_time_between_encounter_seconds_;
}
 void IncenseAttributes::set_moving_time_between_encounter_seconds(::google::protobuf::int32 value) {
  
  moving_time_between_encounter_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.moving_time_between_encounter_seconds)
}

// optional int32 distance_required_for_shorter_interval_meters = 6;
void IncenseAttributes::clear_distance_required_for_shorter_interval_meters() {
  distance_required_for_shorter_interval_meters_ = 0;
}
 ::google::protobuf::int32 IncenseAttributes::distance_required_for_shorter_interval_meters() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.distance_required_for_shorter_interval_meters)
  return distance_required_for_shorter_interval_meters_;
}
 void IncenseAttributes::set_distance_required_for_shorter_interval_meters(::google::protobuf::int32 value) {
  
  distance_required_for_shorter_interval_meters_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.distance_required_for_shorter_interval_meters)
}

// optional int32 pokemon_attracted_length_sec = 7;
void IncenseAttributes::clear_pokemon_attracted_length_sec() {
  pokemon_attracted_length_sec_ = 0;
}
 ::google::protobuf::int32 IncenseAttributes::pokemon_attracted_length_sec() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_attracted_length_sec)
  return pokemon_attracted_length_sec_;
}
 void IncenseAttributes::set_pokemon_attracted_length_sec(::google::protobuf::int32 value) {
  
  pokemon_attracted_length_sec_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.Item.IncenseAttributes.pokemon_attracted_length_sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Item
}  // namespace Master
}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
