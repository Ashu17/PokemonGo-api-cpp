// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/GymBattleSettings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Settings/Master/GymBattleSettings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {
namespace Master {

namespace {

const ::google::protobuf::Descriptor* GymBattleSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GymBattleSettings_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto() {
  protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Settings/Master/GymBattleSettings.proto");
  GOOGLE_CHECK(file != NULL);
  GymBattleSettings_descriptor_ = file->message_type(0);
  static const int GymBattleSettings_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, energy_per_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, dodge_energy_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, retarget_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, enemy_attack_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, attack_server_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, round_duration_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, bonus_time_per_ally_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, maximum_attackers_per_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, same_type_attack_bonus_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, maximum_energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, energy_delta_per_health_lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, dodge_duration_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, minimum_player_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, swap_duration_ms_),
  };
  GymBattleSettings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GymBattleSettings_descriptor_,
      GymBattleSettings::default_instance_,
      GymBattleSettings_offsets_,
      -1,
      -1,
      -1,
      sizeof(GymBattleSettings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GymBattleSettings, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GymBattleSettings_descriptor_, &GymBattleSettings::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto() {
  delete GymBattleSettings::default_instance_;
  delete GymBattleSettings_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n2POGOProtos/Settings/Master/GymBattleSe"
    "ttings.proto\022\032POGOProtos.Settings.Master"
    "\"\306\003\n\021GymBattleSettings\022\026\n\016energy_per_sec"
    "\030\001 \001(\002\022\031\n\021dodge_energy_cost\030\002 \001(\002\022\030\n\020ret"
    "arget_seconds\030\003 \001(\002\022\035\n\025enemy_attack_inte"
    "rval\030\004 \001(\002\022\036\n\026attack_server_interval\030\005 \001"
    "(\002\022\036\n\026round_duration_seconds\030\006 \001(\002\022#\n\033bo"
    "nus_time_per_ally_seconds\030\007 \001(\002\022$\n\034maxim"
    "um_attackers_per_battle\030\010 \001(\005\022)\n!same_ty"
    "pe_attack_bonus_multiplier\030\t \001(\002\022\026\n\016maxi"
    "mum_energy\030\n \001(\005\022$\n\034energy_delta_per_hea"
    "lth_lost\030\013 \001(\002\022\031\n\021dodge_duration_ms\030\014 \001("
    "\005\022\034\n\024minimum_player_level\030\r \001(\005\022\030\n\020swap_"
    "duration_ms\030\016 \001(\005b\006proto3", 545);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Settings/Master/GymBattleSettings.proto", &protobuf_RegisterTypes);
  GymBattleSettings::default_instance_ = new GymBattleSettings();
  GymBattleSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto() {
    protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GymBattleSettings::kEnergyPerSecFieldNumber;
const int GymBattleSettings::kDodgeEnergyCostFieldNumber;
const int GymBattleSettings::kRetargetSecondsFieldNumber;
const int GymBattleSettings::kEnemyAttackIntervalFieldNumber;
const int GymBattleSettings::kAttackServerIntervalFieldNumber;
const int GymBattleSettings::kRoundDurationSecondsFieldNumber;
const int GymBattleSettings::kBonusTimePerAllySecondsFieldNumber;
const int GymBattleSettings::kMaximumAttackersPerBattleFieldNumber;
const int GymBattleSettings::kSameTypeAttackBonusMultiplierFieldNumber;
const int GymBattleSettings::kMaximumEnergyFieldNumber;
const int GymBattleSettings::kEnergyDeltaPerHealthLostFieldNumber;
const int GymBattleSettings::kDodgeDurationMsFieldNumber;
const int GymBattleSettings::kMinimumPlayerLevelFieldNumber;
const int GymBattleSettings::kSwapDurationMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GymBattleSettings::GymBattleSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Settings.Master.GymBattleSettings)
}

void GymBattleSettings::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GymBattleSettings::GymBattleSettings(const GymBattleSettings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Settings.Master.GymBattleSettings)
}

void GymBattleSettings::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  energy_per_sec_ = 0;
  dodge_energy_cost_ = 0;
  retarget_seconds_ = 0;
  enemy_attack_interval_ = 0;
  attack_server_interval_ = 0;
  round_duration_seconds_ = 0;
  bonus_time_per_ally_seconds_ = 0;
  maximum_attackers_per_battle_ = 0;
  same_type_attack_bonus_multiplier_ = 0;
  maximum_energy_ = 0;
  energy_delta_per_health_lost_ = 0;
  dodge_duration_ms_ = 0;
  minimum_player_level_ = 0;
  swap_duration_ms_ = 0;
}

GymBattleSettings::~GymBattleSettings() {
  // @@protoc_insertion_point(destructor:POGOProtos.Settings.Master.GymBattleSettings)
  SharedDtor();
}

void GymBattleSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GymBattleSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GymBattleSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GymBattleSettings_descriptor_;
}

const GymBattleSettings& GymBattleSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fGymBattleSettings_2eproto();
  return *default_instance_;
}

GymBattleSettings* GymBattleSettings::default_instance_ = NULL;

GymBattleSettings* GymBattleSettings::New(::google::protobuf::Arena* arena) const {
  GymBattleSettings* n = new GymBattleSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GymBattleSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Settings.Master.GymBattleSettings)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GymBattleSettings, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GymBattleSettings*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(energy_per_sec_, maximum_attackers_per_battle_);
  ZR_(same_type_attack_bonus_multiplier_, swap_duration_ms_);

#undef ZR_HELPER_
#undef ZR_

}

bool GymBattleSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Settings.Master.GymBattleSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float energy_per_sec = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_per_sec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_dodge_energy_cost;
        break;
      }

      // optional float dodge_energy_cost = 2;
      case 2: {
        if (tag == 21) {
         parse_dodge_energy_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dodge_energy_cost_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_retarget_seconds;
        break;
      }

      // optional float retarget_seconds = 3;
      case 3: {
        if (tag == 29) {
         parse_retarget_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &retarget_seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_enemy_attack_interval;
        break;
      }

      // optional float enemy_attack_interval = 4;
      case 4: {
        if (tag == 37) {
         parse_enemy_attack_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enemy_attack_interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_attack_server_interval;
        break;
      }

      // optional float attack_server_interval = 5;
      case 5: {
        if (tag == 45) {
         parse_attack_server_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attack_server_interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_round_duration_seconds;
        break;
      }

      // optional float round_duration_seconds = 6;
      case 6: {
        if (tag == 53) {
         parse_round_duration_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &round_duration_seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_bonus_time_per_ally_seconds;
        break;
      }

      // optional float bonus_time_per_ally_seconds = 7;
      case 7: {
        if (tag == 61) {
         parse_bonus_time_per_ally_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bonus_time_per_ally_seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maximum_attackers_per_battle;
        break;
      }

      // optional int32 maximum_attackers_per_battle = 8;
      case 8: {
        if (tag == 64) {
         parse_maximum_attackers_per_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_attackers_per_battle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_same_type_attack_bonus_multiplier;
        break;
      }

      // optional float same_type_attack_bonus_multiplier = 9;
      case 9: {
        if (tag == 77) {
         parse_same_type_attack_bonus_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &same_type_attack_bonus_multiplier_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maximum_energy;
        break;
      }

      // optional int32 maximum_energy = 10;
      case 10: {
        if (tag == 80) {
         parse_maximum_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_energy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_energy_delta_per_health_lost;
        break;
      }

      // optional float energy_delta_per_health_lost = 11;
      case 11: {
        if (tag == 93) {
         parse_energy_delta_per_health_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_delta_per_health_lost_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_dodge_duration_ms;
        break;
      }

      // optional int32 dodge_duration_ms = 12;
      case 12: {
        if (tag == 96) {
         parse_dodge_duration_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodge_duration_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_minimum_player_level;
        break;
      }

      // optional int32 minimum_player_level = 13;
      case 13: {
        if (tag == 104) {
         parse_minimum_player_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minimum_player_level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_swap_duration_ms;
        break;
      }

      // optional int32 swap_duration_ms = 14;
      case 14: {
        if (tag == 112) {
         parse_swap_duration_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &swap_duration_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Settings.Master.GymBattleSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Settings.Master.GymBattleSettings)
  return false;
#undef DO_
}

void GymBattleSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Settings.Master.GymBattleSettings)
  // optional float energy_per_sec = 1;
  if (this->energy_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->energy_per_sec(), output);
  }

  // optional float dodge_energy_cost = 2;
  if (this->dodge_energy_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dodge_energy_cost(), output);
  }

  // optional float retarget_seconds = 3;
  if (this->retarget_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->retarget_seconds(), output);
  }

  // optional float enemy_attack_interval = 4;
  if (this->enemy_attack_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->enemy_attack_interval(), output);
  }

  // optional float attack_server_interval = 5;
  if (this->attack_server_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->attack_server_interval(), output);
  }

  // optional float round_duration_seconds = 6;
  if (this->round_duration_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->round_duration_seconds(), output);
  }

  // optional float bonus_time_per_ally_seconds = 7;
  if (this->bonus_time_per_ally_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->bonus_time_per_ally_seconds(), output);
  }

  // optional int32 maximum_attackers_per_battle = 8;
  if (this->maximum_attackers_per_battle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maximum_attackers_per_battle(), output);
  }

  // optional float same_type_attack_bonus_multiplier = 9;
  if (this->same_type_attack_bonus_multiplier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->same_type_attack_bonus_multiplier(), output);
  }

  // optional int32 maximum_energy = 10;
  if (this->maximum_energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maximum_energy(), output);
  }

  // optional float energy_delta_per_health_lost = 11;
  if (this->energy_delta_per_health_lost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->energy_delta_per_health_lost(), output);
  }

  // optional int32 dodge_duration_ms = 12;
  if (this->dodge_duration_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dodge_duration_ms(), output);
  }

  // optional int32 minimum_player_level = 13;
  if (this->minimum_player_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->minimum_player_level(), output);
  }

  // optional int32 swap_duration_ms = 14;
  if (this->swap_duration_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->swap_duration_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Settings.Master.GymBattleSettings)
}

::google::protobuf::uint8* GymBattleSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Settings.Master.GymBattleSettings)
  // optional float energy_per_sec = 1;
  if (this->energy_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->energy_per_sec(), target);
  }

  // optional float dodge_energy_cost = 2;
  if (this->dodge_energy_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dodge_energy_cost(), target);
  }

  // optional float retarget_seconds = 3;
  if (this->retarget_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->retarget_seconds(), target);
  }

  // optional float enemy_attack_interval = 4;
  if (this->enemy_attack_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->enemy_attack_interval(), target);
  }

  // optional float attack_server_interval = 5;
  if (this->attack_server_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->attack_server_interval(), target);
  }

  // optional float round_duration_seconds = 6;
  if (this->round_duration_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->round_duration_seconds(), target);
  }

  // optional float bonus_time_per_ally_seconds = 7;
  if (this->bonus_time_per_ally_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->bonus_time_per_ally_seconds(), target);
  }

  // optional int32 maximum_attackers_per_battle = 8;
  if (this->maximum_attackers_per_battle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maximum_attackers_per_battle(), target);
  }

  // optional float same_type_attack_bonus_multiplier = 9;
  if (this->same_type_attack_bonus_multiplier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->same_type_attack_bonus_multiplier(), target);
  }

  // optional int32 maximum_energy = 10;
  if (this->maximum_energy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maximum_energy(), target);
  }

  // optional float energy_delta_per_health_lost = 11;
  if (this->energy_delta_per_health_lost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->energy_delta_per_health_lost(), target);
  }

  // optional int32 dodge_duration_ms = 12;
  if (this->dodge_duration_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dodge_duration_ms(), target);
  }

  // optional int32 minimum_player_level = 13;
  if (this->minimum_player_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->minimum_player_level(), target);
  }

  // optional int32 swap_duration_ms = 14;
  if (this->swap_duration_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->swap_duration_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Settings.Master.GymBattleSettings)
  return target;
}

int GymBattleSettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Settings.Master.GymBattleSettings)
  int total_size = 0;

  // optional float energy_per_sec = 1;
  if (this->energy_per_sec() != 0) {
    total_size += 1 + 4;
  }

  // optional float dodge_energy_cost = 2;
  if (this->dodge_energy_cost() != 0) {
    total_size += 1 + 4;
  }

  // optional float retarget_seconds = 3;
  if (this->retarget_seconds() != 0) {
    total_size += 1 + 4;
  }

  // optional float enemy_attack_interval = 4;
  if (this->enemy_attack_interval() != 0) {
    total_size += 1 + 4;
  }

  // optional float attack_server_interval = 5;
  if (this->attack_server_interval() != 0) {
    total_size += 1 + 4;
  }

  // optional float round_duration_seconds = 6;
  if (this->round_duration_seconds() != 0) {
    total_size += 1 + 4;
  }

  // optional float bonus_time_per_ally_seconds = 7;
  if (this->bonus_time_per_ally_seconds() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 maximum_attackers_per_battle = 8;
  if (this->maximum_attackers_per_battle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maximum_attackers_per_battle());
  }

  // optional float same_type_attack_bonus_multiplier = 9;
  if (this->same_type_attack_bonus_multiplier() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 maximum_energy = 10;
  if (this->maximum_energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maximum_energy());
  }

  // optional float energy_delta_per_health_lost = 11;
  if (this->energy_delta_per_health_lost() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 dodge_duration_ms = 12;
  if (this->dodge_duration_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dodge_duration_ms());
  }

  // optional int32 minimum_player_level = 13;
  if (this->minimum_player_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minimum_player_level());
  }

  // optional int32 swap_duration_ms = 14;
  if (this->swap_duration_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->swap_duration_ms());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GymBattleSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Settings.Master.GymBattleSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GymBattleSettings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GymBattleSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Settings.Master.GymBattleSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Settings.Master.GymBattleSettings)
    MergeFrom(*source);
  }
}

void GymBattleSettings::MergeFrom(const GymBattleSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Settings.Master.GymBattleSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.energy_per_sec() != 0) {
    set_energy_per_sec(from.energy_per_sec());
  }
  if (from.dodge_energy_cost() != 0) {
    set_dodge_energy_cost(from.dodge_energy_cost());
  }
  if (from.retarget_seconds() != 0) {
    set_retarget_seconds(from.retarget_seconds());
  }
  if (from.enemy_attack_interval() != 0) {
    set_enemy_attack_interval(from.enemy_attack_interval());
  }
  if (from.attack_server_interval() != 0) {
    set_attack_server_interval(from.attack_server_interval());
  }
  if (from.round_duration_seconds() != 0) {
    set_round_duration_seconds(from.round_duration_seconds());
  }
  if (from.bonus_time_per_ally_seconds() != 0) {
    set_bonus_time_per_ally_seconds(from.bonus_time_per_ally_seconds());
  }
  if (from.maximum_attackers_per_battle() != 0) {
    set_maximum_attackers_per_battle(from.maximum_attackers_per_battle());
  }
  if (from.same_type_attack_bonus_multiplier() != 0) {
    set_same_type_attack_bonus_multiplier(from.same_type_attack_bonus_multiplier());
  }
  if (from.maximum_energy() != 0) {
    set_maximum_energy(from.maximum_energy());
  }
  if (from.energy_delta_per_health_lost() != 0) {
    set_energy_delta_per_health_lost(from.energy_delta_per_health_lost());
  }
  if (from.dodge_duration_ms() != 0) {
    set_dodge_duration_ms(from.dodge_duration_ms());
  }
  if (from.minimum_player_level() != 0) {
    set_minimum_player_level(from.minimum_player_level());
  }
  if (from.swap_duration_ms() != 0) {
    set_swap_duration_ms(from.swap_duration_ms());
  }
}

void GymBattleSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Settings.Master.GymBattleSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GymBattleSettings::CopyFrom(const GymBattleSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Settings.Master.GymBattleSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GymBattleSettings::IsInitialized() const {

  return true;
}

void GymBattleSettings::Swap(GymBattleSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GymBattleSettings::InternalSwap(GymBattleSettings* other) {
  std::swap(energy_per_sec_, other->energy_per_sec_);
  std::swap(dodge_energy_cost_, other->dodge_energy_cost_);
  std::swap(retarget_seconds_, other->retarget_seconds_);
  std::swap(enemy_attack_interval_, other->enemy_attack_interval_);
  std::swap(attack_server_interval_, other->attack_server_interval_);
  std::swap(round_duration_seconds_, other->round_duration_seconds_);
  std::swap(bonus_time_per_ally_seconds_, other->bonus_time_per_ally_seconds_);
  std::swap(maximum_attackers_per_battle_, other->maximum_attackers_per_battle_);
  std::swap(same_type_attack_bonus_multiplier_, other->same_type_attack_bonus_multiplier_);
  std::swap(maximum_energy_, other->maximum_energy_);
  std::swap(energy_delta_per_health_lost_, other->energy_delta_per_health_lost_);
  std::swap(dodge_duration_ms_, other->dodge_duration_ms_);
  std::swap(minimum_player_level_, other->minimum_player_level_);
  std::swap(swap_duration_ms_, other->swap_duration_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GymBattleSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GymBattleSettings_descriptor_;
  metadata.reflection = GymBattleSettings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GymBattleSettings

// optional float energy_per_sec = 1;
void GymBattleSettings::clear_energy_per_sec() {
  energy_per_sec_ = 0;
}
 float GymBattleSettings::energy_per_sec() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.energy_per_sec)
  return energy_per_sec_;
}
 void GymBattleSettings::set_energy_per_sec(float value) {
  
  energy_per_sec_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.energy_per_sec)
}

// optional float dodge_energy_cost = 2;
void GymBattleSettings::clear_dodge_energy_cost() {
  dodge_energy_cost_ = 0;
}
 float GymBattleSettings::dodge_energy_cost() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.dodge_energy_cost)
  return dodge_energy_cost_;
}
 void GymBattleSettings::set_dodge_energy_cost(float value) {
  
  dodge_energy_cost_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.dodge_energy_cost)
}

// optional float retarget_seconds = 3;
void GymBattleSettings::clear_retarget_seconds() {
  retarget_seconds_ = 0;
}
 float GymBattleSettings::retarget_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.retarget_seconds)
  return retarget_seconds_;
}
 void GymBattleSettings::set_retarget_seconds(float value) {
  
  retarget_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.retarget_seconds)
}

// optional float enemy_attack_interval = 4;
void GymBattleSettings::clear_enemy_attack_interval() {
  enemy_attack_interval_ = 0;
}
 float GymBattleSettings::enemy_attack_interval() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.enemy_attack_interval)
  return enemy_attack_interval_;
}
 void GymBattleSettings::set_enemy_attack_interval(float value) {
  
  enemy_attack_interval_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.enemy_attack_interval)
}

// optional float attack_server_interval = 5;
void GymBattleSettings::clear_attack_server_interval() {
  attack_server_interval_ = 0;
}
 float GymBattleSettings::attack_server_interval() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.attack_server_interval)
  return attack_server_interval_;
}
 void GymBattleSettings::set_attack_server_interval(float value) {
  
  attack_server_interval_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.attack_server_interval)
}

// optional float round_duration_seconds = 6;
void GymBattleSettings::clear_round_duration_seconds() {
  round_duration_seconds_ = 0;
}
 float GymBattleSettings::round_duration_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.round_duration_seconds)
  return round_duration_seconds_;
}
 void GymBattleSettings::set_round_duration_seconds(float value) {
  
  round_duration_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.round_duration_seconds)
}

// optional float bonus_time_per_ally_seconds = 7;
void GymBattleSettings::clear_bonus_time_per_ally_seconds() {
  bonus_time_per_ally_seconds_ = 0;
}
 float GymBattleSettings::bonus_time_per_ally_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.bonus_time_per_ally_seconds)
  return bonus_time_per_ally_seconds_;
}
 void GymBattleSettings::set_bonus_time_per_ally_seconds(float value) {
  
  bonus_time_per_ally_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.bonus_time_per_ally_seconds)
}

// optional int32 maximum_attackers_per_battle = 8;
void GymBattleSettings::clear_maximum_attackers_per_battle() {
  maximum_attackers_per_battle_ = 0;
}
 ::google::protobuf::int32 GymBattleSettings::maximum_attackers_per_battle() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.maximum_attackers_per_battle)
  return maximum_attackers_per_battle_;
}
 void GymBattleSettings::set_maximum_attackers_per_battle(::google::protobuf::int32 value) {
  
  maximum_attackers_per_battle_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.maximum_attackers_per_battle)
}

// optional float same_type_attack_bonus_multiplier = 9;
void GymBattleSettings::clear_same_type_attack_bonus_multiplier() {
  same_type_attack_bonus_multiplier_ = 0;
}
 float GymBattleSettings::same_type_attack_bonus_multiplier() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.same_type_attack_bonus_multiplier)
  return same_type_attack_bonus_multiplier_;
}
 void GymBattleSettings::set_same_type_attack_bonus_multiplier(float value) {
  
  same_type_attack_bonus_multiplier_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.same_type_attack_bonus_multiplier)
}

// optional int32 maximum_energy = 10;
void GymBattleSettings::clear_maximum_energy() {
  maximum_energy_ = 0;
}
 ::google::protobuf::int32 GymBattleSettings::maximum_energy() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.maximum_energy)
  return maximum_energy_;
}
 void GymBattleSettings::set_maximum_energy(::google::protobuf::int32 value) {
  
  maximum_energy_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.maximum_energy)
}

// optional float energy_delta_per_health_lost = 11;
void GymBattleSettings::clear_energy_delta_per_health_lost() {
  energy_delta_per_health_lost_ = 0;
}
 float GymBattleSettings::energy_delta_per_health_lost() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.energy_delta_per_health_lost)
  return energy_delta_per_health_lost_;
}
 void GymBattleSettings::set_energy_delta_per_health_lost(float value) {
  
  energy_delta_per_health_lost_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.energy_delta_per_health_lost)
}

// optional int32 dodge_duration_ms = 12;
void GymBattleSettings::clear_dodge_duration_ms() {
  dodge_duration_ms_ = 0;
}
 ::google::protobuf::int32 GymBattleSettings::dodge_duration_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.dodge_duration_ms)
  return dodge_duration_ms_;
}
 void GymBattleSettings::set_dodge_duration_ms(::google::protobuf::int32 value) {
  
  dodge_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.dodge_duration_ms)
}

// optional int32 minimum_player_level = 13;
void GymBattleSettings::clear_minimum_player_level() {
  minimum_player_level_ = 0;
}
 ::google::protobuf::int32 GymBattleSettings::minimum_player_level() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.minimum_player_level)
  return minimum_player_level_;
}
 void GymBattleSettings::set_minimum_player_level(::google::protobuf::int32 value) {
  
  minimum_player_level_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.minimum_player_level)
}

// optional int32 swap_duration_ms = 14;
void GymBattleSettings::clear_swap_duration_ms() {
  swap_duration_ms_ = 0;
}
 ::google::protobuf::int32 GymBattleSettings::swap_duration_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.GymBattleSettings.swap_duration_ms)
  return swap_duration_ms_;
}
 void GymBattleSettings::set_swap_duration_ms(::google::protobuf::int32 value) {
  
  swap_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.GymBattleSettings.swap_duration_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Master
}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
