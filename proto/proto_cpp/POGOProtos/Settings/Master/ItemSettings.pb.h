// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/ItemSettings.proto

#ifndef PROTOBUF_POGOProtos_2fSettings_2fMaster_2fItemSettings_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fSettings_2fMaster_2fItemSettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "POGOProtos/Enums/ItemCategory.pb.h"
#include "POGOProtos/Inventory/Item/ItemId.pb.h"
#include "POGOProtos/Inventory/Item/ItemType.pb.h"
#include "POGOProtos/Settings/Master/Item/FoodAttributes.pb.h"
#include "POGOProtos/Settings/Master/Item/PotionAttributes.pb.h"
#include "POGOProtos/Settings/Master/Item/ReviveAttributes.pb.h"
#include "POGOProtos/Settings/Master/Item/BattleAttributes.pb.h"
#include "POGOProtos/Settings/Master/Item/IncenseAttributes.pb.h"
#include "POGOProtos/Settings/Master/Item/PokeballAttributes.pb.h"
#include "POGOProtos/Settings/Master/Item/FortModifierAttributes.pb.h"
#include "POGOProtos/Settings/Master/Item/EggIncubatorAttributes.pb.h"
#include "POGOProtos/Settings/Master/Item/ExperienceBoostAttributes.pb.h"
#include "POGOProtos/Settings/Master/Item/InventoryUpgradeAttributes.pb.h"
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {
namespace Master {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fItemSettings_2eproto();
void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fItemSettings_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fItemSettings_2eproto();

class ItemSettings;

// ===================================================================

class ItemSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Settings.Master.ItemSettings) */ {
 public:
  ItemSettings();
  virtual ~ItemSettings();

  ItemSettings(const ItemSettings& from);

  inline ItemSettings& operator=(const ItemSettings& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemSettings& default_instance();

  void Swap(ItemSettings* other);

  // implements Message ----------------------------------------------

  inline ItemSettings* New() const { return New(NULL); }

  ItemSettings* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemSettings& from);
  void MergeFrom(const ItemSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ItemSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .POGOProtos.Inventory.Item.ItemId item_id = 1;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  ::POGOProtos::Inventory::Item::ItemId item_id() const;
  void set_item_id(::POGOProtos::Inventory::Item::ItemId value);

  // optional .POGOProtos.Inventory.Item.ItemType item_type = 2;
  void clear_item_type();
  static const int kItemTypeFieldNumber = 2;
  ::POGOProtos::Inventory::Item::ItemType item_type() const;
  void set_item_type(::POGOProtos::Inventory::Item::ItemType value);

  // optional .POGOProtos.Enums.ItemCategory category = 3;
  void clear_category();
  static const int kCategoryFieldNumber = 3;
  ::POGOProtos::Enums::ItemCategory category() const;
  void set_category(::POGOProtos::Enums::ItemCategory value);

  // optional float drop_freq = 4;
  void clear_drop_freq();
  static const int kDropFreqFieldNumber = 4;
  float drop_freq() const;
  void set_drop_freq(float value);

  // optional int32 drop_trainer_level = 5;
  void clear_drop_trainer_level();
  static const int kDropTrainerLevelFieldNumber = 5;
  ::google::protobuf::int32 drop_trainer_level() const;
  void set_drop_trainer_level(::google::protobuf::int32 value);

  // optional .POGOProtos.Settings.Master.Item.PokeballAttributes pokeball = 6;
  bool has_pokeball() const;
  void clear_pokeball();
  static const int kPokeballFieldNumber = 6;
  const ::POGOProtos::Settings::Master::Item::PokeballAttributes& pokeball() const;
  ::POGOProtos::Settings::Master::Item::PokeballAttributes* mutable_pokeball();
  ::POGOProtos::Settings::Master::Item::PokeballAttributes* release_pokeball();
  void set_allocated_pokeball(::POGOProtos::Settings::Master::Item::PokeballAttributes* pokeball);

  // optional .POGOProtos.Settings.Master.Item.PotionAttributes potion = 7;
  bool has_potion() const;
  void clear_potion();
  static const int kPotionFieldNumber = 7;
  const ::POGOProtos::Settings::Master::Item::PotionAttributes& potion() const;
  ::POGOProtos::Settings::Master::Item::PotionAttributes* mutable_potion();
  ::POGOProtos::Settings::Master::Item::PotionAttributes* release_potion();
  void set_allocated_potion(::POGOProtos::Settings::Master::Item::PotionAttributes* potion);

  // optional .POGOProtos.Settings.Master.Item.ReviveAttributes revive = 8;
  bool has_revive() const;
  void clear_revive();
  static const int kReviveFieldNumber = 8;
  const ::POGOProtos::Settings::Master::Item::ReviveAttributes& revive() const;
  ::POGOProtos::Settings::Master::Item::ReviveAttributes* mutable_revive();
  ::POGOProtos::Settings::Master::Item::ReviveAttributes* release_revive();
  void set_allocated_revive(::POGOProtos::Settings::Master::Item::ReviveAttributes* revive);

  // optional .POGOProtos.Settings.Master.Item.BattleAttributes battle = 9;
  bool has_battle() const;
  void clear_battle();
  static const int kBattleFieldNumber = 9;
  const ::POGOProtos::Settings::Master::Item::BattleAttributes& battle() const;
  ::POGOProtos::Settings::Master::Item::BattleAttributes* mutable_battle();
  ::POGOProtos::Settings::Master::Item::BattleAttributes* release_battle();
  void set_allocated_battle(::POGOProtos::Settings::Master::Item::BattleAttributes* battle);

  // optional .POGOProtos.Settings.Master.Item.FoodAttributes food = 10;
  bool has_food() const;
  void clear_food();
  static const int kFoodFieldNumber = 10;
  const ::POGOProtos::Settings::Master::Item::FoodAttributes& food() const;
  ::POGOProtos::Settings::Master::Item::FoodAttributes* mutable_food();
  ::POGOProtos::Settings::Master::Item::FoodAttributes* release_food();
  void set_allocated_food(::POGOProtos::Settings::Master::Item::FoodAttributes* food);

  // optional .POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes inventory_upgrade = 11;
  bool has_inventory_upgrade() const;
  void clear_inventory_upgrade();
  static const int kInventoryUpgradeFieldNumber = 11;
  const ::POGOProtos::Settings::Master::Item::InventoryUpgradeAttributes& inventory_upgrade() const;
  ::POGOProtos::Settings::Master::Item::InventoryUpgradeAttributes* mutable_inventory_upgrade();
  ::POGOProtos::Settings::Master::Item::InventoryUpgradeAttributes* release_inventory_upgrade();
  void set_allocated_inventory_upgrade(::POGOProtos::Settings::Master::Item::InventoryUpgradeAttributes* inventory_upgrade);

  // optional .POGOProtos.Settings.Master.Item.ExperienceBoostAttributes xp_boost = 12;
  bool has_xp_boost() const;
  void clear_xp_boost();
  static const int kXpBoostFieldNumber = 12;
  const ::POGOProtos::Settings::Master::Item::ExperienceBoostAttributes& xp_boost() const;
  ::POGOProtos::Settings::Master::Item::ExperienceBoostAttributes* mutable_xp_boost();
  ::POGOProtos::Settings::Master::Item::ExperienceBoostAttributes* release_xp_boost();
  void set_allocated_xp_boost(::POGOProtos::Settings::Master::Item::ExperienceBoostAttributes* xp_boost);

  // optional .POGOProtos.Settings.Master.Item.IncenseAttributes incense = 13;
  bool has_incense() const;
  void clear_incense();
  static const int kIncenseFieldNumber = 13;
  const ::POGOProtos::Settings::Master::Item::IncenseAttributes& incense() const;
  ::POGOProtos::Settings::Master::Item::IncenseAttributes* mutable_incense();
  ::POGOProtos::Settings::Master::Item::IncenseAttributes* release_incense();
  void set_allocated_incense(::POGOProtos::Settings::Master::Item::IncenseAttributes* incense);

  // optional .POGOProtos.Settings.Master.Item.EggIncubatorAttributes egg_incubator = 14;
  bool has_egg_incubator() const;
  void clear_egg_incubator();
  static const int kEggIncubatorFieldNumber = 14;
  const ::POGOProtos::Settings::Master::Item::EggIncubatorAttributes& egg_incubator() const;
  ::POGOProtos::Settings::Master::Item::EggIncubatorAttributes* mutable_egg_incubator();
  ::POGOProtos::Settings::Master::Item::EggIncubatorAttributes* release_egg_incubator();
  void set_allocated_egg_incubator(::POGOProtos::Settings::Master::Item::EggIncubatorAttributes* egg_incubator);

  // optional .POGOProtos.Settings.Master.Item.FortModifierAttributes fort_modifier = 15;
  bool has_fort_modifier() const;
  void clear_fort_modifier();
  static const int kFortModifierFieldNumber = 15;
  const ::POGOProtos::Settings::Master::Item::FortModifierAttributes& fort_modifier() const;
  ::POGOProtos::Settings::Master::Item::FortModifierAttributes* mutable_fort_modifier();
  ::POGOProtos::Settings::Master::Item::FortModifierAttributes* release_fort_modifier();
  void set_allocated_fort_modifier(::POGOProtos::Settings::Master::Item::FortModifierAttributes* fort_modifier);

  // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.ItemSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int item_id_;
  int item_type_;
  int category_;
  float drop_freq_;
  ::POGOProtos::Settings::Master::Item::PokeballAttributes* pokeball_;
  ::POGOProtos::Settings::Master::Item::PotionAttributes* potion_;
  ::POGOProtos::Settings::Master::Item::ReviveAttributes* revive_;
  ::POGOProtos::Settings::Master::Item::BattleAttributes* battle_;
  ::POGOProtos::Settings::Master::Item::FoodAttributes* food_;
  ::POGOProtos::Settings::Master::Item::InventoryUpgradeAttributes* inventory_upgrade_;
  ::POGOProtos::Settings::Master::Item::ExperienceBoostAttributes* xp_boost_;
  ::POGOProtos::Settings::Master::Item::IncenseAttributes* incense_;
  ::POGOProtos::Settings::Master::Item::EggIncubatorAttributes* egg_incubator_;
  ::POGOProtos::Settings::Master::Item::FortModifierAttributes* fort_modifier_;
  ::google::protobuf::int32 drop_trainer_level_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fSettings_2fMaster_2fItemSettings_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fSettings_2fMaster_2fItemSettings_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fSettings_2fMaster_2fItemSettings_2eproto();

  void InitAsDefaultInstance();
  static ItemSettings* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemSettings

// optional .POGOProtos.Inventory.Item.ItemId item_id = 1;
inline void ItemSettings::clear_item_id() {
  item_id_ = 0;
}
inline ::POGOProtos::Inventory::Item::ItemId ItemSettings::item_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.item_id)
  return static_cast< ::POGOProtos::Inventory::Item::ItemId >(item_id_);
}
inline void ItemSettings::set_item_id(::POGOProtos::Inventory::Item::ItemId value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.ItemSettings.item_id)
}

// optional .POGOProtos.Inventory.Item.ItemType item_type = 2;
inline void ItemSettings::clear_item_type() {
  item_type_ = 0;
}
inline ::POGOProtos::Inventory::Item::ItemType ItemSettings::item_type() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.item_type)
  return static_cast< ::POGOProtos::Inventory::Item::ItemType >(item_type_);
}
inline void ItemSettings::set_item_type(::POGOProtos::Inventory::Item::ItemType value) {
  
  item_type_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.ItemSettings.item_type)
}

// optional .POGOProtos.Enums.ItemCategory category = 3;
inline void ItemSettings::clear_category() {
  category_ = 0;
}
inline ::POGOProtos::Enums::ItemCategory ItemSettings::category() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.category)
  return static_cast< ::POGOProtos::Enums::ItemCategory >(category_);
}
inline void ItemSettings::set_category(::POGOProtos::Enums::ItemCategory value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.ItemSettings.category)
}

// optional float drop_freq = 4;
inline void ItemSettings::clear_drop_freq() {
  drop_freq_ = 0;
}
inline float ItemSettings::drop_freq() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.drop_freq)
  return drop_freq_;
}
inline void ItemSettings::set_drop_freq(float value) {
  
  drop_freq_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.ItemSettings.drop_freq)
}

// optional int32 drop_trainer_level = 5;
inline void ItemSettings::clear_drop_trainer_level() {
  drop_trainer_level_ = 0;
}
inline ::google::protobuf::int32 ItemSettings::drop_trainer_level() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.drop_trainer_level)
  return drop_trainer_level_;
}
inline void ItemSettings::set_drop_trainer_level(::google::protobuf::int32 value) {
  
  drop_trainer_level_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.Master.ItemSettings.drop_trainer_level)
}

// optional .POGOProtos.Settings.Master.Item.PokeballAttributes pokeball = 6;
inline bool ItemSettings::has_pokeball() const {
  return !_is_default_instance_ && pokeball_ != NULL;
}
inline void ItemSettings::clear_pokeball() {
  if (GetArenaNoVirtual() == NULL && pokeball_ != NULL) delete pokeball_;
  pokeball_ = NULL;
}
inline const ::POGOProtos::Settings::Master::Item::PokeballAttributes& ItemSettings::pokeball() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.pokeball)
  return pokeball_ != NULL ? *pokeball_ : *default_instance_->pokeball_;
}
inline ::POGOProtos::Settings::Master::Item::PokeballAttributes* ItemSettings::mutable_pokeball() {
  
  if (pokeball_ == NULL) {
    pokeball_ = new ::POGOProtos::Settings::Master::Item::PokeballAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.ItemSettings.pokeball)
  return pokeball_;
}
inline ::POGOProtos::Settings::Master::Item::PokeballAttributes* ItemSettings::release_pokeball() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.ItemSettings.pokeball)
  
  ::POGOProtos::Settings::Master::Item::PokeballAttributes* temp = pokeball_;
  pokeball_ = NULL;
  return temp;
}
inline void ItemSettings::set_allocated_pokeball(::POGOProtos::Settings::Master::Item::PokeballAttributes* pokeball) {
  delete pokeball_;
  pokeball_ = pokeball;
  if (pokeball) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.ItemSettings.pokeball)
}

// optional .POGOProtos.Settings.Master.Item.PotionAttributes potion = 7;
inline bool ItemSettings::has_potion() const {
  return !_is_default_instance_ && potion_ != NULL;
}
inline void ItemSettings::clear_potion() {
  if (GetArenaNoVirtual() == NULL && potion_ != NULL) delete potion_;
  potion_ = NULL;
}
inline const ::POGOProtos::Settings::Master::Item::PotionAttributes& ItemSettings::potion() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.potion)
  return potion_ != NULL ? *potion_ : *default_instance_->potion_;
}
inline ::POGOProtos::Settings::Master::Item::PotionAttributes* ItemSettings::mutable_potion() {
  
  if (potion_ == NULL) {
    potion_ = new ::POGOProtos::Settings::Master::Item::PotionAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.ItemSettings.potion)
  return potion_;
}
inline ::POGOProtos::Settings::Master::Item::PotionAttributes* ItemSettings::release_potion() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.ItemSettings.potion)
  
  ::POGOProtos::Settings::Master::Item::PotionAttributes* temp = potion_;
  potion_ = NULL;
  return temp;
}
inline void ItemSettings::set_allocated_potion(::POGOProtos::Settings::Master::Item::PotionAttributes* potion) {
  delete potion_;
  potion_ = potion;
  if (potion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.ItemSettings.potion)
}

// optional .POGOProtos.Settings.Master.Item.ReviveAttributes revive = 8;
inline bool ItemSettings::has_revive() const {
  return !_is_default_instance_ && revive_ != NULL;
}
inline void ItemSettings::clear_revive() {
  if (GetArenaNoVirtual() == NULL && revive_ != NULL) delete revive_;
  revive_ = NULL;
}
inline const ::POGOProtos::Settings::Master::Item::ReviveAttributes& ItemSettings::revive() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.revive)
  return revive_ != NULL ? *revive_ : *default_instance_->revive_;
}
inline ::POGOProtos::Settings::Master::Item::ReviveAttributes* ItemSettings::mutable_revive() {
  
  if (revive_ == NULL) {
    revive_ = new ::POGOProtos::Settings::Master::Item::ReviveAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.ItemSettings.revive)
  return revive_;
}
inline ::POGOProtos::Settings::Master::Item::ReviveAttributes* ItemSettings::release_revive() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.ItemSettings.revive)
  
  ::POGOProtos::Settings::Master::Item::ReviveAttributes* temp = revive_;
  revive_ = NULL;
  return temp;
}
inline void ItemSettings::set_allocated_revive(::POGOProtos::Settings::Master::Item::ReviveAttributes* revive) {
  delete revive_;
  revive_ = revive;
  if (revive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.ItemSettings.revive)
}

// optional .POGOProtos.Settings.Master.Item.BattleAttributes battle = 9;
inline bool ItemSettings::has_battle() const {
  return !_is_default_instance_ && battle_ != NULL;
}
inline void ItemSettings::clear_battle() {
  if (GetArenaNoVirtual() == NULL && battle_ != NULL) delete battle_;
  battle_ = NULL;
}
inline const ::POGOProtos::Settings::Master::Item::BattleAttributes& ItemSettings::battle() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.battle)
  return battle_ != NULL ? *battle_ : *default_instance_->battle_;
}
inline ::POGOProtos::Settings::Master::Item::BattleAttributes* ItemSettings::mutable_battle() {
  
  if (battle_ == NULL) {
    battle_ = new ::POGOProtos::Settings::Master::Item::BattleAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.ItemSettings.battle)
  return battle_;
}
inline ::POGOProtos::Settings::Master::Item::BattleAttributes* ItemSettings::release_battle() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.ItemSettings.battle)
  
  ::POGOProtos::Settings::Master::Item::BattleAttributes* temp = battle_;
  battle_ = NULL;
  return temp;
}
inline void ItemSettings::set_allocated_battle(::POGOProtos::Settings::Master::Item::BattleAttributes* battle) {
  delete battle_;
  battle_ = battle;
  if (battle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.ItemSettings.battle)
}

// optional .POGOProtos.Settings.Master.Item.FoodAttributes food = 10;
inline bool ItemSettings::has_food() const {
  return !_is_default_instance_ && food_ != NULL;
}
inline void ItemSettings::clear_food() {
  if (GetArenaNoVirtual() == NULL && food_ != NULL) delete food_;
  food_ = NULL;
}
inline const ::POGOProtos::Settings::Master::Item::FoodAttributes& ItemSettings::food() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.food)
  return food_ != NULL ? *food_ : *default_instance_->food_;
}
inline ::POGOProtos::Settings::Master::Item::FoodAttributes* ItemSettings::mutable_food() {
  
  if (food_ == NULL) {
    food_ = new ::POGOProtos::Settings::Master::Item::FoodAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.ItemSettings.food)
  return food_;
}
inline ::POGOProtos::Settings::Master::Item::FoodAttributes* ItemSettings::release_food() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.ItemSettings.food)
  
  ::POGOProtos::Settings::Master::Item::FoodAttributes* temp = food_;
  food_ = NULL;
  return temp;
}
inline void ItemSettings::set_allocated_food(::POGOProtos::Settings::Master::Item::FoodAttributes* food) {
  delete food_;
  food_ = food;
  if (food) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.ItemSettings.food)
}

// optional .POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes inventory_upgrade = 11;
inline bool ItemSettings::has_inventory_upgrade() const {
  return !_is_default_instance_ && inventory_upgrade_ != NULL;
}
inline void ItemSettings::clear_inventory_upgrade() {
  if (GetArenaNoVirtual() == NULL && inventory_upgrade_ != NULL) delete inventory_upgrade_;
  inventory_upgrade_ = NULL;
}
inline const ::POGOProtos::Settings::Master::Item::InventoryUpgradeAttributes& ItemSettings::inventory_upgrade() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.inventory_upgrade)
  return inventory_upgrade_ != NULL ? *inventory_upgrade_ : *default_instance_->inventory_upgrade_;
}
inline ::POGOProtos::Settings::Master::Item::InventoryUpgradeAttributes* ItemSettings::mutable_inventory_upgrade() {
  
  if (inventory_upgrade_ == NULL) {
    inventory_upgrade_ = new ::POGOProtos::Settings::Master::Item::InventoryUpgradeAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.ItemSettings.inventory_upgrade)
  return inventory_upgrade_;
}
inline ::POGOProtos::Settings::Master::Item::InventoryUpgradeAttributes* ItemSettings::release_inventory_upgrade() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.ItemSettings.inventory_upgrade)
  
  ::POGOProtos::Settings::Master::Item::InventoryUpgradeAttributes* temp = inventory_upgrade_;
  inventory_upgrade_ = NULL;
  return temp;
}
inline void ItemSettings::set_allocated_inventory_upgrade(::POGOProtos::Settings::Master::Item::InventoryUpgradeAttributes* inventory_upgrade) {
  delete inventory_upgrade_;
  inventory_upgrade_ = inventory_upgrade;
  if (inventory_upgrade) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.ItemSettings.inventory_upgrade)
}

// optional .POGOProtos.Settings.Master.Item.ExperienceBoostAttributes xp_boost = 12;
inline bool ItemSettings::has_xp_boost() const {
  return !_is_default_instance_ && xp_boost_ != NULL;
}
inline void ItemSettings::clear_xp_boost() {
  if (GetArenaNoVirtual() == NULL && xp_boost_ != NULL) delete xp_boost_;
  xp_boost_ = NULL;
}
inline const ::POGOProtos::Settings::Master::Item::ExperienceBoostAttributes& ItemSettings::xp_boost() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.xp_boost)
  return xp_boost_ != NULL ? *xp_boost_ : *default_instance_->xp_boost_;
}
inline ::POGOProtos::Settings::Master::Item::ExperienceBoostAttributes* ItemSettings::mutable_xp_boost() {
  
  if (xp_boost_ == NULL) {
    xp_boost_ = new ::POGOProtos::Settings::Master::Item::ExperienceBoostAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.ItemSettings.xp_boost)
  return xp_boost_;
}
inline ::POGOProtos::Settings::Master::Item::ExperienceBoostAttributes* ItemSettings::release_xp_boost() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.ItemSettings.xp_boost)
  
  ::POGOProtos::Settings::Master::Item::ExperienceBoostAttributes* temp = xp_boost_;
  xp_boost_ = NULL;
  return temp;
}
inline void ItemSettings::set_allocated_xp_boost(::POGOProtos::Settings::Master::Item::ExperienceBoostAttributes* xp_boost) {
  delete xp_boost_;
  xp_boost_ = xp_boost;
  if (xp_boost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.ItemSettings.xp_boost)
}

// optional .POGOProtos.Settings.Master.Item.IncenseAttributes incense = 13;
inline bool ItemSettings::has_incense() const {
  return !_is_default_instance_ && incense_ != NULL;
}
inline void ItemSettings::clear_incense() {
  if (GetArenaNoVirtual() == NULL && incense_ != NULL) delete incense_;
  incense_ = NULL;
}
inline const ::POGOProtos::Settings::Master::Item::IncenseAttributes& ItemSettings::incense() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.incense)
  return incense_ != NULL ? *incense_ : *default_instance_->incense_;
}
inline ::POGOProtos::Settings::Master::Item::IncenseAttributes* ItemSettings::mutable_incense() {
  
  if (incense_ == NULL) {
    incense_ = new ::POGOProtos::Settings::Master::Item::IncenseAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.ItemSettings.incense)
  return incense_;
}
inline ::POGOProtos::Settings::Master::Item::IncenseAttributes* ItemSettings::release_incense() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.ItemSettings.incense)
  
  ::POGOProtos::Settings::Master::Item::IncenseAttributes* temp = incense_;
  incense_ = NULL;
  return temp;
}
inline void ItemSettings::set_allocated_incense(::POGOProtos::Settings::Master::Item::IncenseAttributes* incense) {
  delete incense_;
  incense_ = incense;
  if (incense) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.ItemSettings.incense)
}

// optional .POGOProtos.Settings.Master.Item.EggIncubatorAttributes egg_incubator = 14;
inline bool ItemSettings::has_egg_incubator() const {
  return !_is_default_instance_ && egg_incubator_ != NULL;
}
inline void ItemSettings::clear_egg_incubator() {
  if (GetArenaNoVirtual() == NULL && egg_incubator_ != NULL) delete egg_incubator_;
  egg_incubator_ = NULL;
}
inline const ::POGOProtos::Settings::Master::Item::EggIncubatorAttributes& ItemSettings::egg_incubator() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.egg_incubator)
  return egg_incubator_ != NULL ? *egg_incubator_ : *default_instance_->egg_incubator_;
}
inline ::POGOProtos::Settings::Master::Item::EggIncubatorAttributes* ItemSettings::mutable_egg_incubator() {
  
  if (egg_incubator_ == NULL) {
    egg_incubator_ = new ::POGOProtos::Settings::Master::Item::EggIncubatorAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.ItemSettings.egg_incubator)
  return egg_incubator_;
}
inline ::POGOProtos::Settings::Master::Item::EggIncubatorAttributes* ItemSettings::release_egg_incubator() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.ItemSettings.egg_incubator)
  
  ::POGOProtos::Settings::Master::Item::EggIncubatorAttributes* temp = egg_incubator_;
  egg_incubator_ = NULL;
  return temp;
}
inline void ItemSettings::set_allocated_egg_incubator(::POGOProtos::Settings::Master::Item::EggIncubatorAttributes* egg_incubator) {
  delete egg_incubator_;
  egg_incubator_ = egg_incubator;
  if (egg_incubator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.ItemSettings.egg_incubator)
}

// optional .POGOProtos.Settings.Master.Item.FortModifierAttributes fort_modifier = 15;
inline bool ItemSettings::has_fort_modifier() const {
  return !_is_default_instance_ && fort_modifier_ != NULL;
}
inline void ItemSettings::clear_fort_modifier() {
  if (GetArenaNoVirtual() == NULL && fort_modifier_ != NULL) delete fort_modifier_;
  fort_modifier_ = NULL;
}
inline const ::POGOProtos::Settings::Master::Item::FortModifierAttributes& ItemSettings::fort_modifier() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.Master.ItemSettings.fort_modifier)
  return fort_modifier_ != NULL ? *fort_modifier_ : *default_instance_->fort_modifier_;
}
inline ::POGOProtos::Settings::Master::Item::FortModifierAttributes* ItemSettings::mutable_fort_modifier() {
  
  if (fort_modifier_ == NULL) {
    fort_modifier_ = new ::POGOProtos::Settings::Master::Item::FortModifierAttributes;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Settings.Master.ItemSettings.fort_modifier)
  return fort_modifier_;
}
inline ::POGOProtos::Settings::Master::Item::FortModifierAttributes* ItemSettings::release_fort_modifier() {
  // @@protoc_insertion_point(field_release:POGOProtos.Settings.Master.ItemSettings.fort_modifier)
  
  ::POGOProtos::Settings::Master::Item::FortModifierAttributes* temp = fort_modifier_;
  fort_modifier_ = NULL;
  return temp;
}
inline void ItemSettings::set_allocated_fort_modifier(::POGOProtos::Settings::Master::Item::FortModifierAttributes* fort_modifier) {
  delete fort_modifier_;
  fort_modifier_ = fort_modifier;
  if (fort_modifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Settings.Master.ItemSettings.fort_modifier)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Master
}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fSettings_2fMaster_2fItemSettings_2eproto__INCLUDED
