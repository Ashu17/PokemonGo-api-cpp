// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/GpsSettings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Settings/GpsSettings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {

namespace {

const ::google::protobuf::Descriptor* GpsSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpsSettings_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto() {
  protobuf_AddDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Settings/GpsSettings.proto");
  GOOGLE_CHECK(file != NULL);
  GpsSettings_descriptor_ = file->message_type(0);
  static const int GpsSettings_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSettings, driving_warning_speed_meters_per_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSettings, driving_warning_cooldown_minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSettings, driving_speed_sample_interval_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSettings, driving_speed_sample_count_),
  };
  GpsSettings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GpsSettings_descriptor_,
      GpsSettings::default_instance_,
      GpsSettings_offsets_,
      -1,
      -1,
      -1,
      sizeof(GpsSettings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSettings, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSettings, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GpsSettings_descriptor_, &GpsSettings::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fSettings_2fGpsSettings_2eproto() {
  delete GpsSettings::default_instance_;
  delete GpsSettings_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%POGOProtos/Settings/GpsSettings.proto\022"
    "\023POGOProtos.Settings\"\273\001\n\013GpsSettings\022/\n\'"
    "driving_warning_speed_meters_per_second\030"
    "\001 \001(\002\022(\n driving_warning_cooldown_minute"
    "s\030\002 \001(\002\022-\n%driving_speed_sample_interval"
    "_seconds\030\003 \001(\002\022\"\n\032driving_speed_sample_c"
    "ount\030\004 \001(\005b\006proto3", 258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Settings/GpsSettings.proto", &protobuf_RegisterTypes);
  GpsSettings::default_instance_ = new GpsSettings();
  GpsSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fSettings_2fGpsSettings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fSettings_2fGpsSettings_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fSettings_2fGpsSettings_2eproto() {
    protobuf_AddDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fSettings_2fGpsSettings_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpsSettings::kDrivingWarningSpeedMetersPerSecondFieldNumber;
const int GpsSettings::kDrivingWarningCooldownMinutesFieldNumber;
const int GpsSettings::kDrivingSpeedSampleIntervalSecondsFieldNumber;
const int GpsSettings::kDrivingSpeedSampleCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpsSettings::GpsSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Settings.GpsSettings)
}

void GpsSettings::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GpsSettings::GpsSettings(const GpsSettings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Settings.GpsSettings)
}

void GpsSettings::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  driving_warning_speed_meters_per_second_ = 0;
  driving_warning_cooldown_minutes_ = 0;
  driving_speed_sample_interval_seconds_ = 0;
  driving_speed_sample_count_ = 0;
}

GpsSettings::~GpsSettings() {
  // @@protoc_insertion_point(destructor:POGOProtos.Settings.GpsSettings)
  SharedDtor();
}

void GpsSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GpsSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpsSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsSettings_descriptor_;
}

const GpsSettings& GpsSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto();
  return *default_instance_;
}

GpsSettings* GpsSettings::default_instance_ = NULL;

GpsSettings* GpsSettings::New(::google::protobuf::Arena* arena) const {
  GpsSettings* n = new GpsSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GpsSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Settings.GpsSettings)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GpsSettings, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GpsSettings*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(driving_warning_speed_meters_per_second_, driving_speed_sample_count_);

#undef ZR_HELPER_
#undef ZR_

}

bool GpsSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Settings.GpsSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float driving_warning_speed_meters_per_second = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &driving_warning_speed_meters_per_second_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_driving_warning_cooldown_minutes;
        break;
      }

      // optional float driving_warning_cooldown_minutes = 2;
      case 2: {
        if (tag == 21) {
         parse_driving_warning_cooldown_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &driving_warning_cooldown_minutes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_driving_speed_sample_interval_seconds;
        break;
      }

      // optional float driving_speed_sample_interval_seconds = 3;
      case 3: {
        if (tag == 29) {
         parse_driving_speed_sample_interval_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &driving_speed_sample_interval_seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_driving_speed_sample_count;
        break;
      }

      // optional int32 driving_speed_sample_count = 4;
      case 4: {
        if (tag == 32) {
         parse_driving_speed_sample_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &driving_speed_sample_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Settings.GpsSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Settings.GpsSettings)
  return false;
#undef DO_
}

void GpsSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Settings.GpsSettings)
  // optional float driving_warning_speed_meters_per_second = 1;
  if (this->driving_warning_speed_meters_per_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->driving_warning_speed_meters_per_second(), output);
  }

  // optional float driving_warning_cooldown_minutes = 2;
  if (this->driving_warning_cooldown_minutes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->driving_warning_cooldown_minutes(), output);
  }

  // optional float driving_speed_sample_interval_seconds = 3;
  if (this->driving_speed_sample_interval_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->driving_speed_sample_interval_seconds(), output);
  }

  // optional int32 driving_speed_sample_count = 4;
  if (this->driving_speed_sample_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->driving_speed_sample_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Settings.GpsSettings)
}

::google::protobuf::uint8* GpsSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Settings.GpsSettings)
  // optional float driving_warning_speed_meters_per_second = 1;
  if (this->driving_warning_speed_meters_per_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->driving_warning_speed_meters_per_second(), target);
  }

  // optional float driving_warning_cooldown_minutes = 2;
  if (this->driving_warning_cooldown_minutes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->driving_warning_cooldown_minutes(), target);
  }

  // optional float driving_speed_sample_interval_seconds = 3;
  if (this->driving_speed_sample_interval_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->driving_speed_sample_interval_seconds(), target);
  }

  // optional int32 driving_speed_sample_count = 4;
  if (this->driving_speed_sample_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->driving_speed_sample_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Settings.GpsSettings)
  return target;
}

int GpsSettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Settings.GpsSettings)
  int total_size = 0;

  // optional float driving_warning_speed_meters_per_second = 1;
  if (this->driving_warning_speed_meters_per_second() != 0) {
    total_size += 1 + 4;
  }

  // optional float driving_warning_cooldown_minutes = 2;
  if (this->driving_warning_cooldown_minutes() != 0) {
    total_size += 1 + 4;
  }

  // optional float driving_speed_sample_interval_seconds = 3;
  if (this->driving_speed_sample_interval_seconds() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 driving_speed_sample_count = 4;
  if (this->driving_speed_sample_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->driving_speed_sample_count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Settings.GpsSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GpsSettings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GpsSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Settings.GpsSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Settings.GpsSettings)
    MergeFrom(*source);
  }
}

void GpsSettings::MergeFrom(const GpsSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Settings.GpsSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.driving_warning_speed_meters_per_second() != 0) {
    set_driving_warning_speed_meters_per_second(from.driving_warning_speed_meters_per_second());
  }
  if (from.driving_warning_cooldown_minutes() != 0) {
    set_driving_warning_cooldown_minutes(from.driving_warning_cooldown_minutes());
  }
  if (from.driving_speed_sample_interval_seconds() != 0) {
    set_driving_speed_sample_interval_seconds(from.driving_speed_sample_interval_seconds());
  }
  if (from.driving_speed_sample_count() != 0) {
    set_driving_speed_sample_count(from.driving_speed_sample_count());
  }
}

void GpsSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Settings.GpsSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsSettings::CopyFrom(const GpsSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Settings.GpsSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsSettings::IsInitialized() const {

  return true;
}

void GpsSettings::Swap(GpsSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpsSettings::InternalSwap(GpsSettings* other) {
  std::swap(driving_warning_speed_meters_per_second_, other->driving_warning_speed_meters_per_second_);
  std::swap(driving_warning_cooldown_minutes_, other->driving_warning_cooldown_minutes_);
  std::swap(driving_speed_sample_interval_seconds_, other->driving_speed_sample_interval_seconds_);
  std::swap(driving_speed_sample_count_, other->driving_speed_sample_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GpsSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpsSettings_descriptor_;
  metadata.reflection = GpsSettings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GpsSettings

// optional float driving_warning_speed_meters_per_second = 1;
void GpsSettings::clear_driving_warning_speed_meters_per_second() {
  driving_warning_speed_meters_per_second_ = 0;
}
 float GpsSettings::driving_warning_speed_meters_per_second() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.GpsSettings.driving_warning_speed_meters_per_second)
  return driving_warning_speed_meters_per_second_;
}
 void GpsSettings::set_driving_warning_speed_meters_per_second(float value) {
  
  driving_warning_speed_meters_per_second_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.GpsSettings.driving_warning_speed_meters_per_second)
}

// optional float driving_warning_cooldown_minutes = 2;
void GpsSettings::clear_driving_warning_cooldown_minutes() {
  driving_warning_cooldown_minutes_ = 0;
}
 float GpsSettings::driving_warning_cooldown_minutes() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.GpsSettings.driving_warning_cooldown_minutes)
  return driving_warning_cooldown_minutes_;
}
 void GpsSettings::set_driving_warning_cooldown_minutes(float value) {
  
  driving_warning_cooldown_minutes_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.GpsSettings.driving_warning_cooldown_minutes)
}

// optional float driving_speed_sample_interval_seconds = 3;
void GpsSettings::clear_driving_speed_sample_interval_seconds() {
  driving_speed_sample_interval_seconds_ = 0;
}
 float GpsSettings::driving_speed_sample_interval_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.GpsSettings.driving_speed_sample_interval_seconds)
  return driving_speed_sample_interval_seconds_;
}
 void GpsSettings::set_driving_speed_sample_interval_seconds(float value) {
  
  driving_speed_sample_interval_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.GpsSettings.driving_speed_sample_interval_seconds)
}

// optional int32 driving_speed_sample_count = 4;
void GpsSettings::clear_driving_speed_sample_count() {
  driving_speed_sample_count_ = 0;
}
 ::google::protobuf::int32 GpsSettings::driving_speed_sample_count() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.GpsSettings.driving_speed_sample_count)
  return driving_speed_sample_count_;
}
 void GpsSettings::set_driving_speed_sample_count(::google::protobuf::int32 value) {
  
  driving_speed_sample_count_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.GpsSettings.driving_speed_sample_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
