// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/GpsSettings.proto

#ifndef PROTOBUF_POGOProtos_2fSettings_2fGpsSettings_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fSettings_2fGpsSettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Settings {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto();
void protobuf_AssignDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fSettings_2fGpsSettings_2eproto();

class GpsSettings;

// ===================================================================

class GpsSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Settings.GpsSettings) */ {
 public:
  GpsSettings();
  virtual ~GpsSettings();

  GpsSettings(const GpsSettings& from);

  inline GpsSettings& operator=(const GpsSettings& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GpsSettings& default_instance();

  void Swap(GpsSettings* other);

  // implements Message ----------------------------------------------

  inline GpsSettings* New() const { return New(NULL); }

  GpsSettings* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GpsSettings& from);
  void MergeFrom(const GpsSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpsSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float driving_warning_speed_meters_per_second = 1;
  void clear_driving_warning_speed_meters_per_second();
  static const int kDrivingWarningSpeedMetersPerSecondFieldNumber = 1;
  float driving_warning_speed_meters_per_second() const;
  void set_driving_warning_speed_meters_per_second(float value);

  // optional float driving_warning_cooldown_minutes = 2;
  void clear_driving_warning_cooldown_minutes();
  static const int kDrivingWarningCooldownMinutesFieldNumber = 2;
  float driving_warning_cooldown_minutes() const;
  void set_driving_warning_cooldown_minutes(float value);

  // optional float driving_speed_sample_interval_seconds = 3;
  void clear_driving_speed_sample_interval_seconds();
  static const int kDrivingSpeedSampleIntervalSecondsFieldNumber = 3;
  float driving_speed_sample_interval_seconds() const;
  void set_driving_speed_sample_interval_seconds(float value);

  // optional int32 driving_speed_sample_count = 4;
  void clear_driving_speed_sample_count();
  static const int kDrivingSpeedSampleCountFieldNumber = 4;
  ::google::protobuf::int32 driving_speed_sample_count() const;
  void set_driving_speed_sample_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:POGOProtos.Settings.GpsSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float driving_warning_speed_meters_per_second_;
  float driving_warning_cooldown_minutes_;
  float driving_speed_sample_interval_seconds_;
  ::google::protobuf::int32 driving_speed_sample_count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fSettings_2fGpsSettings_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fSettings_2fGpsSettings_2eproto();

  void InitAsDefaultInstance();
  static GpsSettings* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GpsSettings

// optional float driving_warning_speed_meters_per_second = 1;
inline void GpsSettings::clear_driving_warning_speed_meters_per_second() {
  driving_warning_speed_meters_per_second_ = 0;
}
inline float GpsSettings::driving_warning_speed_meters_per_second() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.GpsSettings.driving_warning_speed_meters_per_second)
  return driving_warning_speed_meters_per_second_;
}
inline void GpsSettings::set_driving_warning_speed_meters_per_second(float value) {
  
  driving_warning_speed_meters_per_second_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.GpsSettings.driving_warning_speed_meters_per_second)
}

// optional float driving_warning_cooldown_minutes = 2;
inline void GpsSettings::clear_driving_warning_cooldown_minutes() {
  driving_warning_cooldown_minutes_ = 0;
}
inline float GpsSettings::driving_warning_cooldown_minutes() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.GpsSettings.driving_warning_cooldown_minutes)
  return driving_warning_cooldown_minutes_;
}
inline void GpsSettings::set_driving_warning_cooldown_minutes(float value) {
  
  driving_warning_cooldown_minutes_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.GpsSettings.driving_warning_cooldown_minutes)
}

// optional float driving_speed_sample_interval_seconds = 3;
inline void GpsSettings::clear_driving_speed_sample_interval_seconds() {
  driving_speed_sample_interval_seconds_ = 0;
}
inline float GpsSettings::driving_speed_sample_interval_seconds() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.GpsSettings.driving_speed_sample_interval_seconds)
  return driving_speed_sample_interval_seconds_;
}
inline void GpsSettings::set_driving_speed_sample_interval_seconds(float value) {
  
  driving_speed_sample_interval_seconds_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.GpsSettings.driving_speed_sample_interval_seconds)
}

// optional int32 driving_speed_sample_count = 4;
inline void GpsSettings::clear_driving_speed_sample_count() {
  driving_speed_sample_count_ = 0;
}
inline ::google::protobuf::int32 GpsSettings::driving_speed_sample_count() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Settings.GpsSettings.driving_speed_sample_count)
  return driving_speed_sample_count_;
}
inline void GpsSettings::set_driving_speed_sample_count(::google::protobuf::int32 value) {
  
  driving_speed_sample_count_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Settings.GpsSettings.driving_speed_sample_count)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Settings
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fSettings_2fGpsSettings_2eproto__INCLUDED
