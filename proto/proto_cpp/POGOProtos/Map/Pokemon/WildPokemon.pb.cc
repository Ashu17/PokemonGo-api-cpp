// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Map/Pokemon/WildPokemon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Map/Pokemon/WildPokemon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Map {
namespace Pokemon {

namespace {

const ::google::protobuf::Descriptor* WildPokemon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WildPokemon_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto() {
  protobuf_AddDesc_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Map/Pokemon/WildPokemon.proto");
  GOOGLE_CHECK(file != NULL);
  WildPokemon_descriptor_ = file->message_type(0);
  static const int WildPokemon_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildPokemon, encounter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildPokemon, last_modified_timestamp_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildPokemon, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildPokemon, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildPokemon, spawn_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildPokemon, pokemon_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildPokemon, time_till_hidden_ms_),
  };
  WildPokemon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WildPokemon_descriptor_,
      WildPokemon::default_instance_,
      WildPokemon_offsets_,
      -1,
      -1,
      -1,
      sizeof(WildPokemon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildPokemon, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildPokemon, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WildPokemon_descriptor_, &WildPokemon::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto() {
  delete WildPokemon::default_instance_;
  delete WildPokemon_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Data::protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(POGOProtos/Map/Pokemon/WildPokemon.pro"
    "to\022\026POGOProtos.Map.Pokemon\032!POGOProtos/D"
    "ata/PokemonData.proto\"\325\001\n\013WildPokemon\022\024\n"
    "\014encounter_id\030\001 \001(\006\022\"\n\032last_modified_tim"
    "estamp_ms\030\002 \001(\003\022\020\n\010latitude\030\003 \001(\001\022\021\n\tlon"
    "gitude\030\004 \001(\001\022\026\n\016spawn_point_id\030\005 \001(\t\0222\n\014"
    "pokemon_data\030\007 \001(\0132\034.POGOProtos.Data.Pok"
    "emonData\022\033\n\023time_till_hidden_ms\030\013 \001(\005b\006p"
    "roto3", 325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Map/Pokemon/WildPokemon.proto", &protobuf_RegisterTypes);
  WildPokemon::default_instance_ = new WildPokemon();
  WildPokemon::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto() {
    protobuf_AddDesc_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildPokemon::kEncounterIdFieldNumber;
const int WildPokemon::kLastModifiedTimestampMsFieldNumber;
const int WildPokemon::kLatitudeFieldNumber;
const int WildPokemon::kLongitudeFieldNumber;
const int WildPokemon::kSpawnPointIdFieldNumber;
const int WildPokemon::kPokemonDataFieldNumber;
const int WildPokemon::kTimeTillHiddenMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildPokemon::WildPokemon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Map.Pokemon.WildPokemon)
}

void WildPokemon::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pokemon_data_ = const_cast< ::POGOProtos::Data::PokemonData*>(&::POGOProtos::Data::PokemonData::default_instance());
}

WildPokemon::WildPokemon(const WildPokemon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Map.Pokemon.WildPokemon)
}

void WildPokemon::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  encounter_id_ = GOOGLE_ULONGLONG(0);
  last_modified_timestamp_ms_ = GOOGLE_LONGLONG(0);
  latitude_ = 0;
  longitude_ = 0;
  spawn_point_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pokemon_data_ = NULL;
  time_till_hidden_ms_ = 0;
}

WildPokemon::~WildPokemon() {
  // @@protoc_insertion_point(destructor:POGOProtos.Map.Pokemon.WildPokemon)
  SharedDtor();
}

void WildPokemon::SharedDtor() {
  spawn_point_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pokemon_data_;
  }
}

void WildPokemon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WildPokemon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WildPokemon_descriptor_;
}

const WildPokemon& WildPokemon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fMap_2fPokemon_2fWildPokemon_2eproto();
  return *default_instance_;
}

WildPokemon* WildPokemon::default_instance_ = NULL;

WildPokemon* WildPokemon::New(::google::protobuf::Arena* arena) const {
  WildPokemon* n = new WildPokemon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WildPokemon::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Map.Pokemon.WildPokemon)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WildPokemon, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WildPokemon*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(encounter_id_, longitude_);
  spawn_point_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
  time_till_hidden_ms_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool WildPokemon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Map.Pokemon.WildPokemon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 encounter_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &encounter_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_modified_timestamp_ms;
        break;
      }

      // optional int64 last_modified_timestamp_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_last_modified_timestamp_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_modified_timestamp_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // optional double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // optional double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_spawn_point_id;
        break;
      }

      // optional string spawn_point_id = 5;
      case 5: {
        if (tag == 42) {
         parse_spawn_point_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spawn_point_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spawn_point_id().data(), this->spawn_point_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Map.Pokemon.WildPokemon.spawn_point_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pokemon_data;
        break;
      }

      // optional .POGOProtos.Data.PokemonData pokemon_data = 7;
      case 7: {
        if (tag == 58) {
         parse_pokemon_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pokemon_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_time_till_hidden_ms;
        break;
      }

      // optional int32 time_till_hidden_ms = 11;
      case 11: {
        if (tag == 88) {
         parse_time_till_hidden_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_till_hidden_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Map.Pokemon.WildPokemon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Map.Pokemon.WildPokemon)
  return false;
#undef DO_
}

void WildPokemon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Map.Pokemon.WildPokemon)
  // optional fixed64 encounter_id = 1;
  if (this->encounter_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->encounter_id(), output);
  }

  // optional int64 last_modified_timestamp_ms = 2;
  if (this->last_modified_timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_modified_timestamp_ms(), output);
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // optional string spawn_point_id = 5;
  if (this->spawn_point_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spawn_point_id().data(), this->spawn_point_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Map.Pokemon.WildPokemon.spawn_point_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->spawn_point_id(), output);
  }

  // optional .POGOProtos.Data.PokemonData pokemon_data = 7;
  if (this->has_pokemon_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->pokemon_data_, output);
  }

  // optional int32 time_till_hidden_ms = 11;
  if (this->time_till_hidden_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->time_till_hidden_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Map.Pokemon.WildPokemon)
}

::google::protobuf::uint8* WildPokemon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Map.Pokemon.WildPokemon)
  // optional fixed64 encounter_id = 1;
  if (this->encounter_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->encounter_id(), target);
  }

  // optional int64 last_modified_timestamp_ms = 2;
  if (this->last_modified_timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_modified_timestamp_ms(), target);
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // optional string spawn_point_id = 5;
  if (this->spawn_point_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spawn_point_id().data(), this->spawn_point_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Map.Pokemon.WildPokemon.spawn_point_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->spawn_point_id(), target);
  }

  // optional .POGOProtos.Data.PokemonData pokemon_data = 7;
  if (this->has_pokemon_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->pokemon_data_, false, target);
  }

  // optional int32 time_till_hidden_ms = 11;
  if (this->time_till_hidden_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->time_till_hidden_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Map.Pokemon.WildPokemon)
  return target;
}

int WildPokemon::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Map.Pokemon.WildPokemon)
  int total_size = 0;

  // optional fixed64 encounter_id = 1;
  if (this->encounter_id() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 last_modified_timestamp_ms = 2;
  if (this->last_modified_timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_modified_timestamp_ms());
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // optional string spawn_point_id = 5;
  if (this->spawn_point_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spawn_point_id());
  }

  // optional .POGOProtos.Data.PokemonData pokemon_data = 7;
  if (this->has_pokemon_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pokemon_data_);
  }

  // optional int32 time_till_hidden_ms = 11;
  if (this->time_till_hidden_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_till_hidden_ms());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WildPokemon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Map.Pokemon.WildPokemon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WildPokemon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WildPokemon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Map.Pokemon.WildPokemon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Map.Pokemon.WildPokemon)
    MergeFrom(*source);
  }
}

void WildPokemon::MergeFrom(const WildPokemon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Map.Pokemon.WildPokemon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.encounter_id() != 0) {
    set_encounter_id(from.encounter_id());
  }
  if (from.last_modified_timestamp_ms() != 0) {
    set_last_modified_timestamp_ms(from.last_modified_timestamp_ms());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.spawn_point_id().size() > 0) {

    spawn_point_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spawn_point_id_);
  }
  if (from.has_pokemon_data()) {
    mutable_pokemon_data()->::POGOProtos::Data::PokemonData::MergeFrom(from.pokemon_data());
  }
  if (from.time_till_hidden_ms() != 0) {
    set_time_till_hidden_ms(from.time_till_hidden_ms());
  }
}

void WildPokemon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Map.Pokemon.WildPokemon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildPokemon::CopyFrom(const WildPokemon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Map.Pokemon.WildPokemon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildPokemon::IsInitialized() const {

  return true;
}

void WildPokemon::Swap(WildPokemon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WildPokemon::InternalSwap(WildPokemon* other) {
  std::swap(encounter_id_, other->encounter_id_);
  std::swap(last_modified_timestamp_ms_, other->last_modified_timestamp_ms_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  spawn_point_id_.Swap(&other->spawn_point_id_);
  std::swap(pokemon_data_, other->pokemon_data_);
  std::swap(time_till_hidden_ms_, other->time_till_hidden_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WildPokemon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WildPokemon_descriptor_;
  metadata.reflection = WildPokemon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WildPokemon

// optional fixed64 encounter_id = 1;
void WildPokemon::clear_encounter_id() {
  encounter_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 WildPokemon::encounter_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Pokemon.WildPokemon.encounter_id)
  return encounter_id_;
}
 void WildPokemon::set_encounter_id(::google::protobuf::uint64 value) {
  
  encounter_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Pokemon.WildPokemon.encounter_id)
}

// optional int64 last_modified_timestamp_ms = 2;
void WildPokemon::clear_last_modified_timestamp_ms() {
  last_modified_timestamp_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 WildPokemon::last_modified_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Pokemon.WildPokemon.last_modified_timestamp_ms)
  return last_modified_timestamp_ms_;
}
 void WildPokemon::set_last_modified_timestamp_ms(::google::protobuf::int64 value) {
  
  last_modified_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Pokemon.WildPokemon.last_modified_timestamp_ms)
}

// optional double latitude = 3;
void WildPokemon::clear_latitude() {
  latitude_ = 0;
}
 double WildPokemon::latitude() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Pokemon.WildPokemon.latitude)
  return latitude_;
}
 void WildPokemon::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Pokemon.WildPokemon.latitude)
}

// optional double longitude = 4;
void WildPokemon::clear_longitude() {
  longitude_ = 0;
}
 double WildPokemon::longitude() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Pokemon.WildPokemon.longitude)
  return longitude_;
}
 void WildPokemon::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Pokemon.WildPokemon.longitude)
}

// optional string spawn_point_id = 5;
void WildPokemon::clear_spawn_point_id() {
  spawn_point_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WildPokemon::spawn_point_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Pokemon.WildPokemon.spawn_point_id)
  return spawn_point_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WildPokemon::set_spawn_point_id(const ::std::string& value) {
  
  spawn_point_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Pokemon.WildPokemon.spawn_point_id)
}
 void WildPokemon::set_spawn_point_id(const char* value) {
  
  spawn_point_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Map.Pokemon.WildPokemon.spawn_point_id)
}
 void WildPokemon::set_spawn_point_id(const char* value, size_t size) {
  
  spawn_point_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Map.Pokemon.WildPokemon.spawn_point_id)
}
 ::std::string* WildPokemon::mutable_spawn_point_id() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Map.Pokemon.WildPokemon.spawn_point_id)
  return spawn_point_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WildPokemon::release_spawn_point_id() {
  // @@protoc_insertion_point(field_release:POGOProtos.Map.Pokemon.WildPokemon.spawn_point_id)
  
  return spawn_point_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WildPokemon::set_allocated_spawn_point_id(::std::string* spawn_point_id) {
  if (spawn_point_id != NULL) {
    
  } else {
    
  }
  spawn_point_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spawn_point_id);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Map.Pokemon.WildPokemon.spawn_point_id)
}

// optional .POGOProtos.Data.PokemonData pokemon_data = 7;
bool WildPokemon::has_pokemon_data() const {
  return !_is_default_instance_ && pokemon_data_ != NULL;
}
void WildPokemon::clear_pokemon_data() {
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
}
const ::POGOProtos::Data::PokemonData& WildPokemon::pokemon_data() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Pokemon.WildPokemon.pokemon_data)
  return pokemon_data_ != NULL ? *pokemon_data_ : *default_instance_->pokemon_data_;
}
::POGOProtos::Data::PokemonData* WildPokemon::mutable_pokemon_data() {
  
  if (pokemon_data_ == NULL) {
    pokemon_data_ = new ::POGOProtos::Data::PokemonData;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Map.Pokemon.WildPokemon.pokemon_data)
  return pokemon_data_;
}
::POGOProtos::Data::PokemonData* WildPokemon::release_pokemon_data() {
  // @@protoc_insertion_point(field_release:POGOProtos.Map.Pokemon.WildPokemon.pokemon_data)
  
  ::POGOProtos::Data::PokemonData* temp = pokemon_data_;
  pokemon_data_ = NULL;
  return temp;
}
void WildPokemon::set_allocated_pokemon_data(::POGOProtos::Data::PokemonData* pokemon_data) {
  delete pokemon_data_;
  pokemon_data_ = pokemon_data;
  if (pokemon_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Map.Pokemon.WildPokemon.pokemon_data)
}

// optional int32 time_till_hidden_ms = 11;
void WildPokemon::clear_time_till_hidden_ms() {
  time_till_hidden_ms_ = 0;
}
 ::google::protobuf::int32 WildPokemon::time_till_hidden_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Pokemon.WildPokemon.time_till_hidden_ms)
  return time_till_hidden_ms_;
}
 void WildPokemon::set_time_till_hidden_ms(::google::protobuf::int32 value) {
  
  time_till_hidden_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Pokemon.WildPokemon.time_till_hidden_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pokemon
}  // namespace Map
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
