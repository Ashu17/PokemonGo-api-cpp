// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Map/Fort/FortData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Map/Fort/FortData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Map {
namespace Fort {

namespace {

const ::google::protobuf::Descriptor* FortData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FortData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fMap_2fFort_2fFortData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fMap_2fFort_2fFortData_2eproto() {
  protobuf_AddDesc_POGOProtos_2fMap_2fFort_2fFortData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Map/Fort/FortData.proto");
  GOOGLE_CHECK(file != NULL);
  FortData_descriptor_ = file->message_type(0);
  static const int FortData_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, last_modified_timestamp_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, owned_by_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, guard_pokemon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, guard_pokemon_cp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, gym_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, is_in_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, active_fort_modifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, lure_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, cooldown_complete_timestamp_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, sponsor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, rendering_type_),
  };
  FortData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FortData_descriptor_,
      FortData::default_instance_,
      FortData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FortData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fMap_2fFort_2fFortData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FortData_descriptor_, &FortData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fMap_2fFort_2fFortData_2eproto() {
  delete FortData::default_instance_;
  delete FortData_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fMap_2fFort_2fFortData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fMap_2fFort_2fFortData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonId_2eproto();
  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fTeamColor_2eproto();
  ::POGOProtos::Inventory::Item::protobuf_AddDesc_POGOProtos_2fInventory_2fItem_2fItemId_2eproto();
  ::POGOProtos::Map::Fort::protobuf_AddDesc_POGOProtos_2fMap_2fFort_2fFortType_2eproto();
  ::POGOProtos::Map::Fort::protobuf_AddDesc_POGOProtos_2fMap_2fFort_2fFortSponsor_2eproto();
  ::POGOProtos::Map::Fort::protobuf_AddDesc_POGOProtos_2fMap_2fFort_2fFortRenderingType_2eproto();
  ::POGOProtos::Map::Fort::protobuf_AddDesc_POGOProtos_2fMap_2fFort_2fFortLureInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"POGOProtos/Map/Fort/FortData.proto\022\023PO"
    "GOProtos.Map.Fort\032 POGOProtos/Enums/Poke"
    "monId.proto\032 POGOProtos/Enums/TeamColor."
    "proto\032&POGOProtos/Inventory/Item/ItemId."
    "proto\032\"POGOProtos/Map/Fort/FortType.prot"
    "o\032%POGOProtos/Map/Fort/FortSponsor.proto"
    "\032+POGOProtos/Map/Fort/FortRenderingType."
    "proto\032&POGOProtos/Map/Fort/FortLureInfo."
    "proto\"\336\004\n\010FortData\022\n\n\002id\030\001 \001(\t\022\"\n\032last_m"
    "odified_timestamp_ms\030\002 \001(\003\022\020\n\010latitude\030\003"
    " \001(\001\022\021\n\tlongitude\030\004 \001(\001\022\017\n\007enabled\030\010 \001(\010"
    "\022+\n\004type\030\t \001(\0162\035.POGOProtos.Map.Fort.For"
    "tType\0222\n\rowned_by_team\030\005 \001(\0162\033.POGOProto"
    "s.Enums.TeamColor\0225\n\020guard_pokemon_id\030\006 "
    "\001(\0162\033.POGOProtos.Enums.PokemonId\022\030\n\020guar"
    "d_pokemon_cp\030\007 \001(\005\022\022\n\ngym_points\030\n \001(\003\022\024"
    "\n\014is_in_battle\030\013 \001(\010\022\?\n\024active_fort_modi"
    "fier\030\014 \003(\0162!.POGOProtos.Inventory.Item.I"
    "temId\0224\n\tlure_info\030\r \001(\0132!.POGOProtos.Ma"
    "p.Fort.FortLureInfo\022&\n\036cooldown_complete"
    "_timestamp_ms\030\016 \001(\003\0221\n\007sponsor\030\017 \001(\0162 .P"
    "OGOProtos.Map.Fort.FortSponsor\022>\n\016render"
    "ing_type\030\020 \001(\0162&.POGOProtos.Map.Fort.For"
    "tRenderingTypeb\006proto3", 942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Map/Fort/FortData.proto", &protobuf_RegisterTypes);
  FortData::default_instance_ = new FortData();
  FortData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fMap_2fFort_2fFortData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fMap_2fFort_2fFortData_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fMap_2fFort_2fFortData_2eproto() {
    protobuf_AddDesc_POGOProtos_2fMap_2fFort_2fFortData_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fMap_2fFort_2fFortData_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FortData::kIdFieldNumber;
const int FortData::kLastModifiedTimestampMsFieldNumber;
const int FortData::kLatitudeFieldNumber;
const int FortData::kLongitudeFieldNumber;
const int FortData::kEnabledFieldNumber;
const int FortData::kTypeFieldNumber;
const int FortData::kOwnedByTeamFieldNumber;
const int FortData::kGuardPokemonIdFieldNumber;
const int FortData::kGuardPokemonCpFieldNumber;
const int FortData::kGymPointsFieldNumber;
const int FortData::kIsInBattleFieldNumber;
const int FortData::kActiveFortModifierFieldNumber;
const int FortData::kLureInfoFieldNumber;
const int FortData::kCooldownCompleteTimestampMsFieldNumber;
const int FortData::kSponsorFieldNumber;
const int FortData::kRenderingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FortData::FortData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Map.Fort.FortData)
}

void FortData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  lure_info_ = const_cast< ::POGOProtos::Map::Fort::FortLureInfo*>(&::POGOProtos::Map::Fort::FortLureInfo::default_instance());
}

FortData::FortData(const FortData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Map.Fort.FortData)
}

void FortData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_modified_timestamp_ms_ = GOOGLE_LONGLONG(0);
  latitude_ = 0;
  longitude_ = 0;
  enabled_ = false;
  type_ = 0;
  owned_by_team_ = 0;
  guard_pokemon_id_ = 0;
  guard_pokemon_cp_ = 0;
  gym_points_ = GOOGLE_LONGLONG(0);
  is_in_battle_ = false;
  lure_info_ = NULL;
  cooldown_complete_timestamp_ms_ = GOOGLE_LONGLONG(0);
  sponsor_ = 0;
  rendering_type_ = 0;
}

FortData::~FortData() {
  // @@protoc_insertion_point(destructor:POGOProtos.Map.Fort.FortData)
  SharedDtor();
}

void FortData::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete lure_info_;
  }
}

void FortData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FortData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FortData_descriptor_;
}

const FortData& FortData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fMap_2fFort_2fFortData_2eproto();
  return *default_instance_;
}

FortData* FortData::default_instance_ = NULL;

FortData* FortData::New(::google::protobuf::Arena* arena) const {
  FortData* n = new FortData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FortData::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Map.Fort.FortData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FortData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FortData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(last_modified_timestamp_ms_, enabled_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(is_in_battle_, gym_points_);
  ZR_(guard_pokemon_cp_, sponsor_);
  ZR_(cooldown_complete_timestamp_ms_, rendering_type_);
  if (GetArenaNoVirtual() == NULL && lure_info_ != NULL) delete lure_info_;
  lure_info_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  active_fort_modifier_.Clear();
}

bool FortData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Map.Fort.FortData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Map.Fort.FortData.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_modified_timestamp_ms;
        break;
      }

      // optional int64 last_modified_timestamp_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_last_modified_timestamp_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_modified_timestamp_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // optional double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // optional double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_owned_by_team;
        break;
      }

      // optional .POGOProtos.Enums.TeamColor owned_by_team = 5;
      case 5: {
        if (tag == 40) {
         parse_owned_by_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_owned_by_team(static_cast< ::POGOProtos::Enums::TeamColor >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_guard_pokemon_id;
        break;
      }

      // optional .POGOProtos.Enums.PokemonId guard_pokemon_id = 6;
      case 6: {
        if (tag == 48) {
         parse_guard_pokemon_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_guard_pokemon_id(static_cast< ::POGOProtos::Enums::PokemonId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_guard_pokemon_cp;
        break;
      }

      // optional int32 guard_pokemon_cp = 7;
      case 7: {
        if (tag == 56) {
         parse_guard_pokemon_cp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guard_pokemon_cp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 8;
      case 8: {
        if (tag == 64) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .POGOProtos.Map.Fort.FortType type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::POGOProtos::Map::Fort::FortType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gym_points;
        break;
      }

      // optional int64 gym_points = 10;
      case 10: {
        if (tag == 80) {
         parse_gym_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gym_points_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_in_battle;
        break;
      }

      // optional bool is_in_battle = 11;
      case 11: {
        if (tag == 88) {
         parse_is_in_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_battle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_active_fort_modifier;
        break;
      }

      // repeated .POGOProtos.Inventory.Item.ItemId active_fort_modifier = 12;
      case 12: {
        if (tag == 98) {
         parse_active_fort_modifier:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_active_fort_modifier(static_cast< ::POGOProtos::Inventory::Item::ItemId >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 96) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_active_fort_modifier(static_cast< ::POGOProtos::Inventory::Item::ItemId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_lure_info;
        break;
      }

      // optional .POGOProtos.Map.Fort.FortLureInfo lure_info = 13;
      case 13: {
        if (tag == 106) {
         parse_lure_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lure_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_cooldown_complete_timestamp_ms;
        break;
      }

      // optional int64 cooldown_complete_timestamp_ms = 14;
      case 14: {
        if (tag == 112) {
         parse_cooldown_complete_timestamp_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cooldown_complete_timestamp_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_sponsor;
        break;
      }

      // optional .POGOProtos.Map.Fort.FortSponsor sponsor = 15;
      case 15: {
        if (tag == 120) {
         parse_sponsor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sponsor(static_cast< ::POGOProtos::Map::Fort::FortSponsor >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_rendering_type;
        break;
      }

      // optional .POGOProtos.Map.Fort.FortRenderingType rendering_type = 16;
      case 16: {
        if (tag == 128) {
         parse_rendering_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rendering_type(static_cast< ::POGOProtos::Map::Fort::FortRenderingType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Map.Fort.FortData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Map.Fort.FortData)
  return false;
#undef DO_
}

void FortData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Map.Fort.FortData)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Map.Fort.FortData.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int64 last_modified_timestamp_ms = 2;
  if (this->last_modified_timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_modified_timestamp_ms(), output);
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // optional .POGOProtos.Enums.TeamColor owned_by_team = 5;
  if (this->owned_by_team() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->owned_by_team(), output);
  }

  // optional .POGOProtos.Enums.PokemonId guard_pokemon_id = 6;
  if (this->guard_pokemon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->guard_pokemon_id(), output);
  }

  // optional int32 guard_pokemon_cp = 7;
  if (this->guard_pokemon_cp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guard_pokemon_cp(), output);
  }

  // optional bool enabled = 8;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enabled(), output);
  }

  // optional .POGOProtos.Map.Fort.FortType type = 9;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional int64 gym_points = 10;
  if (this->gym_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->gym_points(), output);
  }

  // optional bool is_in_battle = 11;
  if (this->is_in_battle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_in_battle(), output);
  }

  // repeated .POGOProtos.Inventory.Item.ItemId active_fort_modifier = 12;
  if (this->active_fort_modifier_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_active_fort_modifier_cached_byte_size_);
  }
  for (int i = 0; i < this->active_fort_modifier_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->active_fort_modifier(i), output);
  }

  // optional .POGOProtos.Map.Fort.FortLureInfo lure_info = 13;
  if (this->has_lure_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->lure_info_, output);
  }

  // optional int64 cooldown_complete_timestamp_ms = 14;
  if (this->cooldown_complete_timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->cooldown_complete_timestamp_ms(), output);
  }

  // optional .POGOProtos.Map.Fort.FortSponsor sponsor = 15;
  if (this->sponsor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->sponsor(), output);
  }

  // optional .POGOProtos.Map.Fort.FortRenderingType rendering_type = 16;
  if (this->rendering_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->rendering_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Map.Fort.FortData)
}

::google::protobuf::uint8* FortData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Map.Fort.FortData)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Map.Fort.FortData.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int64 last_modified_timestamp_ms = 2;
  if (this->last_modified_timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_modified_timestamp_ms(), target);
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // optional .POGOProtos.Enums.TeamColor owned_by_team = 5;
  if (this->owned_by_team() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->owned_by_team(), target);
  }

  // optional .POGOProtos.Enums.PokemonId guard_pokemon_id = 6;
  if (this->guard_pokemon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->guard_pokemon_id(), target);
  }

  // optional int32 guard_pokemon_cp = 7;
  if (this->guard_pokemon_cp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guard_pokemon_cp(), target);
  }

  // optional bool enabled = 8;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enabled(), target);
  }

  // optional .POGOProtos.Map.Fort.FortType type = 9;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional int64 gym_points = 10;
  if (this->gym_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->gym_points(), target);
  }

  // optional bool is_in_battle = 11;
  if (this->is_in_battle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_in_battle(), target);
  }

  // repeated .POGOProtos.Inventory.Item.ItemId active_fort_modifier = 12;
  if (this->active_fort_modifier_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _active_fort_modifier_cached_byte_size_, target);
  }
  for (int i = 0; i < this->active_fort_modifier_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->active_fort_modifier(i), target);
  }

  // optional .POGOProtos.Map.Fort.FortLureInfo lure_info = 13;
  if (this->has_lure_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->lure_info_, false, target);
  }

  // optional int64 cooldown_complete_timestamp_ms = 14;
  if (this->cooldown_complete_timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->cooldown_complete_timestamp_ms(), target);
  }

  // optional .POGOProtos.Map.Fort.FortSponsor sponsor = 15;
  if (this->sponsor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->sponsor(), target);
  }

  // optional .POGOProtos.Map.Fort.FortRenderingType rendering_type = 16;
  if (this->rendering_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->rendering_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Map.Fort.FortData)
  return target;
}

int FortData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Map.Fort.FortData)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional int64 last_modified_timestamp_ms = 2;
  if (this->last_modified_timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_modified_timestamp_ms());
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // optional bool enabled = 8;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // optional .POGOProtos.Map.Fort.FortType type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .POGOProtos.Enums.TeamColor owned_by_team = 5;
  if (this->owned_by_team() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->owned_by_team());
  }

  // optional .POGOProtos.Enums.PokemonId guard_pokemon_id = 6;
  if (this->guard_pokemon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->guard_pokemon_id());
  }

  // optional int32 guard_pokemon_cp = 7;
  if (this->guard_pokemon_cp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guard_pokemon_cp());
  }

  // optional int64 gym_points = 10;
  if (this->gym_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gym_points());
  }

  // optional bool is_in_battle = 11;
  if (this->is_in_battle() != 0) {
    total_size += 1 + 1;
  }

  // optional .POGOProtos.Map.Fort.FortLureInfo lure_info = 13;
  if (this->has_lure_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lure_info_);
  }

  // optional int64 cooldown_complete_timestamp_ms = 14;
  if (this->cooldown_complete_timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cooldown_complete_timestamp_ms());
  }

  // optional .POGOProtos.Map.Fort.FortSponsor sponsor = 15;
  if (this->sponsor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sponsor());
  }

  // optional .POGOProtos.Map.Fort.FortRenderingType rendering_type = 16;
  if (this->rendering_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rendering_type());
  }

  // repeated .POGOProtos.Inventory.Item.ItemId active_fort_modifier = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->active_fort_modifier_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->active_fort_modifier(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _active_fort_modifier_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FortData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Map.Fort.FortData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FortData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FortData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Map.Fort.FortData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Map.Fort.FortData)
    MergeFrom(*source);
  }
}

void FortData::MergeFrom(const FortData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Map.Fort.FortData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  active_fort_modifier_.MergeFrom(from.active_fort_modifier_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.last_modified_timestamp_ms() != 0) {
    set_last_modified_timestamp_ms(from.last_modified_timestamp_ms());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.owned_by_team() != 0) {
    set_owned_by_team(from.owned_by_team());
  }
  if (from.guard_pokemon_id() != 0) {
    set_guard_pokemon_id(from.guard_pokemon_id());
  }
  if (from.guard_pokemon_cp() != 0) {
    set_guard_pokemon_cp(from.guard_pokemon_cp());
  }
  if (from.gym_points() != 0) {
    set_gym_points(from.gym_points());
  }
  if (from.is_in_battle() != 0) {
    set_is_in_battle(from.is_in_battle());
  }
  if (from.has_lure_info()) {
    mutable_lure_info()->::POGOProtos::Map::Fort::FortLureInfo::MergeFrom(from.lure_info());
  }
  if (from.cooldown_complete_timestamp_ms() != 0) {
    set_cooldown_complete_timestamp_ms(from.cooldown_complete_timestamp_ms());
  }
  if (from.sponsor() != 0) {
    set_sponsor(from.sponsor());
  }
  if (from.rendering_type() != 0) {
    set_rendering_type(from.rendering_type());
  }
}

void FortData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Map.Fort.FortData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FortData::CopyFrom(const FortData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Map.Fort.FortData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FortData::IsInitialized() const {

  return true;
}

void FortData::Swap(FortData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FortData::InternalSwap(FortData* other) {
  id_.Swap(&other->id_);
  std::swap(last_modified_timestamp_ms_, other->last_modified_timestamp_ms_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(enabled_, other->enabled_);
  std::swap(type_, other->type_);
  std::swap(owned_by_team_, other->owned_by_team_);
  std::swap(guard_pokemon_id_, other->guard_pokemon_id_);
  std::swap(guard_pokemon_cp_, other->guard_pokemon_cp_);
  std::swap(gym_points_, other->gym_points_);
  std::swap(is_in_battle_, other->is_in_battle_);
  active_fort_modifier_.UnsafeArenaSwap(&other->active_fort_modifier_);
  std::swap(lure_info_, other->lure_info_);
  std::swap(cooldown_complete_timestamp_ms_, other->cooldown_complete_timestamp_ms_);
  std::swap(sponsor_, other->sponsor_);
  std::swap(rendering_type_, other->rendering_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FortData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FortData_descriptor_;
  metadata.reflection = FortData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FortData

// optional string id = 1;
void FortData::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FortData::id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FortData::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.id)
}
 void FortData::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Map.Fort.FortData.id)
}
 void FortData::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Map.Fort.FortData.id)
}
 ::std::string* FortData::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Map.Fort.FortData.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FortData::release_id() {
  // @@protoc_insertion_point(field_release:POGOProtos.Map.Fort.FortData.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FortData::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Map.Fort.FortData.id)
}

// optional int64 last_modified_timestamp_ms = 2;
void FortData::clear_last_modified_timestamp_ms() {
  last_modified_timestamp_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FortData::last_modified_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.last_modified_timestamp_ms)
  return last_modified_timestamp_ms_;
}
 void FortData::set_last_modified_timestamp_ms(::google::protobuf::int64 value) {
  
  last_modified_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.last_modified_timestamp_ms)
}

// optional double latitude = 3;
void FortData::clear_latitude() {
  latitude_ = 0;
}
 double FortData::latitude() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.latitude)
  return latitude_;
}
 void FortData::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.latitude)
}

// optional double longitude = 4;
void FortData::clear_longitude() {
  longitude_ = 0;
}
 double FortData::longitude() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.longitude)
  return longitude_;
}
 void FortData::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.longitude)
}

// optional bool enabled = 8;
void FortData::clear_enabled() {
  enabled_ = false;
}
 bool FortData::enabled() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.enabled)
  return enabled_;
}
 void FortData::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.enabled)
}

// optional .POGOProtos.Map.Fort.FortType type = 9;
void FortData::clear_type() {
  type_ = 0;
}
 ::POGOProtos::Map::Fort::FortType FortData::type() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.type)
  return static_cast< ::POGOProtos::Map::Fort::FortType >(type_);
}
 void FortData::set_type(::POGOProtos::Map::Fort::FortType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.type)
}

// optional .POGOProtos.Enums.TeamColor owned_by_team = 5;
void FortData::clear_owned_by_team() {
  owned_by_team_ = 0;
}
 ::POGOProtos::Enums::TeamColor FortData::owned_by_team() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.owned_by_team)
  return static_cast< ::POGOProtos::Enums::TeamColor >(owned_by_team_);
}
 void FortData::set_owned_by_team(::POGOProtos::Enums::TeamColor value) {
  
  owned_by_team_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.owned_by_team)
}

// optional .POGOProtos.Enums.PokemonId guard_pokemon_id = 6;
void FortData::clear_guard_pokemon_id() {
  guard_pokemon_id_ = 0;
}
 ::POGOProtos::Enums::PokemonId FortData::guard_pokemon_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.guard_pokemon_id)
  return static_cast< ::POGOProtos::Enums::PokemonId >(guard_pokemon_id_);
}
 void FortData::set_guard_pokemon_id(::POGOProtos::Enums::PokemonId value) {
  
  guard_pokemon_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.guard_pokemon_id)
}

// optional int32 guard_pokemon_cp = 7;
void FortData::clear_guard_pokemon_cp() {
  guard_pokemon_cp_ = 0;
}
 ::google::protobuf::int32 FortData::guard_pokemon_cp() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.guard_pokemon_cp)
  return guard_pokemon_cp_;
}
 void FortData::set_guard_pokemon_cp(::google::protobuf::int32 value) {
  
  guard_pokemon_cp_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.guard_pokemon_cp)
}

// optional int64 gym_points = 10;
void FortData::clear_gym_points() {
  gym_points_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FortData::gym_points() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.gym_points)
  return gym_points_;
}
 void FortData::set_gym_points(::google::protobuf::int64 value) {
  
  gym_points_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.gym_points)
}

// optional bool is_in_battle = 11;
void FortData::clear_is_in_battle() {
  is_in_battle_ = false;
}
 bool FortData::is_in_battle() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.is_in_battle)
  return is_in_battle_;
}
 void FortData::set_is_in_battle(bool value) {
  
  is_in_battle_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.is_in_battle)
}

// repeated .POGOProtos.Inventory.Item.ItemId active_fort_modifier = 12;
int FortData::active_fort_modifier_size() const {
  return active_fort_modifier_.size();
}
void FortData::clear_active_fort_modifier() {
  active_fort_modifier_.Clear();
}
 ::POGOProtos::Inventory::Item::ItemId FortData::active_fort_modifier(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.active_fort_modifier)
  return static_cast< ::POGOProtos::Inventory::Item::ItemId >(active_fort_modifier_.Get(index));
}
 void FortData::set_active_fort_modifier(int index, ::POGOProtos::Inventory::Item::ItemId value) {
  active_fort_modifier_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.active_fort_modifier)
}
 void FortData::add_active_fort_modifier(::POGOProtos::Inventory::Item::ItemId value) {
  active_fort_modifier_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Map.Fort.FortData.active_fort_modifier)
}
 const ::google::protobuf::RepeatedField<int>&
FortData::active_fort_modifier() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Map.Fort.FortData.active_fort_modifier)
  return active_fort_modifier_;
}
 ::google::protobuf::RepeatedField<int>*
FortData::mutable_active_fort_modifier() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Map.Fort.FortData.active_fort_modifier)
  return &active_fort_modifier_;
}

// optional .POGOProtos.Map.Fort.FortLureInfo lure_info = 13;
bool FortData::has_lure_info() const {
  return !_is_default_instance_ && lure_info_ != NULL;
}
void FortData::clear_lure_info() {
  if (GetArenaNoVirtual() == NULL && lure_info_ != NULL) delete lure_info_;
  lure_info_ = NULL;
}
const ::POGOProtos::Map::Fort::FortLureInfo& FortData::lure_info() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.lure_info)
  return lure_info_ != NULL ? *lure_info_ : *default_instance_->lure_info_;
}
::POGOProtos::Map::Fort::FortLureInfo* FortData::mutable_lure_info() {
  
  if (lure_info_ == NULL) {
    lure_info_ = new ::POGOProtos::Map::Fort::FortLureInfo;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Map.Fort.FortData.lure_info)
  return lure_info_;
}
::POGOProtos::Map::Fort::FortLureInfo* FortData::release_lure_info() {
  // @@protoc_insertion_point(field_release:POGOProtos.Map.Fort.FortData.lure_info)
  
  ::POGOProtos::Map::Fort::FortLureInfo* temp = lure_info_;
  lure_info_ = NULL;
  return temp;
}
void FortData::set_allocated_lure_info(::POGOProtos::Map::Fort::FortLureInfo* lure_info) {
  delete lure_info_;
  lure_info_ = lure_info;
  if (lure_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Map.Fort.FortData.lure_info)
}

// optional int64 cooldown_complete_timestamp_ms = 14;
void FortData::clear_cooldown_complete_timestamp_ms() {
  cooldown_complete_timestamp_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FortData::cooldown_complete_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.cooldown_complete_timestamp_ms)
  return cooldown_complete_timestamp_ms_;
}
 void FortData::set_cooldown_complete_timestamp_ms(::google::protobuf::int64 value) {
  
  cooldown_complete_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.cooldown_complete_timestamp_ms)
}

// optional .POGOProtos.Map.Fort.FortSponsor sponsor = 15;
void FortData::clear_sponsor() {
  sponsor_ = 0;
}
 ::POGOProtos::Map::Fort::FortSponsor FortData::sponsor() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.sponsor)
  return static_cast< ::POGOProtos::Map::Fort::FortSponsor >(sponsor_);
}
 void FortData::set_sponsor(::POGOProtos::Map::Fort::FortSponsor value) {
  
  sponsor_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.sponsor)
}

// optional .POGOProtos.Map.Fort.FortRenderingType rendering_type = 16;
void FortData::clear_rendering_type() {
  rendering_type_ = 0;
}
 ::POGOProtos::Map::Fort::FortRenderingType FortData::rendering_type() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Map.Fort.FortData.rendering_type)
  return static_cast< ::POGOProtos::Map::Fort::FortRenderingType >(rendering_type_);
}
 void FortData::set_rendering_type(::POGOProtos::Map::Fort::FortRenderingType value) {
  
  rendering_type_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Map.Fort.FortData.rendering_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Fort
}  // namespace Map
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
