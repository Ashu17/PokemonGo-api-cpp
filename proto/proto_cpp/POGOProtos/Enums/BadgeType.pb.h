// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Enums/BadgeType.proto

#ifndef PROTOBUF_POGOProtos_2fEnums_2fBadgeType_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fEnums_2fBadgeType_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Enums {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fEnums_2fBadgeType_2eproto();
void protobuf_AssignDesc_POGOProtos_2fEnums_2fBadgeType_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fEnums_2fBadgeType_2eproto();


enum BadgeType {
  BADGE_UNSET = 0,
  BADGE_TRAVEL_KM = 1,
  BADGE_POKEDEX_ENTRIES = 2,
  BADGE_CAPTURE_TOTAL = 3,
  BADGE_DEFEATED_FORT = 4,
  BADGE_EVOLVED_TOTAL = 5,
  BADGE_HATCHED_TOTAL = 6,
  BADGE_ENCOUNTERED_TOTAL = 7,
  BADGE_POKESTOPS_VISITED = 8,
  BADGE_UNIQUE_POKESTOPS = 9,
  BADGE_POKEBALL_THROWN = 10,
  BADGE_BIG_MAGIKARP = 11,
  BADGE_DEPLOYED_TOTAL = 12,
  BADGE_BATTLE_ATTACK_WON = 13,
  BADGE_BATTLE_TRAINING_WON = 14,
  BADGE_BATTLE_DEFEND_WON = 15,
  BADGE_PRESTIGE_RAISED = 16,
  BADGE_PRESTIGE_DROPPED = 17,
  BADGE_TYPE_NORMAL = 18,
  BADGE_TYPE_FIGHTING = 19,
  BADGE_TYPE_FLYING = 20,
  BADGE_TYPE_POISON = 21,
  BADGE_TYPE_GROUND = 22,
  BADGE_TYPE_ROCK = 23,
  BADGE_TYPE_BUG = 24,
  BADGE_TYPE_GHOST = 25,
  BADGE_TYPE_STEEL = 26,
  BADGE_TYPE_FIRE = 27,
  BADGE_TYPE_WATER = 28,
  BADGE_TYPE_GRASS = 29,
  BADGE_TYPE_ELECTRIC = 30,
  BADGE_TYPE_PSYCHIC = 31,
  BADGE_TYPE_ICE = 32,
  BADGE_TYPE_DRAGON = 33,
  BADGE_TYPE_DARK = 34,
  BADGE_TYPE_FAIRY = 35,
  BADGE_SMALL_RATTATA = 36,
  BADGE_PIKACHU = 37,
  BadgeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BadgeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BadgeType_IsValid(int value);
const BadgeType BadgeType_MIN = BADGE_UNSET;
const BadgeType BadgeType_MAX = BADGE_PIKACHU;
const int BadgeType_ARRAYSIZE = BadgeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BadgeType_descriptor();
inline const ::std::string& BadgeType_Name(BadgeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BadgeType_descriptor(), value);
}
inline bool BadgeType_Parse(
    const ::std::string& name, BadgeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BadgeType>(
    BadgeType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Enums
}  // namespace POGOProtos

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::POGOProtos::Enums::BadgeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::POGOProtos::Enums::BadgeType>() {
  return ::POGOProtos::Enums::BadgeType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fEnums_2fBadgeType_2eproto__INCLUDED
