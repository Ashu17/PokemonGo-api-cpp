// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/EvolvePokemonResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Networking/Responses/EvolvePokemonResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

namespace {

const ::google::protobuf::Descriptor* EvolvePokemonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvolvePokemonResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EvolvePokemonResponse_Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto() {
  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Networking/Responses/EvolvePokemonResponse.proto");
  GOOGLE_CHECK(file != NULL);
  EvolvePokemonResponse_descriptor_ = file->message_type(0);
  static const int EvolvePokemonResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvePokemonResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvePokemonResponse, evolved_pokemon_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvePokemonResponse, experience_awarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvePokemonResponse, candy_awarded_),
  };
  EvolvePokemonResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EvolvePokemonResponse_descriptor_,
      EvolvePokemonResponse::default_instance_,
      EvolvePokemonResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(EvolvePokemonResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvePokemonResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvePokemonResponse, _is_default_instance_));
  EvolvePokemonResponse_Result_descriptor_ = EvolvePokemonResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EvolvePokemonResponse_descriptor_, &EvolvePokemonResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto() {
  delete EvolvePokemonResponse::default_instance_;
  delete EvolvePokemonResponse_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Data::protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n;POGOProtos/Networking/Responses/Evolve"
    "PokemonResponse.proto\022\037POGOProtos.Networ"
    "king.Responses\032!POGOProtos/Data/PokemonD"
    "ata.proto\"\371\002\n\025EvolvePokemonResponse\022M\n\006r"
    "esult\030\001 \001(\0162=.POGOProtos.Networking.Resp"
    "onses.EvolvePokemonResponse.Result\022:\n\024ev"
    "olved_pokemon_data\030\002 \001(\0132\034.POGOProtos.Da"
    "ta.PokemonData\022\032\n\022experience_awarded\030\003 \001"
    "(\005\022\025\n\rcandy_awarded\030\004 \001(\005\"\241\001\n\006Result\022\t\n\005"
    "UNSET\020\000\022\013\n\007SUCCESS\020\001\022\032\n\026FAILED_POKEMON_M"
    "ISSING\020\002\022!\n\035FAILED_INSUFFICIENT_RESOURCE"
    "S\020\003\022 \n\034FAILED_POKEMON_CANNOT_EVOLVE\020\004\022\036\n"
    "\032FAILED_POKEMON_IS_DEPLOYED\020\005b\006proto3", 517);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Networking/Responses/EvolvePokemonResponse.proto", &protobuf_RegisterTypes);
  EvolvePokemonResponse::default_instance_ = new EvolvePokemonResponse();
  EvolvePokemonResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto() {
    protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* EvolvePokemonResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvolvePokemonResponse_Result_descriptor_;
}
bool EvolvePokemonResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EvolvePokemonResponse_Result EvolvePokemonResponse::UNSET;
const EvolvePokemonResponse_Result EvolvePokemonResponse::SUCCESS;
const EvolvePokemonResponse_Result EvolvePokemonResponse::FAILED_POKEMON_MISSING;
const EvolvePokemonResponse_Result EvolvePokemonResponse::FAILED_INSUFFICIENT_RESOURCES;
const EvolvePokemonResponse_Result EvolvePokemonResponse::FAILED_POKEMON_CANNOT_EVOLVE;
const EvolvePokemonResponse_Result EvolvePokemonResponse::FAILED_POKEMON_IS_DEPLOYED;
const EvolvePokemonResponse_Result EvolvePokemonResponse::Result_MIN;
const EvolvePokemonResponse_Result EvolvePokemonResponse::Result_MAX;
const int EvolvePokemonResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvolvePokemonResponse::kResultFieldNumber;
const int EvolvePokemonResponse::kEvolvedPokemonDataFieldNumber;
const int EvolvePokemonResponse::kExperienceAwardedFieldNumber;
const int EvolvePokemonResponse::kCandyAwardedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvolvePokemonResponse::EvolvePokemonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Networking.Responses.EvolvePokemonResponse)
}

void EvolvePokemonResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  evolved_pokemon_data_ = const_cast< ::POGOProtos::Data::PokemonData*>(&::POGOProtos::Data::PokemonData::default_instance());
}

EvolvePokemonResponse::EvolvePokemonResponse(const EvolvePokemonResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Networking.Responses.EvolvePokemonResponse)
}

void EvolvePokemonResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
  evolved_pokemon_data_ = NULL;
  experience_awarded_ = 0;
  candy_awarded_ = 0;
}

EvolvePokemonResponse::~EvolvePokemonResponse() {
  // @@protoc_insertion_point(destructor:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  SharedDtor();
}

void EvolvePokemonResponse::SharedDtor() {
  if (this != default_instance_) {
    delete evolved_pokemon_data_;
  }
}

void EvolvePokemonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvolvePokemonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvolvePokemonResponse_descriptor_;
}

const EvolvePokemonResponse& EvolvePokemonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fEvolvePokemonResponse_2eproto();
  return *default_instance_;
}

EvolvePokemonResponse* EvolvePokemonResponse::default_instance_ = NULL;

EvolvePokemonResponse* EvolvePokemonResponse::New(::google::protobuf::Arena* arena) const {
  EvolvePokemonResponse* n = new EvolvePokemonResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EvolvePokemonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Networking.Responses.EvolvePokemonResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EvolvePokemonResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EvolvePokemonResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, candy_awarded_);
  if (GetArenaNoVirtual() == NULL && evolved_pokemon_data_ != NULL) delete evolved_pokemon_data_;
  evolved_pokemon_data_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool EvolvePokemonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Networking.Responses.EvolvePokemonResponse.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::POGOProtos::Networking::Responses::EvolvePokemonResponse_Result >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_evolved_pokemon_data;
        break;
      }

      // optional .POGOProtos.Data.PokemonData evolved_pokemon_data = 2;
      case 2: {
        if (tag == 18) {
         parse_evolved_pokemon_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_evolved_pokemon_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_experience_awarded;
        break;
      }

      // optional int32 experience_awarded = 3;
      case 3: {
        if (tag == 24) {
         parse_experience_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_awarded_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_candy_awarded;
        break;
      }

      // optional int32 candy_awarded = 4;
      case 4: {
        if (tag == 32) {
         parse_candy_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candy_awarded_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  return false;
#undef DO_
}

void EvolvePokemonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  // optional .POGOProtos.Networking.Responses.EvolvePokemonResponse.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .POGOProtos.Data.PokemonData evolved_pokemon_data = 2;
  if (this->has_evolved_pokemon_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->evolved_pokemon_data_, output);
  }

  // optional int32 experience_awarded = 3;
  if (this->experience_awarded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->experience_awarded(), output);
  }

  // optional int32 candy_awarded = 4;
  if (this->candy_awarded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->candy_awarded(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Networking.Responses.EvolvePokemonResponse)
}

::google::protobuf::uint8* EvolvePokemonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  // optional .POGOProtos.Networking.Responses.EvolvePokemonResponse.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .POGOProtos.Data.PokemonData evolved_pokemon_data = 2;
  if (this->has_evolved_pokemon_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->evolved_pokemon_data_, false, target);
  }

  // optional int32 experience_awarded = 3;
  if (this->experience_awarded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->experience_awarded(), target);
  }

  // optional int32 candy_awarded = 4;
  if (this->candy_awarded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->candy_awarded(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  return target;
}

int EvolvePokemonResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  int total_size = 0;

  // optional .POGOProtos.Networking.Responses.EvolvePokemonResponse.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // optional .POGOProtos.Data.PokemonData evolved_pokemon_data = 2;
  if (this->has_evolved_pokemon_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->evolved_pokemon_data_);
  }

  // optional int32 experience_awarded = 3;
  if (this->experience_awarded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->experience_awarded());
  }

  // optional int32 candy_awarded = 4;
  if (this->candy_awarded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->candy_awarded());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvolvePokemonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EvolvePokemonResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EvolvePokemonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Networking.Responses.EvolvePokemonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Networking.Responses.EvolvePokemonResponse)
    MergeFrom(*source);
  }
}

void EvolvePokemonResponse::MergeFrom(const EvolvePokemonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.has_evolved_pokemon_data()) {
    mutable_evolved_pokemon_data()->::POGOProtos::Data::PokemonData::MergeFrom(from.evolved_pokemon_data());
  }
  if (from.experience_awarded() != 0) {
    set_experience_awarded(from.experience_awarded());
  }
  if (from.candy_awarded() != 0) {
    set_candy_awarded(from.candy_awarded());
  }
}

void EvolvePokemonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvolvePokemonResponse::CopyFrom(const EvolvePokemonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Networking.Responses.EvolvePokemonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvolvePokemonResponse::IsInitialized() const {

  return true;
}

void EvolvePokemonResponse::Swap(EvolvePokemonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvolvePokemonResponse::InternalSwap(EvolvePokemonResponse* other) {
  std::swap(result_, other->result_);
  std::swap(evolved_pokemon_data_, other->evolved_pokemon_data_);
  std::swap(experience_awarded_, other->experience_awarded_);
  std::swap(candy_awarded_, other->candy_awarded_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EvolvePokemonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvolvePokemonResponse_descriptor_;
  metadata.reflection = EvolvePokemonResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EvolvePokemonResponse

// optional .POGOProtos.Networking.Responses.EvolvePokemonResponse.Result result = 1;
void EvolvePokemonResponse::clear_result() {
  result_ = 0;
}
 ::POGOProtos::Networking::Responses::EvolvePokemonResponse_Result EvolvePokemonResponse::result() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.EvolvePokemonResponse.result)
  return static_cast< ::POGOProtos::Networking::Responses::EvolvePokemonResponse_Result >(result_);
}
 void EvolvePokemonResponse::set_result(::POGOProtos::Networking::Responses::EvolvePokemonResponse_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.EvolvePokemonResponse.result)
}

// optional .POGOProtos.Data.PokemonData evolved_pokemon_data = 2;
bool EvolvePokemonResponse::has_evolved_pokemon_data() const {
  return !_is_default_instance_ && evolved_pokemon_data_ != NULL;
}
void EvolvePokemonResponse::clear_evolved_pokemon_data() {
  if (GetArenaNoVirtual() == NULL && evolved_pokemon_data_ != NULL) delete evolved_pokemon_data_;
  evolved_pokemon_data_ = NULL;
}
const ::POGOProtos::Data::PokemonData& EvolvePokemonResponse::evolved_pokemon_data() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.EvolvePokemonResponse.evolved_pokemon_data)
  return evolved_pokemon_data_ != NULL ? *evolved_pokemon_data_ : *default_instance_->evolved_pokemon_data_;
}
::POGOProtos::Data::PokemonData* EvolvePokemonResponse::mutable_evolved_pokemon_data() {
  
  if (evolved_pokemon_data_ == NULL) {
    evolved_pokemon_data_ = new ::POGOProtos::Data::PokemonData;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.EvolvePokemonResponse.evolved_pokemon_data)
  return evolved_pokemon_data_;
}
::POGOProtos::Data::PokemonData* EvolvePokemonResponse::release_evolved_pokemon_data() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.EvolvePokemonResponse.evolved_pokemon_data)
  
  ::POGOProtos::Data::PokemonData* temp = evolved_pokemon_data_;
  evolved_pokemon_data_ = NULL;
  return temp;
}
void EvolvePokemonResponse::set_allocated_evolved_pokemon_data(::POGOProtos::Data::PokemonData* evolved_pokemon_data) {
  delete evolved_pokemon_data_;
  evolved_pokemon_data_ = evolved_pokemon_data;
  if (evolved_pokemon_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.EvolvePokemonResponse.evolved_pokemon_data)
}

// optional int32 experience_awarded = 3;
void EvolvePokemonResponse::clear_experience_awarded() {
  experience_awarded_ = 0;
}
 ::google::protobuf::int32 EvolvePokemonResponse::experience_awarded() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.EvolvePokemonResponse.experience_awarded)
  return experience_awarded_;
}
 void EvolvePokemonResponse::set_experience_awarded(::google::protobuf::int32 value) {
  
  experience_awarded_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.EvolvePokemonResponse.experience_awarded)
}

// optional int32 candy_awarded = 4;
void EvolvePokemonResponse::clear_candy_awarded() {
  candy_awarded_ = 0;
}
 ::google::protobuf::int32 EvolvePokemonResponse::candy_awarded() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.EvolvePokemonResponse.candy_awarded)
  return candy_awarded_;
}
 void EvolvePokemonResponse::set_candy_awarded(::google::protobuf::int32 value) {
  
  candy_awarded_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.EvolvePokemonResponse.candy_awarded)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
