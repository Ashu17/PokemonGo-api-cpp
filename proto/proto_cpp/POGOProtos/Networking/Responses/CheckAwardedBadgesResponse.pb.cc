// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/CheckAwardedBadgesResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Networking/Responses/CheckAwardedBadgesResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

namespace {

const ::google::protobuf::Descriptor* CheckAwardedBadgesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckAwardedBadgesResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto() {
  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Networking/Responses/CheckAwardedBadgesResponse.proto");
  GOOGLE_CHECK(file != NULL);
  CheckAwardedBadgesResponse_descriptor_ = file->message_type(0);
  static const int CheckAwardedBadgesResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAwardedBadgesResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAwardedBadgesResponse, awarded_badges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAwardedBadgesResponse, awarded_badge_levels_),
  };
  CheckAwardedBadgesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckAwardedBadgesResponse_descriptor_,
      CheckAwardedBadgesResponse::default_instance_,
      CheckAwardedBadgesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckAwardedBadgesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAwardedBadgesResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAwardedBadgesResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckAwardedBadgesResponse_descriptor_, &CheckAwardedBadgesResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto() {
  delete CheckAwardedBadgesResponse::default_instance_;
  delete CheckAwardedBadgesResponse_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fBadgeType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n@POGOProtos/Networking/Responses/CheckA"
    "wardedBadgesResponse.proto\022\037POGOProtos.N"
    "etworking.Responses\032 POGOProtos/Enums/Ba"
    "dgeType.proto\"\200\001\n\032CheckAwardedBadgesResp"
    "onse\022\017\n\007success\030\001 \001(\010\0223\n\016awarded_badges\030"
    "\002 \003(\0162\033.POGOProtos.Enums.BadgeType\022\034\n\024aw"
    "arded_badge_levels\030\003 \003(\005b\006proto3", 272);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Networking/Responses/CheckAwardedBadgesResponse.proto", &protobuf_RegisterTypes);
  CheckAwardedBadgesResponse::default_instance_ = new CheckAwardedBadgesResponse();
  CheckAwardedBadgesResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto() {
    protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAwardedBadgesResponse::kSuccessFieldNumber;
const int CheckAwardedBadgesResponse::kAwardedBadgesFieldNumber;
const int CheckAwardedBadgesResponse::kAwardedBadgeLevelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAwardedBadgesResponse::CheckAwardedBadgesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
}

void CheckAwardedBadgesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CheckAwardedBadgesResponse::CheckAwardedBadgesResponse(const CheckAwardedBadgesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
}

void CheckAwardedBadgesResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  success_ = false;
}

CheckAwardedBadgesResponse::~CheckAwardedBadgesResponse() {
  // @@protoc_insertion_point(destructor:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  SharedDtor();
}

void CheckAwardedBadgesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckAwardedBadgesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAwardedBadgesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckAwardedBadgesResponse_descriptor_;
}

const CheckAwardedBadgesResponse& CheckAwardedBadgesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckAwardedBadgesResponse_2eproto();
  return *default_instance_;
}

CheckAwardedBadgesResponse* CheckAwardedBadgesResponse::default_instance_ = NULL;

CheckAwardedBadgesResponse* CheckAwardedBadgesResponse::New(::google::protobuf::Arena* arena) const {
  CheckAwardedBadgesResponse* n = new CheckAwardedBadgesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAwardedBadgesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  success_ = false;
  awarded_badges_.Clear();
  awarded_badge_levels_.Clear();
}

bool CheckAwardedBadgesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_awarded_badges;
        break;
      }

      // repeated .POGOProtos.Enums.BadgeType awarded_badges = 2;
      case 2: {
        if (tag == 18) {
         parse_awarded_badges:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_awarded_badges(static_cast< ::POGOProtos::Enums::BadgeType >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_awarded_badges(static_cast< ::POGOProtos::Enums::BadgeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_awarded_badge_levels;
        break;
      }

      // repeated int32 awarded_badge_levels = 3;
      case 3: {
        if (tag == 26) {
         parse_awarded_badge_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_awarded_badge_levels())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_awarded_badge_levels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  return false;
#undef DO_
}

void CheckAwardedBadgesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // repeated .POGOProtos.Enums.BadgeType awarded_badges = 2;
  if (this->awarded_badges_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_awarded_badges_cached_byte_size_);
  }
  for (int i = 0; i < this->awarded_badges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->awarded_badges(i), output);
  }

  // repeated int32 awarded_badge_levels = 3;
  if (this->awarded_badge_levels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_awarded_badge_levels_cached_byte_size_);
  }
  for (int i = 0; i < this->awarded_badge_levels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->awarded_badge_levels(i), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
}

::google::protobuf::uint8* CheckAwardedBadgesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // repeated .POGOProtos.Enums.BadgeType awarded_badges = 2;
  if (this->awarded_badges_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _awarded_badges_cached_byte_size_, target);
  }
  for (int i = 0; i < this->awarded_badges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->awarded_badges(i), target);
  }

  // repeated int32 awarded_badge_levels = 3;
  if (this->awarded_badge_levels_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _awarded_badge_levels_cached_byte_size_, target);
  }
  for (int i = 0; i < this->awarded_badge_levels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->awarded_badge_levels(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  return target;
}

int CheckAwardedBadgesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // repeated .POGOProtos.Enums.BadgeType awarded_badges = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->awarded_badges_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->awarded_badges(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _awarded_badges_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 awarded_badge_levels = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->awarded_badge_levels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->awarded_badge_levels(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _awarded_badge_levels_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAwardedBadgesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CheckAwardedBadgesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckAwardedBadgesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
    MergeFrom(*source);
  }
}

void CheckAwardedBadgesResponse::MergeFrom(const CheckAwardedBadgesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  awarded_badges_.MergeFrom(from.awarded_badges_);
  awarded_badge_levels_.MergeFrom(from.awarded_badge_levels_);
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void CheckAwardedBadgesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAwardedBadgesResponse::CopyFrom(const CheckAwardedBadgesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAwardedBadgesResponse::IsInitialized() const {

  return true;
}

void CheckAwardedBadgesResponse::Swap(CheckAwardedBadgesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAwardedBadgesResponse::InternalSwap(CheckAwardedBadgesResponse* other) {
  std::swap(success_, other->success_);
  awarded_badges_.UnsafeArenaSwap(&other->awarded_badges_);
  awarded_badge_levels_.UnsafeArenaSwap(&other->awarded_badge_levels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAwardedBadgesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckAwardedBadgesResponse_descriptor_;
  metadata.reflection = CheckAwardedBadgesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAwardedBadgesResponse

// optional bool success = 1;
void CheckAwardedBadgesResponse::clear_success() {
  success_ = false;
}
 bool CheckAwardedBadgesResponse::success() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.success)
  return success_;
}
 void CheckAwardedBadgesResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.success)
}

// repeated .POGOProtos.Enums.BadgeType awarded_badges = 2;
int CheckAwardedBadgesResponse::awarded_badges_size() const {
  return awarded_badges_.size();
}
void CheckAwardedBadgesResponse::clear_awarded_badges() {
  awarded_badges_.Clear();
}
 ::POGOProtos::Enums::BadgeType CheckAwardedBadgesResponse::awarded_badges(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.awarded_badges)
  return static_cast< ::POGOProtos::Enums::BadgeType >(awarded_badges_.Get(index));
}
 void CheckAwardedBadgesResponse::set_awarded_badges(int index, ::POGOProtos::Enums::BadgeType value) {
  awarded_badges_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.awarded_badges)
}
 void CheckAwardedBadgesResponse::add_awarded_badges(::POGOProtos::Enums::BadgeType value) {
  awarded_badges_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.awarded_badges)
}
 const ::google::protobuf::RepeatedField<int>&
CheckAwardedBadgesResponse::awarded_badges() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.awarded_badges)
  return awarded_badges_;
}
 ::google::protobuf::RepeatedField<int>*
CheckAwardedBadgesResponse::mutable_awarded_badges() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.awarded_badges)
  return &awarded_badges_;
}

// repeated int32 awarded_badge_levels = 3;
int CheckAwardedBadgesResponse::awarded_badge_levels_size() const {
  return awarded_badge_levels_.size();
}
void CheckAwardedBadgesResponse::clear_awarded_badge_levels() {
  awarded_badge_levels_.Clear();
}
 ::google::protobuf::int32 CheckAwardedBadgesResponse::awarded_badge_levels(int index) const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.awarded_badge_levels)
  return awarded_badge_levels_.Get(index);
}
 void CheckAwardedBadgesResponse::set_awarded_badge_levels(int index, ::google::protobuf::int32 value) {
  awarded_badge_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.awarded_badge_levels)
}
 void CheckAwardedBadgesResponse::add_awarded_badge_levels(::google::protobuf::int32 value) {
  awarded_badge_levels_.Add(value);
  // @@protoc_insertion_point(field_add:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.awarded_badge_levels)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CheckAwardedBadgesResponse::awarded_badge_levels() const {
  // @@protoc_insertion_point(field_list:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.awarded_badge_levels)
  return awarded_badge_levels_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CheckAwardedBadgesResponse::mutable_awarded_badge_levels() {
  // @@protoc_insertion_point(field_mutable_list:POGOProtos.Networking.Responses.CheckAwardedBadgesResponse.awarded_badge_levels)
  return &awarded_badge_levels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
