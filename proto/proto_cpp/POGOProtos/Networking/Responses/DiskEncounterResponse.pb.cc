// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/DiskEncounterResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Networking/Responses/DiskEncounterResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

namespace {

const ::google::protobuf::Descriptor* DiskEncounterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskEncounterResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DiskEncounterResponse_Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto() {
  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Networking/Responses/DiskEncounterResponse.proto");
  GOOGLE_CHECK(file != NULL);
  DiskEncounterResponse_descriptor_ = file->message_type(0);
  static const int DiskEncounterResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskEncounterResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskEncounterResponse, pokemon_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskEncounterResponse, capture_probability_),
  };
  DiskEncounterResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DiskEncounterResponse_descriptor_,
      DiskEncounterResponse::default_instance_,
      DiskEncounterResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DiskEncounterResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskEncounterResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskEncounterResponse, _is_default_instance_));
  DiskEncounterResponse_Result_descriptor_ = DiskEncounterResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DiskEncounterResponse_descriptor_, &DiskEncounterResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto() {
  delete DiskEncounterResponse::default_instance_;
  delete DiskEncounterResponse_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Data::protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  ::POGOProtos::Data::Capture::protobuf_AddDesc_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n;POGOProtos/Networking/Responses/DiskEn"
    "counterResponse.proto\022\037POGOProtos.Networ"
    "king.Responses\032!POGOProtos/Data/PokemonD"
    "ata.proto\0320POGOProtos/Data/Capture/Captu"
    "reProbability.proto\"\352\002\n\025DiskEncounterRes"
    "ponse\022M\n\006result\030\001 \001(\0162=.POGOProtos.Netwo"
    "rking.Responses.DiskEncounterResponse.Re"
    "sult\0222\n\014pokemon_data\030\002 \001(\0132\034.POGOProtos."
    "Data.PokemonData\022H\n\023capture_probability\030"
    "\003 \001(\0132+.POGOProtos.Data.Capture.CaptureP"
    "robability\"\203\001\n\006Result\022\013\n\007UNKNOWN\020\000\022\013\n\007SU"
    "CCESS\020\001\022\021\n\rNOT_AVAILABLE\020\002\022\020\n\014NOT_IN_RAN"
    "GE\020\003\022\036\n\032ENCOUNTER_ALREADY_FINISHED\020\004\022\032\n\026"
    "POKEMON_INVENTORY_FULL\020\005b\006proto3", 552);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Networking/Responses/DiskEncounterResponse.proto", &protobuf_RegisterTypes);
  DiskEncounterResponse::default_instance_ = new DiskEncounterResponse();
  DiskEncounterResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto() {
    protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DiskEncounterResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskEncounterResponse_Result_descriptor_;
}
bool DiskEncounterResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DiskEncounterResponse_Result DiskEncounterResponse::UNKNOWN;
const DiskEncounterResponse_Result DiskEncounterResponse::SUCCESS;
const DiskEncounterResponse_Result DiskEncounterResponse::NOT_AVAILABLE;
const DiskEncounterResponse_Result DiskEncounterResponse::NOT_IN_RANGE;
const DiskEncounterResponse_Result DiskEncounterResponse::ENCOUNTER_ALREADY_FINISHED;
const DiskEncounterResponse_Result DiskEncounterResponse::POKEMON_INVENTORY_FULL;
const DiskEncounterResponse_Result DiskEncounterResponse::Result_MIN;
const DiskEncounterResponse_Result DiskEncounterResponse::Result_MAX;
const int DiskEncounterResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiskEncounterResponse::kResultFieldNumber;
const int DiskEncounterResponse::kPokemonDataFieldNumber;
const int DiskEncounterResponse::kCaptureProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiskEncounterResponse::DiskEncounterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Networking.Responses.DiskEncounterResponse)
}

void DiskEncounterResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pokemon_data_ = const_cast< ::POGOProtos::Data::PokemonData*>(&::POGOProtos::Data::PokemonData::default_instance());
  capture_probability_ = const_cast< ::POGOProtos::Data::Capture::CaptureProbability*>(&::POGOProtos::Data::Capture::CaptureProbability::default_instance());
}

DiskEncounterResponse::DiskEncounterResponse(const DiskEncounterResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Networking.Responses.DiskEncounterResponse)
}

void DiskEncounterResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
  pokemon_data_ = NULL;
  capture_probability_ = NULL;
}

DiskEncounterResponse::~DiskEncounterResponse() {
  // @@protoc_insertion_point(destructor:POGOProtos.Networking.Responses.DiskEncounterResponse)
  SharedDtor();
}

void DiskEncounterResponse::SharedDtor() {
  if (this != default_instance_) {
    delete pokemon_data_;
    delete capture_probability_;
  }
}

void DiskEncounterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskEncounterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskEncounterResponse_descriptor_;
}

const DiskEncounterResponse& DiskEncounterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fDiskEncounterResponse_2eproto();
  return *default_instance_;
}

DiskEncounterResponse* DiskEncounterResponse::default_instance_ = NULL;

DiskEncounterResponse* DiskEncounterResponse::New(::google::protobuf::Arena* arena) const {
  DiskEncounterResponse* n = new DiskEncounterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiskEncounterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Networking.Responses.DiskEncounterResponse)
  result_ = 0;
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && capture_probability_ != NULL) delete capture_probability_;
  capture_probability_ = NULL;
}

bool DiskEncounterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Networking.Responses.DiskEncounterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Networking.Responses.DiskEncounterResponse.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::POGOProtos::Networking::Responses::DiskEncounterResponse_Result >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pokemon_data;
        break;
      }

      // optional .POGOProtos.Data.PokemonData pokemon_data = 2;
      case 2: {
        if (tag == 18) {
         parse_pokemon_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pokemon_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_capture_probability;
        break;
      }

      // optional .POGOProtos.Data.Capture.CaptureProbability capture_probability = 3;
      case 3: {
        if (tag == 26) {
         parse_capture_probability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capture_probability()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Networking.Responses.DiskEncounterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Networking.Responses.DiskEncounterResponse)
  return false;
#undef DO_
}

void DiskEncounterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Networking.Responses.DiskEncounterResponse)
  // optional .POGOProtos.Networking.Responses.DiskEncounterResponse.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .POGOProtos.Data.PokemonData pokemon_data = 2;
  if (this->has_pokemon_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pokemon_data_, output);
  }

  // optional .POGOProtos.Data.Capture.CaptureProbability capture_probability = 3;
  if (this->has_capture_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->capture_probability_, output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Networking.Responses.DiskEncounterResponse)
}

::google::protobuf::uint8* DiskEncounterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Networking.Responses.DiskEncounterResponse)
  // optional .POGOProtos.Networking.Responses.DiskEncounterResponse.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .POGOProtos.Data.PokemonData pokemon_data = 2;
  if (this->has_pokemon_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pokemon_data_, false, target);
  }

  // optional .POGOProtos.Data.Capture.CaptureProbability capture_probability = 3;
  if (this->has_capture_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->capture_probability_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Networking.Responses.DiskEncounterResponse)
  return target;
}

int DiskEncounterResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Networking.Responses.DiskEncounterResponse)
  int total_size = 0;

  // optional .POGOProtos.Networking.Responses.DiskEncounterResponse.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // optional .POGOProtos.Data.PokemonData pokemon_data = 2;
  if (this->has_pokemon_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pokemon_data_);
  }

  // optional .POGOProtos.Data.Capture.CaptureProbability capture_probability = 3;
  if (this->has_capture_probability()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capture_probability_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskEncounterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Networking.Responses.DiskEncounterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DiskEncounterResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DiskEncounterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Networking.Responses.DiskEncounterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Networking.Responses.DiskEncounterResponse)
    MergeFrom(*source);
  }
}

void DiskEncounterResponse::MergeFrom(const DiskEncounterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Networking.Responses.DiskEncounterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.has_pokemon_data()) {
    mutable_pokemon_data()->::POGOProtos::Data::PokemonData::MergeFrom(from.pokemon_data());
  }
  if (from.has_capture_probability()) {
    mutable_capture_probability()->::POGOProtos::Data::Capture::CaptureProbability::MergeFrom(from.capture_probability());
  }
}

void DiskEncounterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Networking.Responses.DiskEncounterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskEncounterResponse::CopyFrom(const DiskEncounterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Networking.Responses.DiskEncounterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskEncounterResponse::IsInitialized() const {

  return true;
}

void DiskEncounterResponse::Swap(DiskEncounterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiskEncounterResponse::InternalSwap(DiskEncounterResponse* other) {
  std::swap(result_, other->result_);
  std::swap(pokemon_data_, other->pokemon_data_);
  std::swap(capture_probability_, other->capture_probability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiskEncounterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskEncounterResponse_descriptor_;
  metadata.reflection = DiskEncounterResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiskEncounterResponse

// optional .POGOProtos.Networking.Responses.DiskEncounterResponse.Result result = 1;
void DiskEncounterResponse::clear_result() {
  result_ = 0;
}
 ::POGOProtos::Networking::Responses::DiskEncounterResponse_Result DiskEncounterResponse::result() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.DiskEncounterResponse.result)
  return static_cast< ::POGOProtos::Networking::Responses::DiskEncounterResponse_Result >(result_);
}
 void DiskEncounterResponse::set_result(::POGOProtos::Networking::Responses::DiskEncounterResponse_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.DiskEncounterResponse.result)
}

// optional .POGOProtos.Data.PokemonData pokemon_data = 2;
bool DiskEncounterResponse::has_pokemon_data() const {
  return !_is_default_instance_ && pokemon_data_ != NULL;
}
void DiskEncounterResponse::clear_pokemon_data() {
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
}
const ::POGOProtos::Data::PokemonData& DiskEncounterResponse::pokemon_data() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.DiskEncounterResponse.pokemon_data)
  return pokemon_data_ != NULL ? *pokemon_data_ : *default_instance_->pokemon_data_;
}
::POGOProtos::Data::PokemonData* DiskEncounterResponse::mutable_pokemon_data() {
  
  if (pokemon_data_ == NULL) {
    pokemon_data_ = new ::POGOProtos::Data::PokemonData;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.DiskEncounterResponse.pokemon_data)
  return pokemon_data_;
}
::POGOProtos::Data::PokemonData* DiskEncounterResponse::release_pokemon_data() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.DiskEncounterResponse.pokemon_data)
  
  ::POGOProtos::Data::PokemonData* temp = pokemon_data_;
  pokemon_data_ = NULL;
  return temp;
}
void DiskEncounterResponse::set_allocated_pokemon_data(::POGOProtos::Data::PokemonData* pokemon_data) {
  delete pokemon_data_;
  pokemon_data_ = pokemon_data;
  if (pokemon_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.DiskEncounterResponse.pokemon_data)
}

// optional .POGOProtos.Data.Capture.CaptureProbability capture_probability = 3;
bool DiskEncounterResponse::has_capture_probability() const {
  return !_is_default_instance_ && capture_probability_ != NULL;
}
void DiskEncounterResponse::clear_capture_probability() {
  if (GetArenaNoVirtual() == NULL && capture_probability_ != NULL) delete capture_probability_;
  capture_probability_ = NULL;
}
const ::POGOProtos::Data::Capture::CaptureProbability& DiskEncounterResponse::capture_probability() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.DiskEncounterResponse.capture_probability)
  return capture_probability_ != NULL ? *capture_probability_ : *default_instance_->capture_probability_;
}
::POGOProtos::Data::Capture::CaptureProbability* DiskEncounterResponse::mutable_capture_probability() {
  
  if (capture_probability_ == NULL) {
    capture_probability_ = new ::POGOProtos::Data::Capture::CaptureProbability;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.DiskEncounterResponse.capture_probability)
  return capture_probability_;
}
::POGOProtos::Data::Capture::CaptureProbability* DiskEncounterResponse::release_capture_probability() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.DiskEncounterResponse.capture_probability)
  
  ::POGOProtos::Data::Capture::CaptureProbability* temp = capture_probability_;
  capture_probability_ = NULL;
  return temp;
}
void DiskEncounterResponse::set_allocated_capture_probability(::POGOProtos::Data::Capture::CaptureProbability* capture_probability) {
  delete capture_probability_;
  capture_probability_ = capture_probability;
  if (capture_probability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.DiskEncounterResponse.capture_probability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
