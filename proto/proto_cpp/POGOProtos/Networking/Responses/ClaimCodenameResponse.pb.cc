// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/ClaimCodenameResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Networking/Responses/ClaimCodenameResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

namespace {

const ::google::protobuf::Descriptor* ClaimCodenameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClaimCodenameResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClaimCodenameResponse_Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto() {
  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Networking/Responses/ClaimCodenameResponse.proto");
  GOOGLE_CHECK(file != NULL);
  ClaimCodenameResponse_descriptor_ = file->message_type(0);
  static const int ClaimCodenameResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimCodenameResponse, codename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimCodenameResponse, user_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimCodenameResponse, is_assignable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimCodenameResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimCodenameResponse, updated_player_),
  };
  ClaimCodenameResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClaimCodenameResponse_descriptor_,
      ClaimCodenameResponse::default_instance_,
      ClaimCodenameResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClaimCodenameResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimCodenameResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimCodenameResponse, _is_default_instance_));
  ClaimCodenameResponse_Status_descriptor_ = ClaimCodenameResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClaimCodenameResponse_descriptor_, &ClaimCodenameResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto() {
  delete ClaimCodenameResponse::default_instance_;
  delete ClaimCodenameResponse_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Data::protobuf_AddDesc_POGOProtos_2fData_2fPlayerData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n;POGOProtos/Networking/Responses/ClaimC"
    "odenameResponse.proto\022\037POGOProtos.Networ"
    "king.Responses\032 POGOProtos/Data/PlayerDa"
    "ta.proto\"\345\002\n\025ClaimCodenameResponse\022\020\n\010co"
    "dename\030\001 \001(\t\022\024\n\014user_message\030\002 \001(\t\022\025\n\ris"
    "_assignable\030\003 \001(\010\022M\n\006status\030\004 \001(\0162=.POGO"
    "Protos.Networking.Responses.ClaimCodenam"
    "eResponse.Status\0223\n\016updated_player\030\005 \001(\013"
    "2\033.POGOProtos.Data.PlayerData\"\210\001\n\006Status"
    "\022\t\n\005UNSET\020\000\022\013\n\007SUCCESS\020\001\022\032\n\026CODENAME_NOT"
    "_AVAILABLE\020\002\022\026\n\022CODENAME_NOT_VALID\020\003\022\021\n\r"
    "CURRENT_OWNER\020\004\022\037\n\033CODENAME_CHANGE_NOT_A"
    "LLOWED\020\005b\006proto3", 496);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Networking/Responses/ClaimCodenameResponse.proto", &protobuf_RegisterTypes);
  ClaimCodenameResponse::default_instance_ = new ClaimCodenameResponse();
  ClaimCodenameResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto() {
    protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ClaimCodenameResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClaimCodenameResponse_Status_descriptor_;
}
bool ClaimCodenameResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClaimCodenameResponse_Status ClaimCodenameResponse::UNSET;
const ClaimCodenameResponse_Status ClaimCodenameResponse::SUCCESS;
const ClaimCodenameResponse_Status ClaimCodenameResponse::CODENAME_NOT_AVAILABLE;
const ClaimCodenameResponse_Status ClaimCodenameResponse::CODENAME_NOT_VALID;
const ClaimCodenameResponse_Status ClaimCodenameResponse::CURRENT_OWNER;
const ClaimCodenameResponse_Status ClaimCodenameResponse::CODENAME_CHANGE_NOT_ALLOWED;
const ClaimCodenameResponse_Status ClaimCodenameResponse::Status_MIN;
const ClaimCodenameResponse_Status ClaimCodenameResponse::Status_MAX;
const int ClaimCodenameResponse::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClaimCodenameResponse::kCodenameFieldNumber;
const int ClaimCodenameResponse::kUserMessageFieldNumber;
const int ClaimCodenameResponse::kIsAssignableFieldNumber;
const int ClaimCodenameResponse::kStatusFieldNumber;
const int ClaimCodenameResponse::kUpdatedPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClaimCodenameResponse::ClaimCodenameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Networking.Responses.ClaimCodenameResponse)
}

void ClaimCodenameResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  updated_player_ = const_cast< ::POGOProtos::Data::PlayerData*>(&::POGOProtos::Data::PlayerData::default_instance());
}

ClaimCodenameResponse::ClaimCodenameResponse(const ClaimCodenameResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Networking.Responses.ClaimCodenameResponse)
}

void ClaimCodenameResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  codename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_assignable_ = false;
  status_ = 0;
  updated_player_ = NULL;
}

ClaimCodenameResponse::~ClaimCodenameResponse() {
  // @@protoc_insertion_point(destructor:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  SharedDtor();
}

void ClaimCodenameResponse::SharedDtor() {
  codename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete updated_player_;
  }
}

void ClaimCodenameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClaimCodenameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClaimCodenameResponse_descriptor_;
}

const ClaimCodenameResponse& ClaimCodenameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fClaimCodenameResponse_2eproto();
  return *default_instance_;
}

ClaimCodenameResponse* ClaimCodenameResponse::default_instance_ = NULL;

ClaimCodenameResponse* ClaimCodenameResponse::New(::google::protobuf::Arena* arena) const {
  ClaimCodenameResponse* n = new ClaimCodenameResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClaimCodenameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Networking.Responses.ClaimCodenameResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClaimCodenameResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClaimCodenameResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_assignable_, status_);
  codename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && updated_player_ != NULL) delete updated_player_;
  updated_player_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ClaimCodenameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string codename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codename().data(), this->codename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Networking.Responses.ClaimCodenameResponse.codename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_message;
        break;
      }

      // optional string user_message = 2;
      case 2: {
        if (tag == 18) {
         parse_user_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_message().data(), this->user_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Networking.Responses.ClaimCodenameResponse.user_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_assignable;
        break;
      }

      // optional bool is_assignable = 3;
      case 3: {
        if (tag == 24) {
         parse_is_assignable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_assignable_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .POGOProtos.Networking.Responses.ClaimCodenameResponse.Status status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::POGOProtos::Networking::Responses::ClaimCodenameResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updated_player;
        break;
      }

      // optional .POGOProtos.Data.PlayerData updated_player = 5;
      case 5: {
        if (tag == 42) {
         parse_updated_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updated_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  return false;
#undef DO_
}

void ClaimCodenameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  // optional string codename = 1;
  if (this->codename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codename().data(), this->codename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Responses.ClaimCodenameResponse.codename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->codename(), output);
  }

  // optional string user_message = 2;
  if (this->user_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_message().data(), this->user_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Responses.ClaimCodenameResponse.user_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_message(), output);
  }

  // optional bool is_assignable = 3;
  if (this->is_assignable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_assignable(), output);
  }

  // optional .POGOProtos.Networking.Responses.ClaimCodenameResponse.Status status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional .POGOProtos.Data.PlayerData updated_player = 5;
  if (this->has_updated_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->updated_player_, output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Networking.Responses.ClaimCodenameResponse)
}

::google::protobuf::uint8* ClaimCodenameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  // optional string codename = 1;
  if (this->codename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codename().data(), this->codename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Responses.ClaimCodenameResponse.codename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->codename(), target);
  }

  // optional string user_message = 2;
  if (this->user_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_message().data(), this->user_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Responses.ClaimCodenameResponse.user_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_message(), target);
  }

  // optional bool is_assignable = 3;
  if (this->is_assignable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_assignable(), target);
  }

  // optional .POGOProtos.Networking.Responses.ClaimCodenameResponse.Status status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional .POGOProtos.Data.PlayerData updated_player = 5;
  if (this->has_updated_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->updated_player_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  return target;
}

int ClaimCodenameResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  int total_size = 0;

  // optional string codename = 1;
  if (this->codename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codename());
  }

  // optional string user_message = 2;
  if (this->user_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_message());
  }

  // optional bool is_assignable = 3;
  if (this->is_assignable() != 0) {
    total_size += 1 + 1;
  }

  // optional .POGOProtos.Networking.Responses.ClaimCodenameResponse.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional .POGOProtos.Data.PlayerData updated_player = 5;
  if (this->has_updated_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->updated_player_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClaimCodenameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClaimCodenameResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClaimCodenameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Networking.Responses.ClaimCodenameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Networking.Responses.ClaimCodenameResponse)
    MergeFrom(*source);
  }
}

void ClaimCodenameResponse::MergeFrom(const ClaimCodenameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.codename().size() > 0) {

    codename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codename_);
  }
  if (from.user_message().size() > 0) {

    user_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_message_);
  }
  if (from.is_assignable() != 0) {
    set_is_assignable(from.is_assignable());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.has_updated_player()) {
    mutable_updated_player()->::POGOProtos::Data::PlayerData::MergeFrom(from.updated_player());
  }
}

void ClaimCodenameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClaimCodenameResponse::CopyFrom(const ClaimCodenameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimCodenameResponse::IsInitialized() const {

  return true;
}

void ClaimCodenameResponse::Swap(ClaimCodenameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClaimCodenameResponse::InternalSwap(ClaimCodenameResponse* other) {
  codename_.Swap(&other->codename_);
  user_message_.Swap(&other->user_message_);
  std::swap(is_assignable_, other->is_assignable_);
  std::swap(status_, other->status_);
  std::swap(updated_player_, other->updated_player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClaimCodenameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClaimCodenameResponse_descriptor_;
  metadata.reflection = ClaimCodenameResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClaimCodenameResponse

// optional string codename = 1;
void ClaimCodenameResponse::clear_codename() {
  codename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClaimCodenameResponse::codename() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.ClaimCodenameResponse.codename)
  return codename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClaimCodenameResponse::set_codename(const ::std::string& value) {
  
  codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.ClaimCodenameResponse.codename)
}
 void ClaimCodenameResponse::set_codename(const char* value) {
  
  codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Networking.Responses.ClaimCodenameResponse.codename)
}
 void ClaimCodenameResponse::set_codename(const char* value, size_t size) {
  
  codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Networking.Responses.ClaimCodenameResponse.codename)
}
 ::std::string* ClaimCodenameResponse::mutable_codename() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.ClaimCodenameResponse.codename)
  return codename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClaimCodenameResponse::release_codename() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.ClaimCodenameResponse.codename)
  
  return codename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClaimCodenameResponse::set_allocated_codename(::std::string* codename) {
  if (codename != NULL) {
    
  } else {
    
  }
  codename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codename);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.ClaimCodenameResponse.codename)
}

// optional string user_message = 2;
void ClaimCodenameResponse::clear_user_message() {
  user_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClaimCodenameResponse::user_message() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.ClaimCodenameResponse.user_message)
  return user_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClaimCodenameResponse::set_user_message(const ::std::string& value) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.ClaimCodenameResponse.user_message)
}
 void ClaimCodenameResponse::set_user_message(const char* value) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Networking.Responses.ClaimCodenameResponse.user_message)
}
 void ClaimCodenameResponse::set_user_message(const char* value, size_t size) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Networking.Responses.ClaimCodenameResponse.user_message)
}
 ::std::string* ClaimCodenameResponse::mutable_user_message() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.ClaimCodenameResponse.user_message)
  return user_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClaimCodenameResponse::release_user_message() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.ClaimCodenameResponse.user_message)
  
  return user_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClaimCodenameResponse::set_allocated_user_message(::std::string* user_message) {
  if (user_message != NULL) {
    
  } else {
    
  }
  user_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_message);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.ClaimCodenameResponse.user_message)
}

// optional bool is_assignable = 3;
void ClaimCodenameResponse::clear_is_assignable() {
  is_assignable_ = false;
}
 bool ClaimCodenameResponse::is_assignable() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.ClaimCodenameResponse.is_assignable)
  return is_assignable_;
}
 void ClaimCodenameResponse::set_is_assignable(bool value) {
  
  is_assignable_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.ClaimCodenameResponse.is_assignable)
}

// optional .POGOProtos.Networking.Responses.ClaimCodenameResponse.Status status = 4;
void ClaimCodenameResponse::clear_status() {
  status_ = 0;
}
 ::POGOProtos::Networking::Responses::ClaimCodenameResponse_Status ClaimCodenameResponse::status() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.ClaimCodenameResponse.status)
  return static_cast< ::POGOProtos::Networking::Responses::ClaimCodenameResponse_Status >(status_);
}
 void ClaimCodenameResponse::set_status(::POGOProtos::Networking::Responses::ClaimCodenameResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.ClaimCodenameResponse.status)
}

// optional .POGOProtos.Data.PlayerData updated_player = 5;
bool ClaimCodenameResponse::has_updated_player() const {
  return !_is_default_instance_ && updated_player_ != NULL;
}
void ClaimCodenameResponse::clear_updated_player() {
  if (GetArenaNoVirtual() == NULL && updated_player_ != NULL) delete updated_player_;
  updated_player_ = NULL;
}
const ::POGOProtos::Data::PlayerData& ClaimCodenameResponse::updated_player() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.ClaimCodenameResponse.updated_player)
  return updated_player_ != NULL ? *updated_player_ : *default_instance_->updated_player_;
}
::POGOProtos::Data::PlayerData* ClaimCodenameResponse::mutable_updated_player() {
  
  if (updated_player_ == NULL) {
    updated_player_ = new ::POGOProtos::Data::PlayerData;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.ClaimCodenameResponse.updated_player)
  return updated_player_;
}
::POGOProtos::Data::PlayerData* ClaimCodenameResponse::release_updated_player() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.ClaimCodenameResponse.updated_player)
  
  ::POGOProtos::Data::PlayerData* temp = updated_player_;
  updated_player_ = NULL;
  return temp;
}
void ClaimCodenameResponse::set_allocated_updated_player(::POGOProtos::Data::PlayerData* updated_player) {
  delete updated_player_;
  updated_player_ = updated_player;
  if (updated_player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.ClaimCodenameResponse.updated_player)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
