// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/IncenseEncounterResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Networking/Responses/IncenseEncounterResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

namespace {

const ::google::protobuf::Descriptor* IncenseEncounterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncenseEncounterResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IncenseEncounterResponse_Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto() {
  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Networking/Responses/IncenseEncounterResponse.proto");
  GOOGLE_CHECK(file != NULL);
  IncenseEncounterResponse_descriptor_ = file->message_type(0);
  static const int IncenseEncounterResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseEncounterResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseEncounterResponse, pokemon_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseEncounterResponse, capture_probability_),
  };
  IncenseEncounterResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IncenseEncounterResponse_descriptor_,
      IncenseEncounterResponse::default_instance_,
      IncenseEncounterResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(IncenseEncounterResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseEncounterResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncenseEncounterResponse, _is_default_instance_));
  IncenseEncounterResponse_Result_descriptor_ = IncenseEncounterResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IncenseEncounterResponse_descriptor_, &IncenseEncounterResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto() {
  delete IncenseEncounterResponse::default_instance_;
  delete IncenseEncounterResponse_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Data::protobuf_AddDesc_POGOProtos_2fData_2fPokemonData_2eproto();
  ::POGOProtos::Data::Capture::protobuf_AddDesc_POGOProtos_2fData_2fCapture_2fCaptureProbability_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n>POGOProtos/Networking/Responses/Incens"
    "eEncounterResponse.proto\022\037POGOProtos.Net"
    "working.Responses\032!POGOProtos/Data/Pokem"
    "onData.proto\0320POGOProtos/Data/Capture/Ca"
    "ptureProbability.proto\"\364\002\n\030IncenseEncoun"
    "terResponse\022P\n\006result\030\001 \001(\0162@.POGOProtos"
    ".Networking.Responses.IncenseEncounterRe"
    "sponse.Result\0222\n\014pokemon_data\030\002 \001(\0132\034.PO"
    "GOProtos.Data.PokemonData\022H\n\023capture_pro"
    "bability\030\003 \001(\0132+.POGOProtos.Data.Capture"
    ".CaptureProbability\"\207\001\n\006Result\022\035\n\031INCENS"
    "E_ENCOUNTER_UNKNOWN\020\000\022\035\n\031INCENSE_ENCOUNT"
    "ER_SUCCESS\020\001\022#\n\037INCENSE_ENCOUNTER_NOT_AV"
    "AILABLE\020\002\022\032\n\026POKEMON_INVENTORY_FULL\020\003b\006p"
    "roto3", 565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Networking/Responses/IncenseEncounterResponse.proto", &protobuf_RegisterTypes);
  IncenseEncounterResponse::default_instance_ = new IncenseEncounterResponse();
  IncenseEncounterResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto() {
    protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* IncenseEncounterResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncenseEncounterResponse_Result_descriptor_;
}
bool IncenseEncounterResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IncenseEncounterResponse_Result IncenseEncounterResponse::INCENSE_ENCOUNTER_UNKNOWN;
const IncenseEncounterResponse_Result IncenseEncounterResponse::INCENSE_ENCOUNTER_SUCCESS;
const IncenseEncounterResponse_Result IncenseEncounterResponse::INCENSE_ENCOUNTER_NOT_AVAILABLE;
const IncenseEncounterResponse_Result IncenseEncounterResponse::POKEMON_INVENTORY_FULL;
const IncenseEncounterResponse_Result IncenseEncounterResponse::Result_MIN;
const IncenseEncounterResponse_Result IncenseEncounterResponse::Result_MAX;
const int IncenseEncounterResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncenseEncounterResponse::kResultFieldNumber;
const int IncenseEncounterResponse::kPokemonDataFieldNumber;
const int IncenseEncounterResponse::kCaptureProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncenseEncounterResponse::IncenseEncounterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Networking.Responses.IncenseEncounterResponse)
}

void IncenseEncounterResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pokemon_data_ = const_cast< ::POGOProtos::Data::PokemonData*>(&::POGOProtos::Data::PokemonData::default_instance());
  capture_probability_ = const_cast< ::POGOProtos::Data::Capture::CaptureProbability*>(&::POGOProtos::Data::Capture::CaptureProbability::default_instance());
}

IncenseEncounterResponse::IncenseEncounterResponse(const IncenseEncounterResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Networking.Responses.IncenseEncounterResponse)
}

void IncenseEncounterResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
  pokemon_data_ = NULL;
  capture_probability_ = NULL;
}

IncenseEncounterResponse::~IncenseEncounterResponse() {
  // @@protoc_insertion_point(destructor:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  SharedDtor();
}

void IncenseEncounterResponse::SharedDtor() {
  if (this != default_instance_) {
    delete pokemon_data_;
    delete capture_probability_;
  }
}

void IncenseEncounterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncenseEncounterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncenseEncounterResponse_descriptor_;
}

const IncenseEncounterResponse& IncenseEncounterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fIncenseEncounterResponse_2eproto();
  return *default_instance_;
}

IncenseEncounterResponse* IncenseEncounterResponse::default_instance_ = NULL;

IncenseEncounterResponse* IncenseEncounterResponse::New(::google::protobuf::Arena* arena) const {
  IncenseEncounterResponse* n = new IncenseEncounterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IncenseEncounterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  result_ = 0;
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && capture_probability_ != NULL) delete capture_probability_;
  capture_probability_ = NULL;
}

bool IncenseEncounterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Networking.Responses.IncenseEncounterResponse.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::POGOProtos::Networking::Responses::IncenseEncounterResponse_Result >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pokemon_data;
        break;
      }

      // optional .POGOProtos.Data.PokemonData pokemon_data = 2;
      case 2: {
        if (tag == 18) {
         parse_pokemon_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pokemon_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_capture_probability;
        break;
      }

      // optional .POGOProtos.Data.Capture.CaptureProbability capture_probability = 3;
      case 3: {
        if (tag == 26) {
         parse_capture_probability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capture_probability()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  return false;
#undef DO_
}

void IncenseEncounterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  // optional .POGOProtos.Networking.Responses.IncenseEncounterResponse.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .POGOProtos.Data.PokemonData pokemon_data = 2;
  if (this->has_pokemon_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pokemon_data_, output);
  }

  // optional .POGOProtos.Data.Capture.CaptureProbability capture_probability = 3;
  if (this->has_capture_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->capture_probability_, output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Networking.Responses.IncenseEncounterResponse)
}

::google::protobuf::uint8* IncenseEncounterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  // optional .POGOProtos.Networking.Responses.IncenseEncounterResponse.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .POGOProtos.Data.PokemonData pokemon_data = 2;
  if (this->has_pokemon_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pokemon_data_, false, target);
  }

  // optional .POGOProtos.Data.Capture.CaptureProbability capture_probability = 3;
  if (this->has_capture_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->capture_probability_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  return target;
}

int IncenseEncounterResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  int total_size = 0;

  // optional .POGOProtos.Networking.Responses.IncenseEncounterResponse.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // optional .POGOProtos.Data.PokemonData pokemon_data = 2;
  if (this->has_pokemon_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pokemon_data_);
  }

  // optional .POGOProtos.Data.Capture.CaptureProbability capture_probability = 3;
  if (this->has_capture_probability()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capture_probability_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncenseEncounterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IncenseEncounterResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IncenseEncounterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Networking.Responses.IncenseEncounterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Networking.Responses.IncenseEncounterResponse)
    MergeFrom(*source);
  }
}

void IncenseEncounterResponse::MergeFrom(const IncenseEncounterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.has_pokemon_data()) {
    mutable_pokemon_data()->::POGOProtos::Data::PokemonData::MergeFrom(from.pokemon_data());
  }
  if (from.has_capture_probability()) {
    mutable_capture_probability()->::POGOProtos::Data::Capture::CaptureProbability::MergeFrom(from.capture_probability());
  }
}

void IncenseEncounterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncenseEncounterResponse::CopyFrom(const IncenseEncounterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Networking.Responses.IncenseEncounterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncenseEncounterResponse::IsInitialized() const {

  return true;
}

void IncenseEncounterResponse::Swap(IncenseEncounterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncenseEncounterResponse::InternalSwap(IncenseEncounterResponse* other) {
  std::swap(result_, other->result_);
  std::swap(pokemon_data_, other->pokemon_data_);
  std::swap(capture_probability_, other->capture_probability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IncenseEncounterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncenseEncounterResponse_descriptor_;
  metadata.reflection = IncenseEncounterResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IncenseEncounterResponse

// optional .POGOProtos.Networking.Responses.IncenseEncounterResponse.Result result = 1;
void IncenseEncounterResponse::clear_result() {
  result_ = 0;
}
 ::POGOProtos::Networking::Responses::IncenseEncounterResponse_Result IncenseEncounterResponse::result() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.IncenseEncounterResponse.result)
  return static_cast< ::POGOProtos::Networking::Responses::IncenseEncounterResponse_Result >(result_);
}
 void IncenseEncounterResponse::set_result(::POGOProtos::Networking::Responses::IncenseEncounterResponse_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.IncenseEncounterResponse.result)
}

// optional .POGOProtos.Data.PokemonData pokemon_data = 2;
bool IncenseEncounterResponse::has_pokemon_data() const {
  return !_is_default_instance_ && pokemon_data_ != NULL;
}
void IncenseEncounterResponse::clear_pokemon_data() {
  if (GetArenaNoVirtual() == NULL && pokemon_data_ != NULL) delete pokemon_data_;
  pokemon_data_ = NULL;
}
const ::POGOProtos::Data::PokemonData& IncenseEncounterResponse::pokemon_data() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.IncenseEncounterResponse.pokemon_data)
  return pokemon_data_ != NULL ? *pokemon_data_ : *default_instance_->pokemon_data_;
}
::POGOProtos::Data::PokemonData* IncenseEncounterResponse::mutable_pokemon_data() {
  
  if (pokemon_data_ == NULL) {
    pokemon_data_ = new ::POGOProtos::Data::PokemonData;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.IncenseEncounterResponse.pokemon_data)
  return pokemon_data_;
}
::POGOProtos::Data::PokemonData* IncenseEncounterResponse::release_pokemon_data() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.IncenseEncounterResponse.pokemon_data)
  
  ::POGOProtos::Data::PokemonData* temp = pokemon_data_;
  pokemon_data_ = NULL;
  return temp;
}
void IncenseEncounterResponse::set_allocated_pokemon_data(::POGOProtos::Data::PokemonData* pokemon_data) {
  delete pokemon_data_;
  pokemon_data_ = pokemon_data;
  if (pokemon_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.IncenseEncounterResponse.pokemon_data)
}

// optional .POGOProtos.Data.Capture.CaptureProbability capture_probability = 3;
bool IncenseEncounterResponse::has_capture_probability() const {
  return !_is_default_instance_ && capture_probability_ != NULL;
}
void IncenseEncounterResponse::clear_capture_probability() {
  if (GetArenaNoVirtual() == NULL && capture_probability_ != NULL) delete capture_probability_;
  capture_probability_ = NULL;
}
const ::POGOProtos::Data::Capture::CaptureProbability& IncenseEncounterResponse::capture_probability() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.IncenseEncounterResponse.capture_probability)
  return capture_probability_ != NULL ? *capture_probability_ : *default_instance_->capture_probability_;
}
::POGOProtos::Data::Capture::CaptureProbability* IncenseEncounterResponse::mutable_capture_probability() {
  
  if (capture_probability_ == NULL) {
    capture_probability_ = new ::POGOProtos::Data::Capture::CaptureProbability;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.IncenseEncounterResponse.capture_probability)
  return capture_probability_;
}
::POGOProtos::Data::Capture::CaptureProbability* IncenseEncounterResponse::release_capture_probability() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.IncenseEncounterResponse.capture_probability)
  
  ::POGOProtos::Data::Capture::CaptureProbability* temp = capture_probability_;
  capture_probability_ = NULL;
  return temp;
}
void IncenseEncounterResponse::set_allocated_capture_probability(::POGOProtos::Data::Capture::CaptureProbability* capture_probability) {
  delete capture_probability_;
  capture_probability_ = capture_probability;
  if (capture_probability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.IncenseEncounterResponse.capture_probability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
