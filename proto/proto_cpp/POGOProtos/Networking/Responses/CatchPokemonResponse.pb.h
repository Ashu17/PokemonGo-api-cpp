// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/CatchPokemonResponse.proto

#ifndef PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "POGOProtos/Data/Capture/CaptureAward.pb.h"
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto();
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto();

class CatchPokemonResponse;

enum CatchPokemonResponse_CatchStatus {
  CatchPokemonResponse_CatchStatus_CATCH_ERROR = 0,
  CatchPokemonResponse_CatchStatus_CATCH_SUCCESS = 1,
  CatchPokemonResponse_CatchStatus_CATCH_ESCAPE = 2,
  CatchPokemonResponse_CatchStatus_CATCH_FLEE = 3,
  CatchPokemonResponse_CatchStatus_CATCH_MISSED = 4,
  CatchPokemonResponse_CatchStatus_CatchPokemonResponse_CatchStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CatchPokemonResponse_CatchStatus_CatchPokemonResponse_CatchStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CatchPokemonResponse_CatchStatus_IsValid(int value);
const CatchPokemonResponse_CatchStatus CatchPokemonResponse_CatchStatus_CatchStatus_MIN = CatchPokemonResponse_CatchStatus_CATCH_ERROR;
const CatchPokemonResponse_CatchStatus CatchPokemonResponse_CatchStatus_CatchStatus_MAX = CatchPokemonResponse_CatchStatus_CATCH_MISSED;
const int CatchPokemonResponse_CatchStatus_CatchStatus_ARRAYSIZE = CatchPokemonResponse_CatchStatus_CatchStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CatchPokemonResponse_CatchStatus_descriptor();
inline const ::std::string& CatchPokemonResponse_CatchStatus_Name(CatchPokemonResponse_CatchStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CatchPokemonResponse_CatchStatus_descriptor(), value);
}
inline bool CatchPokemonResponse_CatchStatus_Parse(
    const ::std::string& name, CatchPokemonResponse_CatchStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CatchPokemonResponse_CatchStatus>(
    CatchPokemonResponse_CatchStatus_descriptor(), name, value);
}
// ===================================================================

class CatchPokemonResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Networking.Responses.CatchPokemonResponse) */ {
 public:
  CatchPokemonResponse();
  virtual ~CatchPokemonResponse();

  CatchPokemonResponse(const CatchPokemonResponse& from);

  inline CatchPokemonResponse& operator=(const CatchPokemonResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CatchPokemonResponse& default_instance();

  void Swap(CatchPokemonResponse* other);

  // implements Message ----------------------------------------------

  inline CatchPokemonResponse* New() const { return New(NULL); }

  CatchPokemonResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CatchPokemonResponse& from);
  void MergeFrom(const CatchPokemonResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CatchPokemonResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CatchPokemonResponse_CatchStatus CatchStatus;
  static const CatchStatus CATCH_ERROR =
    CatchPokemonResponse_CatchStatus_CATCH_ERROR;
  static const CatchStatus CATCH_SUCCESS =
    CatchPokemonResponse_CatchStatus_CATCH_SUCCESS;
  static const CatchStatus CATCH_ESCAPE =
    CatchPokemonResponse_CatchStatus_CATCH_ESCAPE;
  static const CatchStatus CATCH_FLEE =
    CatchPokemonResponse_CatchStatus_CATCH_FLEE;
  static const CatchStatus CATCH_MISSED =
    CatchPokemonResponse_CatchStatus_CATCH_MISSED;
  static inline bool CatchStatus_IsValid(int value) {
    return CatchPokemonResponse_CatchStatus_IsValid(value);
  }
  static const CatchStatus CatchStatus_MIN =
    CatchPokemonResponse_CatchStatus_CatchStatus_MIN;
  static const CatchStatus CatchStatus_MAX =
    CatchPokemonResponse_CatchStatus_CatchStatus_MAX;
  static const int CatchStatus_ARRAYSIZE =
    CatchPokemonResponse_CatchStatus_CatchStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CatchStatus_descriptor() {
    return CatchPokemonResponse_CatchStatus_descriptor();
  }
  static inline const ::std::string& CatchStatus_Name(CatchStatus value) {
    return CatchPokemonResponse_CatchStatus_Name(value);
  }
  static inline bool CatchStatus_Parse(const ::std::string& name,
      CatchStatus* value) {
    return CatchPokemonResponse_CatchStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .POGOProtos.Networking.Responses.CatchPokemonResponse.CatchStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus status() const;
  void set_status(::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus value);

  // optional double miss_percent = 2;
  void clear_miss_percent();
  static const int kMissPercentFieldNumber = 2;
  double miss_percent() const;
  void set_miss_percent(double value);

  // optional fixed64 captured_pokemon_id = 3;
  void clear_captured_pokemon_id();
  static const int kCapturedPokemonIdFieldNumber = 3;
  ::google::protobuf::uint64 captured_pokemon_id() const;
  void set_captured_pokemon_id(::google::protobuf::uint64 value);

  // optional .POGOProtos.Data.Capture.CaptureAward capture_award = 4;
  bool has_capture_award() const;
  void clear_capture_award();
  static const int kCaptureAwardFieldNumber = 4;
  const ::POGOProtos::Data::Capture::CaptureAward& capture_award() const;
  ::POGOProtos::Data::Capture::CaptureAward* mutable_capture_award();
  ::POGOProtos::Data::Capture::CaptureAward* release_capture_award();
  void set_allocated_capture_award(::POGOProtos::Data::Capture::CaptureAward* capture_award);

  // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.CatchPokemonResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double miss_percent_;
  ::google::protobuf::uint64 captured_pokemon_id_;
  ::POGOProtos::Data::Capture::CaptureAward* capture_award_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto();

  void InitAsDefaultInstance();
  static CatchPokemonResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CatchPokemonResponse

// optional .POGOProtos.Networking.Responses.CatchPokemonResponse.CatchStatus status = 1;
inline void CatchPokemonResponse::clear_status() {
  status_ = 0;
}
inline ::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus CatchPokemonResponse::status() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CatchPokemonResponse.status)
  return static_cast< ::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus >(status_);
}
inline void CatchPokemonResponse::set_status(::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CatchPokemonResponse.status)
}

// optional double miss_percent = 2;
inline void CatchPokemonResponse::clear_miss_percent() {
  miss_percent_ = 0;
}
inline double CatchPokemonResponse::miss_percent() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CatchPokemonResponse.miss_percent)
  return miss_percent_;
}
inline void CatchPokemonResponse::set_miss_percent(double value) {
  
  miss_percent_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CatchPokemonResponse.miss_percent)
}

// optional fixed64 captured_pokemon_id = 3;
inline void CatchPokemonResponse::clear_captured_pokemon_id() {
  captured_pokemon_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CatchPokemonResponse::captured_pokemon_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CatchPokemonResponse.captured_pokemon_id)
  return captured_pokemon_id_;
}
inline void CatchPokemonResponse::set_captured_pokemon_id(::google::protobuf::uint64 value) {
  
  captured_pokemon_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CatchPokemonResponse.captured_pokemon_id)
}

// optional .POGOProtos.Data.Capture.CaptureAward capture_award = 4;
inline bool CatchPokemonResponse::has_capture_award() const {
  return !_is_default_instance_ && capture_award_ != NULL;
}
inline void CatchPokemonResponse::clear_capture_award() {
  if (GetArenaNoVirtual() == NULL && capture_award_ != NULL) delete capture_award_;
  capture_award_ = NULL;
}
inline const ::POGOProtos::Data::Capture::CaptureAward& CatchPokemonResponse::capture_award() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CatchPokemonResponse.capture_award)
  return capture_award_ != NULL ? *capture_award_ : *default_instance_->capture_award_;
}
inline ::POGOProtos::Data::Capture::CaptureAward* CatchPokemonResponse::mutable_capture_award() {
  
  if (capture_award_ == NULL) {
    capture_award_ = new ::POGOProtos::Data::Capture::CaptureAward;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.CatchPokemonResponse.capture_award)
  return capture_award_;
}
inline ::POGOProtos::Data::Capture::CaptureAward* CatchPokemonResponse::release_capture_award() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.CatchPokemonResponse.capture_award)
  
  ::POGOProtos::Data::Capture::CaptureAward* temp = capture_award_;
  capture_award_ = NULL;
  return temp;
}
inline void CatchPokemonResponse::set_allocated_capture_award(::POGOProtos::Data::Capture::CaptureAward* capture_award) {
  delete capture_award_;
  capture_award_ = capture_award;
  if (capture_award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.CatchPokemonResponse.capture_award)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus>() {
  return ::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto__INCLUDED
