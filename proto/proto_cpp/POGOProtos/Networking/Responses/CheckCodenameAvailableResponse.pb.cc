// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/CheckCodenameAvailableResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Networking/Responses/CheckCodenameAvailableResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

namespace {

const ::google::protobuf::Descriptor* CheckCodenameAvailableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckCodenameAvailableResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CheckCodenameAvailableResponse_Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto() {
  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Networking/Responses/CheckCodenameAvailableResponse.proto");
  GOOGLE_CHECK(file != NULL);
  CheckCodenameAvailableResponse_descriptor_ = file->message_type(0);
  static const int CheckCodenameAvailableResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCodenameAvailableResponse, codename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCodenameAvailableResponse, user_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCodenameAvailableResponse, is_assignable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCodenameAvailableResponse, status_),
  };
  CheckCodenameAvailableResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckCodenameAvailableResponse_descriptor_,
      CheckCodenameAvailableResponse::default_instance_,
      CheckCodenameAvailableResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckCodenameAvailableResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCodenameAvailableResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCodenameAvailableResponse, _is_default_instance_));
  CheckCodenameAvailableResponse_Status_descriptor_ = CheckCodenameAvailableResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckCodenameAvailableResponse_descriptor_, &CheckCodenameAvailableResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto() {
  delete CheckCodenameAvailableResponse::default_instance_;
  delete CheckCodenameAvailableResponse_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nDPOGOProtos/Networking/Responses/CheckC"
    "odenameAvailableResponse.proto\022\037POGOProt"
    "os.Networking.Responses\"\302\002\n\036CheckCodenam"
    "eAvailableResponse\022\020\n\010codename\030\001 \001(\t\022\024\n\014"
    "user_message\030\002 \001(\t\022\025\n\ris_assignable\030\003 \001("
    "\010\022V\n\006status\030\004 \001(\0162F.POGOProtos.Networkin"
    "g.Responses.CheckCodenameAvailableRespon"
    "se.Status\"\210\001\n\006Status\022\t\n\005UNSET\020\000\022\013\n\007SUCCE"
    "SS\020\001\022\032\n\026CODENAME_NOT_AVAILABLE\020\002\022\026\n\022CODE"
    "NAME_NOT_VALID\020\003\022\021\n\rCURRENT_OWNER\020\004\022\037\n\033C"
    "ODENAME_CHANGE_NOT_ALLOWED\020\005b\006proto3", 436);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Networking/Responses/CheckCodenameAvailableResponse.proto", &protobuf_RegisterTypes);
  CheckCodenameAvailableResponse::default_instance_ = new CheckCodenameAvailableResponse();
  CheckCodenameAvailableResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto() {
    protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CheckCodenameAvailableResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckCodenameAvailableResponse_Status_descriptor_;
}
bool CheckCodenameAvailableResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse::UNSET;
const CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse::SUCCESS;
const CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse::CODENAME_NOT_AVAILABLE;
const CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse::CODENAME_NOT_VALID;
const CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse::CURRENT_OWNER;
const CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse::CODENAME_CHANGE_NOT_ALLOWED;
const CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse::Status_MIN;
const CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse::Status_MAX;
const int CheckCodenameAvailableResponse::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckCodenameAvailableResponse::kCodenameFieldNumber;
const int CheckCodenameAvailableResponse::kUserMessageFieldNumber;
const int CheckCodenameAvailableResponse::kIsAssignableFieldNumber;
const int CheckCodenameAvailableResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckCodenameAvailableResponse::CheckCodenameAvailableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
}

void CheckCodenameAvailableResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CheckCodenameAvailableResponse::CheckCodenameAvailableResponse(const CheckCodenameAvailableResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
}

void CheckCodenameAvailableResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  codename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_assignable_ = false;
  status_ = 0;
}

CheckCodenameAvailableResponse::~CheckCodenameAvailableResponse() {
  // @@protoc_insertion_point(destructor:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  SharedDtor();
}

void CheckCodenameAvailableResponse::SharedDtor() {
  codename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CheckCodenameAvailableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckCodenameAvailableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckCodenameAvailableResponse_descriptor_;
}

const CheckCodenameAvailableResponse& CheckCodenameAvailableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto();
  return *default_instance_;
}

CheckCodenameAvailableResponse* CheckCodenameAvailableResponse::default_instance_ = NULL;

CheckCodenameAvailableResponse* CheckCodenameAvailableResponse::New(::google::protobuf::Arena* arena) const {
  CheckCodenameAvailableResponse* n = new CheckCodenameAvailableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckCodenameAvailableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CheckCodenameAvailableResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CheckCodenameAvailableResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_assignable_, status_);
  codename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CheckCodenameAvailableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string codename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codename().data(), this->codename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_message;
        break;
      }

      // optional string user_message = 2;
      case 2: {
        if (tag == 18) {
         parse_user_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_message().data(), this->user_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_assignable;
        break;
      }

      // optional bool is_assignable = 3;
      case 3: {
        if (tag == 24) {
         parse_is_assignable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_assignable_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.Status status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  return false;
#undef DO_
}

void CheckCodenameAvailableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  // optional string codename = 1;
  if (this->codename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codename().data(), this->codename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->codename(), output);
  }

  // optional string user_message = 2;
  if (this->user_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_message().data(), this->user_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_message(), output);
  }

  // optional bool is_assignable = 3;
  if (this->is_assignable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_assignable(), output);
  }

  // optional .POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.Status status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
}

::google::protobuf::uint8* CheckCodenameAvailableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  // optional string codename = 1;
  if (this->codename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codename().data(), this->codename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->codename(), target);
  }

  // optional string user_message = 2;
  if (this->user_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_message().data(), this->user_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_message(), target);
  }

  // optional bool is_assignable = 3;
  if (this->is_assignable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_assignable(), target);
  }

  // optional .POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.Status status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  return target;
}

int CheckCodenameAvailableResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  int total_size = 0;

  // optional string codename = 1;
  if (this->codename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codename());
  }

  // optional string user_message = 2;
  if (this->user_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_message());
  }

  // optional bool is_assignable = 3;
  if (this->is_assignable() != 0) {
    total_size += 1 + 1;
  }

  // optional .POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckCodenameAvailableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CheckCodenameAvailableResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckCodenameAvailableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
    MergeFrom(*source);
  }
}

void CheckCodenameAvailableResponse::MergeFrom(const CheckCodenameAvailableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.codename().size() > 0) {

    codename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codename_);
  }
  if (from.user_message().size() > 0) {

    user_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_message_);
  }
  if (from.is_assignable() != 0) {
    set_is_assignable(from.is_assignable());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void CheckCodenameAvailableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckCodenameAvailableResponse::CopyFrom(const CheckCodenameAvailableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckCodenameAvailableResponse::IsInitialized() const {

  return true;
}

void CheckCodenameAvailableResponse::Swap(CheckCodenameAvailableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckCodenameAvailableResponse::InternalSwap(CheckCodenameAvailableResponse* other) {
  codename_.Swap(&other->codename_);
  user_message_.Swap(&other->user_message_);
  std::swap(is_assignable_, other->is_assignable_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckCodenameAvailableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckCodenameAvailableResponse_descriptor_;
  metadata.reflection = CheckCodenameAvailableResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckCodenameAvailableResponse

// optional string codename = 1;
void CheckCodenameAvailableResponse::clear_codename() {
  codename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CheckCodenameAvailableResponse::codename() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
  return codename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckCodenameAvailableResponse::set_codename(const ::std::string& value) {
  
  codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
}
 void CheckCodenameAvailableResponse::set_codename(const char* value) {
  
  codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
}
 void CheckCodenameAvailableResponse::set_codename(const char* value, size_t size) {
  
  codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
}
 ::std::string* CheckCodenameAvailableResponse::mutable_codename() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
  return codename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CheckCodenameAvailableResponse::release_codename() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
  
  return codename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckCodenameAvailableResponse::set_allocated_codename(::std::string* codename) {
  if (codename != NULL) {
    
  } else {
    
  }
  codename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codename);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
}

// optional string user_message = 2;
void CheckCodenameAvailableResponse::clear_user_message() {
  user_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CheckCodenameAvailableResponse::user_message() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
  return user_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckCodenameAvailableResponse::set_user_message(const ::std::string& value) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
}
 void CheckCodenameAvailableResponse::set_user_message(const char* value) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
}
 void CheckCodenameAvailableResponse::set_user_message(const char* value, size_t size) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
}
 ::std::string* CheckCodenameAvailableResponse::mutable_user_message() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
  return user_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CheckCodenameAvailableResponse::release_user_message() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
  
  return user_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckCodenameAvailableResponse::set_allocated_user_message(::std::string* user_message) {
  if (user_message != NULL) {
    
  } else {
    
  }
  user_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_message);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
}

// optional bool is_assignable = 3;
void CheckCodenameAvailableResponse::clear_is_assignable() {
  is_assignable_ = false;
}
 bool CheckCodenameAvailableResponse::is_assignable() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.is_assignable)
  return is_assignable_;
}
 void CheckCodenameAvailableResponse::set_is_assignable(bool value) {
  
  is_assignable_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.is_assignable)
}

// optional .POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.Status status = 4;
void CheckCodenameAvailableResponse::clear_status() {
  status_ = 0;
}
 ::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse::status() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.status)
  return static_cast< ::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status >(status_);
}
 void CheckCodenameAvailableResponse::set_status(::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
