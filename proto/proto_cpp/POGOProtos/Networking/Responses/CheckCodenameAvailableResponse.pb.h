// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/CheckCodenameAvailableResponse.proto

#ifndef PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto();
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto();

class CheckCodenameAvailableResponse;

enum CheckCodenameAvailableResponse_Status {
  CheckCodenameAvailableResponse_Status_UNSET = 0,
  CheckCodenameAvailableResponse_Status_SUCCESS = 1,
  CheckCodenameAvailableResponse_Status_CODENAME_NOT_AVAILABLE = 2,
  CheckCodenameAvailableResponse_Status_CODENAME_NOT_VALID = 3,
  CheckCodenameAvailableResponse_Status_CURRENT_OWNER = 4,
  CheckCodenameAvailableResponse_Status_CODENAME_CHANGE_NOT_ALLOWED = 5,
  CheckCodenameAvailableResponse_Status_CheckCodenameAvailableResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CheckCodenameAvailableResponse_Status_CheckCodenameAvailableResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CheckCodenameAvailableResponse_Status_IsValid(int value);
const CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse_Status_Status_MIN = CheckCodenameAvailableResponse_Status_UNSET;
const CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse_Status_Status_MAX = CheckCodenameAvailableResponse_Status_CODENAME_CHANGE_NOT_ALLOWED;
const int CheckCodenameAvailableResponse_Status_Status_ARRAYSIZE = CheckCodenameAvailableResponse_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* CheckCodenameAvailableResponse_Status_descriptor();
inline const ::std::string& CheckCodenameAvailableResponse_Status_Name(CheckCodenameAvailableResponse_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    CheckCodenameAvailableResponse_Status_descriptor(), value);
}
inline bool CheckCodenameAvailableResponse_Status_Parse(
    const ::std::string& name, CheckCodenameAvailableResponse_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CheckCodenameAvailableResponse_Status>(
    CheckCodenameAvailableResponse_Status_descriptor(), name, value);
}
// ===================================================================

class CheckCodenameAvailableResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse) */ {
 public:
  CheckCodenameAvailableResponse();
  virtual ~CheckCodenameAvailableResponse();

  CheckCodenameAvailableResponse(const CheckCodenameAvailableResponse& from);

  inline CheckCodenameAvailableResponse& operator=(const CheckCodenameAvailableResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckCodenameAvailableResponse& default_instance();

  void Swap(CheckCodenameAvailableResponse* other);

  // implements Message ----------------------------------------------

  inline CheckCodenameAvailableResponse* New() const { return New(NULL); }

  CheckCodenameAvailableResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckCodenameAvailableResponse& from);
  void MergeFrom(const CheckCodenameAvailableResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckCodenameAvailableResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CheckCodenameAvailableResponse_Status Status;
  static const Status UNSET =
    CheckCodenameAvailableResponse_Status_UNSET;
  static const Status SUCCESS =
    CheckCodenameAvailableResponse_Status_SUCCESS;
  static const Status CODENAME_NOT_AVAILABLE =
    CheckCodenameAvailableResponse_Status_CODENAME_NOT_AVAILABLE;
  static const Status CODENAME_NOT_VALID =
    CheckCodenameAvailableResponse_Status_CODENAME_NOT_VALID;
  static const Status CURRENT_OWNER =
    CheckCodenameAvailableResponse_Status_CURRENT_OWNER;
  static const Status CODENAME_CHANGE_NOT_ALLOWED =
    CheckCodenameAvailableResponse_Status_CODENAME_CHANGE_NOT_ALLOWED;
  static inline bool Status_IsValid(int value) {
    return CheckCodenameAvailableResponse_Status_IsValid(value);
  }
  static const Status Status_MIN =
    CheckCodenameAvailableResponse_Status_Status_MIN;
  static const Status Status_MAX =
    CheckCodenameAvailableResponse_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    CheckCodenameAvailableResponse_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return CheckCodenameAvailableResponse_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return CheckCodenameAvailableResponse_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return CheckCodenameAvailableResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string codename = 1;
  void clear_codename();
  static const int kCodenameFieldNumber = 1;
  const ::std::string& codename() const;
  void set_codename(const ::std::string& value);
  void set_codename(const char* value);
  void set_codename(const char* value, size_t size);
  ::std::string* mutable_codename();
  ::std::string* release_codename();
  void set_allocated_codename(::std::string* codename);

  // optional string user_message = 2;
  void clear_user_message();
  static const int kUserMessageFieldNumber = 2;
  const ::std::string& user_message() const;
  void set_user_message(const ::std::string& value);
  void set_user_message(const char* value);
  void set_user_message(const char* value, size_t size);
  ::std::string* mutable_user_message();
  ::std::string* release_user_message();
  void set_allocated_user_message(::std::string* user_message);

  // optional bool is_assignable = 3;
  void clear_is_assignable();
  static const int kIsAssignableFieldNumber = 3;
  bool is_assignable() const;
  void set_is_assignable(bool value);

  // optional .POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.Status status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status status() const;
  void set_status(::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status value);

  // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr codename_;
  ::google::protobuf::internal::ArenaStringPtr user_message_;
  bool is_assignable_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto();

  void InitAsDefaultInstance();
  static CheckCodenameAvailableResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckCodenameAvailableResponse

// optional string codename = 1;
inline void CheckCodenameAvailableResponse::clear_codename() {
  codename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckCodenameAvailableResponse::codename() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
  return codename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckCodenameAvailableResponse::set_codename(const ::std::string& value) {
  
  codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
}
inline void CheckCodenameAvailableResponse::set_codename(const char* value) {
  
  codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
}
inline void CheckCodenameAvailableResponse::set_codename(const char* value, size_t size) {
  
  codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
}
inline ::std::string* CheckCodenameAvailableResponse::mutable_codename() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
  return codename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckCodenameAvailableResponse::release_codename() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
  
  return codename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckCodenameAvailableResponse::set_allocated_codename(::std::string* codename) {
  if (codename != NULL) {
    
  } else {
    
  }
  codename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codename);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.codename)
}

// optional string user_message = 2;
inline void CheckCodenameAvailableResponse::clear_user_message() {
  user_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckCodenameAvailableResponse::user_message() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
  return user_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckCodenameAvailableResponse::set_user_message(const ::std::string& value) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
}
inline void CheckCodenameAvailableResponse::set_user_message(const char* value) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
}
inline void CheckCodenameAvailableResponse::set_user_message(const char* value, size_t size) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
}
inline ::std::string* CheckCodenameAvailableResponse::mutable_user_message() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
  return user_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckCodenameAvailableResponse::release_user_message() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
  
  return user_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckCodenameAvailableResponse::set_allocated_user_message(::std::string* user_message) {
  if (user_message != NULL) {
    
  } else {
    
  }
  user_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_message);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.user_message)
}

// optional bool is_assignable = 3;
inline void CheckCodenameAvailableResponse::clear_is_assignable() {
  is_assignable_ = false;
}
inline bool CheckCodenameAvailableResponse::is_assignable() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.is_assignable)
  return is_assignable_;
}
inline void CheckCodenameAvailableResponse::set_is_assignable(bool value) {
  
  is_assignable_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.is_assignable)
}

// optional .POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.Status status = 4;
inline void CheckCodenameAvailableResponse::clear_status() {
  status_ = 0;
}
inline ::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status CheckCodenameAvailableResponse::status() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.status)
  return static_cast< ::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status >(status_);
}
inline void CheckCodenameAvailableResponse::set_status(::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status>() {
  return ::POGOProtos::Networking::Responses::CheckCodenameAvailableResponse_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fCheckCodenameAvailableResponse_2eproto__INCLUDED
