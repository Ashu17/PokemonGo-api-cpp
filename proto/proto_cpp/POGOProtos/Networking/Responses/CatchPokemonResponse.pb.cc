// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/CatchPokemonResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Networking/Responses/CatchPokemonResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

namespace {

const ::google::protobuf::Descriptor* CatchPokemonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatchPokemonResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CatchPokemonResponse_CatchStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto() {
  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Networking/Responses/CatchPokemonResponse.proto");
  GOOGLE_CHECK(file != NULL);
  CatchPokemonResponse_descriptor_ = file->message_type(0);
  static const int CatchPokemonResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonResponse, miss_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonResponse, captured_pokemon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonResponse, capture_award_),
  };
  CatchPokemonResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CatchPokemonResponse_descriptor_,
      CatchPokemonResponse::default_instance_,
      CatchPokemonResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CatchPokemonResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonResponse, _is_default_instance_));
  CatchPokemonResponse_CatchStatus_descriptor_ = CatchPokemonResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CatchPokemonResponse_descriptor_, &CatchPokemonResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto() {
  delete CatchPokemonResponse::default_instance_;
  delete CatchPokemonResponse_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Data::Capture::protobuf_AddDesc_POGOProtos_2fData_2fCapture_2fCaptureAward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n:POGOProtos/Networking/Responses/CatchP"
    "okemonResponse.proto\022\037POGOProtos.Network"
    "ing.Responses\032*POGOProtos/Data/Capture/C"
    "aptureAward.proto\"\301\002\n\024CatchPokemonRespon"
    "se\022Q\n\006status\030\001 \001(\0162A.POGOProtos.Networki"
    "ng.Responses.CatchPokemonResponse.CatchS"
    "tatus\022\024\n\014miss_percent\030\002 \001(\001\022\033\n\023captured_"
    "pokemon_id\030\003 \001(\006\022<\n\rcapture_award\030\004 \001(\0132"
    "%.POGOProtos.Data.Capture.CaptureAward\"e"
    "\n\013CatchStatus\022\017\n\013CATCH_ERROR\020\000\022\021\n\rCATCH_"
    "SUCCESS\020\001\022\020\n\014CATCH_ESCAPE\020\002\022\016\n\nCATCH_FLE"
    "E\020\003\022\020\n\014CATCH_MISSED\020\004b\006proto3", 469);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Networking/Responses/CatchPokemonResponse.proto", &protobuf_RegisterTypes);
  CatchPokemonResponse::default_instance_ = new CatchPokemonResponse();
  CatchPokemonResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto() {
    protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CatchPokemonResponse_CatchStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchPokemonResponse_CatchStatus_descriptor_;
}
bool CatchPokemonResponse_CatchStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CatchPokemonResponse_CatchStatus CatchPokemonResponse::CATCH_ERROR;
const CatchPokemonResponse_CatchStatus CatchPokemonResponse::CATCH_SUCCESS;
const CatchPokemonResponse_CatchStatus CatchPokemonResponse::CATCH_ESCAPE;
const CatchPokemonResponse_CatchStatus CatchPokemonResponse::CATCH_FLEE;
const CatchPokemonResponse_CatchStatus CatchPokemonResponse::CATCH_MISSED;
const CatchPokemonResponse_CatchStatus CatchPokemonResponse::CatchStatus_MIN;
const CatchPokemonResponse_CatchStatus CatchPokemonResponse::CatchStatus_MAX;
const int CatchPokemonResponse::CatchStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatchPokemonResponse::kStatusFieldNumber;
const int CatchPokemonResponse::kMissPercentFieldNumber;
const int CatchPokemonResponse::kCapturedPokemonIdFieldNumber;
const int CatchPokemonResponse::kCaptureAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatchPokemonResponse::CatchPokemonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Networking.Responses.CatchPokemonResponse)
}

void CatchPokemonResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  capture_award_ = const_cast< ::POGOProtos::Data::Capture::CaptureAward*>(&::POGOProtos::Data::Capture::CaptureAward::default_instance());
}

CatchPokemonResponse::CatchPokemonResponse(const CatchPokemonResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Networking.Responses.CatchPokemonResponse)
}

void CatchPokemonResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  miss_percent_ = 0;
  captured_pokemon_id_ = GOOGLE_ULONGLONG(0);
  capture_award_ = NULL;
}

CatchPokemonResponse::~CatchPokemonResponse() {
  // @@protoc_insertion_point(destructor:POGOProtos.Networking.Responses.CatchPokemonResponse)
  SharedDtor();
}

void CatchPokemonResponse::SharedDtor() {
  if (this != default_instance_) {
    delete capture_award_;
  }
}

void CatchPokemonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatchPokemonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchPokemonResponse_descriptor_;
}

const CatchPokemonResponse& CatchPokemonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fCatchPokemonResponse_2eproto();
  return *default_instance_;
}

CatchPokemonResponse* CatchPokemonResponse::default_instance_ = NULL;

CatchPokemonResponse* CatchPokemonResponse::New(::google::protobuf::Arena* arena) const {
  CatchPokemonResponse* n = new CatchPokemonResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CatchPokemonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Networking.Responses.CatchPokemonResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CatchPokemonResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CatchPokemonResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(miss_percent_, captured_pokemon_id_);
  status_ = 0;
  if (GetArenaNoVirtual() == NULL && capture_award_ != NULL) delete capture_award_;
  capture_award_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool CatchPokemonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Networking.Responses.CatchPokemonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Networking.Responses.CatchPokemonResponse.CatchStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_miss_percent;
        break;
      }

      // optional double miss_percent = 2;
      case 2: {
        if (tag == 17) {
         parse_miss_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &miss_percent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_captured_pokemon_id;
        break;
      }

      // optional fixed64 captured_pokemon_id = 3;
      case 3: {
        if (tag == 25) {
         parse_captured_pokemon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &captured_pokemon_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_capture_award;
        break;
      }

      // optional .POGOProtos.Data.Capture.CaptureAward capture_award = 4;
      case 4: {
        if (tag == 34) {
         parse_capture_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capture_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Networking.Responses.CatchPokemonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Networking.Responses.CatchPokemonResponse)
  return false;
#undef DO_
}

void CatchPokemonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Networking.Responses.CatchPokemonResponse)
  // optional .POGOProtos.Networking.Responses.CatchPokemonResponse.CatchStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional double miss_percent = 2;
  if (this->miss_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->miss_percent(), output);
  }

  // optional fixed64 captured_pokemon_id = 3;
  if (this->captured_pokemon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->captured_pokemon_id(), output);
  }

  // optional .POGOProtos.Data.Capture.CaptureAward capture_award = 4;
  if (this->has_capture_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->capture_award_, output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Networking.Responses.CatchPokemonResponse)
}

::google::protobuf::uint8* CatchPokemonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Networking.Responses.CatchPokemonResponse)
  // optional .POGOProtos.Networking.Responses.CatchPokemonResponse.CatchStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional double miss_percent = 2;
  if (this->miss_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->miss_percent(), target);
  }

  // optional fixed64 captured_pokemon_id = 3;
  if (this->captured_pokemon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->captured_pokemon_id(), target);
  }

  // optional .POGOProtos.Data.Capture.CaptureAward capture_award = 4;
  if (this->has_capture_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->capture_award_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Networking.Responses.CatchPokemonResponse)
  return target;
}

int CatchPokemonResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Networking.Responses.CatchPokemonResponse)
  int total_size = 0;

  // optional .POGOProtos.Networking.Responses.CatchPokemonResponse.CatchStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional double miss_percent = 2;
  if (this->miss_percent() != 0) {
    total_size += 1 + 8;
  }

  // optional fixed64 captured_pokemon_id = 3;
  if (this->captured_pokemon_id() != 0) {
    total_size += 1 + 8;
  }

  // optional .POGOProtos.Data.Capture.CaptureAward capture_award = 4;
  if (this->has_capture_award()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capture_award_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatchPokemonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Networking.Responses.CatchPokemonResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CatchPokemonResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CatchPokemonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Networking.Responses.CatchPokemonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Networking.Responses.CatchPokemonResponse)
    MergeFrom(*source);
  }
}

void CatchPokemonResponse::MergeFrom(const CatchPokemonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Networking.Responses.CatchPokemonResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.miss_percent() != 0) {
    set_miss_percent(from.miss_percent());
  }
  if (from.captured_pokemon_id() != 0) {
    set_captured_pokemon_id(from.captured_pokemon_id());
  }
  if (from.has_capture_award()) {
    mutable_capture_award()->::POGOProtos::Data::Capture::CaptureAward::MergeFrom(from.capture_award());
  }
}

void CatchPokemonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Networking.Responses.CatchPokemonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatchPokemonResponse::CopyFrom(const CatchPokemonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Networking.Responses.CatchPokemonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatchPokemonResponse::IsInitialized() const {

  return true;
}

void CatchPokemonResponse::Swap(CatchPokemonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatchPokemonResponse::InternalSwap(CatchPokemonResponse* other) {
  std::swap(status_, other->status_);
  std::swap(miss_percent_, other->miss_percent_);
  std::swap(captured_pokemon_id_, other->captured_pokemon_id_);
  std::swap(capture_award_, other->capture_award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CatchPokemonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatchPokemonResponse_descriptor_;
  metadata.reflection = CatchPokemonResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CatchPokemonResponse

// optional .POGOProtos.Networking.Responses.CatchPokemonResponse.CatchStatus status = 1;
void CatchPokemonResponse::clear_status() {
  status_ = 0;
}
 ::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus CatchPokemonResponse::status() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CatchPokemonResponse.status)
  return static_cast< ::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus >(status_);
}
 void CatchPokemonResponse::set_status(::POGOProtos::Networking::Responses::CatchPokemonResponse_CatchStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CatchPokemonResponse.status)
}

// optional double miss_percent = 2;
void CatchPokemonResponse::clear_miss_percent() {
  miss_percent_ = 0;
}
 double CatchPokemonResponse::miss_percent() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CatchPokemonResponse.miss_percent)
  return miss_percent_;
}
 void CatchPokemonResponse::set_miss_percent(double value) {
  
  miss_percent_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CatchPokemonResponse.miss_percent)
}

// optional fixed64 captured_pokemon_id = 3;
void CatchPokemonResponse::clear_captured_pokemon_id() {
  captured_pokemon_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CatchPokemonResponse::captured_pokemon_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CatchPokemonResponse.captured_pokemon_id)
  return captured_pokemon_id_;
}
 void CatchPokemonResponse::set_captured_pokemon_id(::google::protobuf::uint64 value) {
  
  captured_pokemon_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.CatchPokemonResponse.captured_pokemon_id)
}

// optional .POGOProtos.Data.Capture.CaptureAward capture_award = 4;
bool CatchPokemonResponse::has_capture_award() const {
  return !_is_default_instance_ && capture_award_ != NULL;
}
void CatchPokemonResponse::clear_capture_award() {
  if (GetArenaNoVirtual() == NULL && capture_award_ != NULL) delete capture_award_;
  capture_award_ = NULL;
}
const ::POGOProtos::Data::Capture::CaptureAward& CatchPokemonResponse::capture_award() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.CatchPokemonResponse.capture_award)
  return capture_award_ != NULL ? *capture_award_ : *default_instance_->capture_award_;
}
::POGOProtos::Data::Capture::CaptureAward* CatchPokemonResponse::mutable_capture_award() {
  
  if (capture_award_ == NULL) {
    capture_award_ = new ::POGOProtos::Data::Capture::CaptureAward;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.CatchPokemonResponse.capture_award)
  return capture_award_;
}
::POGOProtos::Data::Capture::CaptureAward* CatchPokemonResponse::release_capture_award() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.CatchPokemonResponse.capture_award)
  
  ::POGOProtos::Data::Capture::CaptureAward* temp = capture_award_;
  capture_award_ = NULL;
  return temp;
}
void CatchPokemonResponse::set_allocated_capture_award(::POGOProtos::Data::Capture::CaptureAward* capture_award) {
  delete capture_award_;
  capture_award_ = capture_award;
  if (capture_award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.CatchPokemonResponse.capture_award)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
