// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/UseIncenseResponse.proto

#ifndef PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fUseIncenseResponse_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fUseIncenseResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "POGOProtos/Inventory/AppliedItem.pb.h"
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fUseIncenseResponse_2eproto();
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fUseIncenseResponse_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fUseIncenseResponse_2eproto();

class UseIncenseResponse;

enum UseIncenseResponse_Result {
  UseIncenseResponse_Result_UNKNOWN = 0,
  UseIncenseResponse_Result_SUCCESS = 1,
  UseIncenseResponse_Result_INCENSE_ALREADY_ACTIVE = 2,
  UseIncenseResponse_Result_NONE_IN_INVENTORY = 3,
  UseIncenseResponse_Result_LOCATION_UNSET = 4,
  UseIncenseResponse_Result_UseIncenseResponse_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UseIncenseResponse_Result_UseIncenseResponse_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UseIncenseResponse_Result_IsValid(int value);
const UseIncenseResponse_Result UseIncenseResponse_Result_Result_MIN = UseIncenseResponse_Result_UNKNOWN;
const UseIncenseResponse_Result UseIncenseResponse_Result_Result_MAX = UseIncenseResponse_Result_LOCATION_UNSET;
const int UseIncenseResponse_Result_Result_ARRAYSIZE = UseIncenseResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* UseIncenseResponse_Result_descriptor();
inline const ::std::string& UseIncenseResponse_Result_Name(UseIncenseResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    UseIncenseResponse_Result_descriptor(), value);
}
inline bool UseIncenseResponse_Result_Parse(
    const ::std::string& name, UseIncenseResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UseIncenseResponse_Result>(
    UseIncenseResponse_Result_descriptor(), name, value);
}
// ===================================================================

class UseIncenseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Networking.Responses.UseIncenseResponse) */ {
 public:
  UseIncenseResponse();
  virtual ~UseIncenseResponse();

  UseIncenseResponse(const UseIncenseResponse& from);

  inline UseIncenseResponse& operator=(const UseIncenseResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseIncenseResponse& default_instance();

  void Swap(UseIncenseResponse* other);

  // implements Message ----------------------------------------------

  inline UseIncenseResponse* New() const { return New(NULL); }

  UseIncenseResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseIncenseResponse& from);
  void MergeFrom(const UseIncenseResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UseIncenseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UseIncenseResponse_Result Result;
  static const Result UNKNOWN =
    UseIncenseResponse_Result_UNKNOWN;
  static const Result SUCCESS =
    UseIncenseResponse_Result_SUCCESS;
  static const Result INCENSE_ALREADY_ACTIVE =
    UseIncenseResponse_Result_INCENSE_ALREADY_ACTIVE;
  static const Result NONE_IN_INVENTORY =
    UseIncenseResponse_Result_NONE_IN_INVENTORY;
  static const Result LOCATION_UNSET =
    UseIncenseResponse_Result_LOCATION_UNSET;
  static inline bool Result_IsValid(int value) {
    return UseIncenseResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    UseIncenseResponse_Result_Result_MIN;
  static const Result Result_MAX =
    UseIncenseResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    UseIncenseResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return UseIncenseResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return UseIncenseResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return UseIncenseResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .POGOProtos.Networking.Responses.UseIncenseResponse.Result result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::POGOProtos::Networking::Responses::UseIncenseResponse_Result result() const;
  void set_result(::POGOProtos::Networking::Responses::UseIncenseResponse_Result value);

  // optional .POGOProtos.Inventory.AppliedItem applied_incense = 2;
  bool has_applied_incense() const;
  void clear_applied_incense();
  static const int kAppliedIncenseFieldNumber = 2;
  const ::POGOProtos::Inventory::AppliedItem& applied_incense() const;
  ::POGOProtos::Inventory::AppliedItem* mutable_applied_incense();
  ::POGOProtos::Inventory::AppliedItem* release_applied_incense();
  void set_allocated_applied_incense(::POGOProtos::Inventory::AppliedItem* applied_incense);

  // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.UseIncenseResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::POGOProtos::Inventory::AppliedItem* applied_incense_;
  int result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fUseIncenseResponse_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fUseIncenseResponse_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fUseIncenseResponse_2eproto();

  void InitAsDefaultInstance();
  static UseIncenseResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UseIncenseResponse

// optional .POGOProtos.Networking.Responses.UseIncenseResponse.Result result = 1;
inline void UseIncenseResponse::clear_result() {
  result_ = 0;
}
inline ::POGOProtos::Networking::Responses::UseIncenseResponse_Result UseIncenseResponse::result() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.UseIncenseResponse.result)
  return static_cast< ::POGOProtos::Networking::Responses::UseIncenseResponse_Result >(result_);
}
inline void UseIncenseResponse::set_result(::POGOProtos::Networking::Responses::UseIncenseResponse_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.UseIncenseResponse.result)
}

// optional .POGOProtos.Inventory.AppliedItem applied_incense = 2;
inline bool UseIncenseResponse::has_applied_incense() const {
  return !_is_default_instance_ && applied_incense_ != NULL;
}
inline void UseIncenseResponse::clear_applied_incense() {
  if (GetArenaNoVirtual() == NULL && applied_incense_ != NULL) delete applied_incense_;
  applied_incense_ = NULL;
}
inline const ::POGOProtos::Inventory::AppliedItem& UseIncenseResponse::applied_incense() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.UseIncenseResponse.applied_incense)
  return applied_incense_ != NULL ? *applied_incense_ : *default_instance_->applied_incense_;
}
inline ::POGOProtos::Inventory::AppliedItem* UseIncenseResponse::mutable_applied_incense() {
  
  if (applied_incense_ == NULL) {
    applied_incense_ = new ::POGOProtos::Inventory::AppliedItem;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.UseIncenseResponse.applied_incense)
  return applied_incense_;
}
inline ::POGOProtos::Inventory::AppliedItem* UseIncenseResponse::release_applied_incense() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.UseIncenseResponse.applied_incense)
  
  ::POGOProtos::Inventory::AppliedItem* temp = applied_incense_;
  applied_incense_ = NULL;
  return temp;
}
inline void UseIncenseResponse::set_allocated_applied_incense(::POGOProtos::Inventory::AppliedItem* applied_incense) {
  delete applied_incense_;
  applied_incense_ = applied_incense;
  if (applied_incense) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.UseIncenseResponse.applied_incense)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::POGOProtos::Networking::Responses::UseIncenseResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::POGOProtos::Networking::Responses::UseIncenseResponse_Result>() {
  return ::POGOProtos::Networking::Responses::UseIncenseResponse_Result_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fUseIncenseResponse_2eproto__INCLUDED
