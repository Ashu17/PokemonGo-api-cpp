// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/EquipBadgeResponse.proto

#ifndef PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fEquipBadgeResponse_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fEquipBadgeResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "POGOProtos/Data/Player/EquippedBadge.pb.h"
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fEquipBadgeResponse_2eproto();
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fEquipBadgeResponse_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fEquipBadgeResponse_2eproto();

class EquipBadgeResponse;

enum EquipBadgeResponse_Result {
  EquipBadgeResponse_Result_UNSET = 0,
  EquipBadgeResponse_Result_SUCCESS = 1,
  EquipBadgeResponse_Result_COOLDOWN_ACTIVE = 2,
  EquipBadgeResponse_Result_NOT_QUALIFIED = 3,
  EquipBadgeResponse_Result_EquipBadgeResponse_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EquipBadgeResponse_Result_EquipBadgeResponse_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EquipBadgeResponse_Result_IsValid(int value);
const EquipBadgeResponse_Result EquipBadgeResponse_Result_Result_MIN = EquipBadgeResponse_Result_UNSET;
const EquipBadgeResponse_Result EquipBadgeResponse_Result_Result_MAX = EquipBadgeResponse_Result_NOT_QUALIFIED;
const int EquipBadgeResponse_Result_Result_ARRAYSIZE = EquipBadgeResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* EquipBadgeResponse_Result_descriptor();
inline const ::std::string& EquipBadgeResponse_Result_Name(EquipBadgeResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    EquipBadgeResponse_Result_descriptor(), value);
}
inline bool EquipBadgeResponse_Result_Parse(
    const ::std::string& name, EquipBadgeResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipBadgeResponse_Result>(
    EquipBadgeResponse_Result_descriptor(), name, value);
}
// ===================================================================

class EquipBadgeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Networking.Responses.EquipBadgeResponse) */ {
 public:
  EquipBadgeResponse();
  virtual ~EquipBadgeResponse();

  EquipBadgeResponse(const EquipBadgeResponse& from);

  inline EquipBadgeResponse& operator=(const EquipBadgeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipBadgeResponse& default_instance();

  void Swap(EquipBadgeResponse* other);

  // implements Message ----------------------------------------------

  inline EquipBadgeResponse* New() const { return New(NULL); }

  EquipBadgeResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipBadgeResponse& from);
  void MergeFrom(const EquipBadgeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EquipBadgeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EquipBadgeResponse_Result Result;
  static const Result UNSET =
    EquipBadgeResponse_Result_UNSET;
  static const Result SUCCESS =
    EquipBadgeResponse_Result_SUCCESS;
  static const Result COOLDOWN_ACTIVE =
    EquipBadgeResponse_Result_COOLDOWN_ACTIVE;
  static const Result NOT_QUALIFIED =
    EquipBadgeResponse_Result_NOT_QUALIFIED;
  static inline bool Result_IsValid(int value) {
    return EquipBadgeResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    EquipBadgeResponse_Result_Result_MIN;
  static const Result Result_MAX =
    EquipBadgeResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    EquipBadgeResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return EquipBadgeResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return EquipBadgeResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return EquipBadgeResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .POGOProtos.Networking.Responses.EquipBadgeResponse.Result result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::POGOProtos::Networking::Responses::EquipBadgeResponse_Result result() const;
  void set_result(::POGOProtos::Networking::Responses::EquipBadgeResponse_Result value);

  // optional .POGOProtos.Data.Player.EquippedBadge equipped = 2;
  bool has_equipped() const;
  void clear_equipped();
  static const int kEquippedFieldNumber = 2;
  const ::POGOProtos::Data::Player::EquippedBadge& equipped() const;
  ::POGOProtos::Data::Player::EquippedBadge* mutable_equipped();
  ::POGOProtos::Data::Player::EquippedBadge* release_equipped();
  void set_allocated_equipped(::POGOProtos::Data::Player::EquippedBadge* equipped);

  // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.EquipBadgeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::POGOProtos::Data::Player::EquippedBadge* equipped_;
  int result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fEquipBadgeResponse_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fEquipBadgeResponse_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fEquipBadgeResponse_2eproto();

  void InitAsDefaultInstance();
  static EquipBadgeResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EquipBadgeResponse

// optional .POGOProtos.Networking.Responses.EquipBadgeResponse.Result result = 1;
inline void EquipBadgeResponse::clear_result() {
  result_ = 0;
}
inline ::POGOProtos::Networking::Responses::EquipBadgeResponse_Result EquipBadgeResponse::result() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.EquipBadgeResponse.result)
  return static_cast< ::POGOProtos::Networking::Responses::EquipBadgeResponse_Result >(result_);
}
inline void EquipBadgeResponse::set_result(::POGOProtos::Networking::Responses::EquipBadgeResponse_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.EquipBadgeResponse.result)
}

// optional .POGOProtos.Data.Player.EquippedBadge equipped = 2;
inline bool EquipBadgeResponse::has_equipped() const {
  return !_is_default_instance_ && equipped_ != NULL;
}
inline void EquipBadgeResponse::clear_equipped() {
  if (GetArenaNoVirtual() == NULL && equipped_ != NULL) delete equipped_;
  equipped_ = NULL;
}
inline const ::POGOProtos::Data::Player::EquippedBadge& EquipBadgeResponse::equipped() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.EquipBadgeResponse.equipped)
  return equipped_ != NULL ? *equipped_ : *default_instance_->equipped_;
}
inline ::POGOProtos::Data::Player::EquippedBadge* EquipBadgeResponse::mutable_equipped() {
  
  if (equipped_ == NULL) {
    equipped_ = new ::POGOProtos::Data::Player::EquippedBadge;
  }
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.EquipBadgeResponse.equipped)
  return equipped_;
}
inline ::POGOProtos::Data::Player::EquippedBadge* EquipBadgeResponse::release_equipped() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.EquipBadgeResponse.equipped)
  
  ::POGOProtos::Data::Player::EquippedBadge* temp = equipped_;
  equipped_ = NULL;
  return temp;
}
inline void EquipBadgeResponse::set_allocated_equipped(::POGOProtos::Data::Player::EquippedBadge* equipped) {
  delete equipped_;
  equipped_ = equipped;
  if (equipped) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.EquipBadgeResponse.equipped)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::POGOProtos::Networking::Responses::EquipBadgeResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::POGOProtos::Networking::Responses::EquipBadgeResponse_Result>() {
  return ::POGOProtos::Networking::Responses::EquipBadgeResponse_Result_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fNetworking_2fResponses_2fEquipBadgeResponse_2eproto__INCLUDED
