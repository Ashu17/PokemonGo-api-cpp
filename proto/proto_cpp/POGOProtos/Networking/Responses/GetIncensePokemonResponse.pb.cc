// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/GetIncensePokemonResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Networking/Responses/GetIncensePokemonResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Responses {

namespace {

const ::google::protobuf::Descriptor* GetIncensePokemonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetIncensePokemonResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetIncensePokemonResponse_Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto() {
  protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Networking/Responses/GetIncensePokemonResponse.proto");
  GOOGLE_CHECK(file != NULL);
  GetIncensePokemonResponse_descriptor_ = file->message_type(0);
  static const int GetIncensePokemonResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncensePokemonResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncensePokemonResponse, pokemon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncensePokemonResponse, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncensePokemonResponse, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncensePokemonResponse, encounter_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncensePokemonResponse, encounter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncensePokemonResponse, disappear_timestamp_ms_),
  };
  GetIncensePokemonResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetIncensePokemonResponse_descriptor_,
      GetIncensePokemonResponse::default_instance_,
      GetIncensePokemonResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetIncensePokemonResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncensePokemonResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncensePokemonResponse, _is_default_instance_));
  GetIncensePokemonResponse_Result_descriptor_ = GetIncensePokemonResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetIncensePokemonResponse_descriptor_, &GetIncensePokemonResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto() {
  delete GetIncensePokemonResponse::default_instance_;
  delete GetIncensePokemonResponse_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Enums::protobuf_AddDesc_POGOProtos_2fEnums_2fPokemonId_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\?POGOProtos/Networking/Responses/GetInc"
    "ensePokemonResponse.proto\022\037POGOProtos.Ne"
    "tworking.Responses\032 POGOProtos/Enums/Pok"
    "emonId.proto\"\205\003\n\031GetIncensePokemonRespon"
    "se\022Q\n\006result\030\001 \001(\0162A.POGOProtos.Networki"
    "ng.Responses.GetIncensePokemonResponse.R"
    "esult\022/\n\npokemon_id\030\002 \001(\0162\033.POGOProtos.E"
    "nums.PokemonId\022\020\n\010latitude\030\003 \001(\001\022\021\n\tlong"
    "itude\030\004 \001(\001\022\032\n\022encounter_location\030\005 \001(\t\022"
    "\024\n\014encounter_id\030\006 \001(\006\022\036\n\026disappear_times"
    "tamp_ms\030\007 \001(\003\"m\n\006Result\022\035\n\031INCENSE_ENCOU"
    "NTER_UNKNOWN\020\000\022\037\n\033INCENSE_ENCOUNTER_AVAI"
    "LABLE\020\001\022#\n\037INCENSE_ENCOUNTER_NOT_AVAILAB"
    "LE\020\002b\006proto3", 532);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Networking/Responses/GetIncensePokemonResponse.proto", &protobuf_RegisterTypes);
  GetIncensePokemonResponse::default_instance_ = new GetIncensePokemonResponse();
  GetIncensePokemonResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto() {
    protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* GetIncensePokemonResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIncensePokemonResponse_Result_descriptor_;
}
bool GetIncensePokemonResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetIncensePokemonResponse_Result GetIncensePokemonResponse::INCENSE_ENCOUNTER_UNKNOWN;
const GetIncensePokemonResponse_Result GetIncensePokemonResponse::INCENSE_ENCOUNTER_AVAILABLE;
const GetIncensePokemonResponse_Result GetIncensePokemonResponse::INCENSE_ENCOUNTER_NOT_AVAILABLE;
const GetIncensePokemonResponse_Result GetIncensePokemonResponse::Result_MIN;
const GetIncensePokemonResponse_Result GetIncensePokemonResponse::Result_MAX;
const int GetIncensePokemonResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetIncensePokemonResponse::kResultFieldNumber;
const int GetIncensePokemonResponse::kPokemonIdFieldNumber;
const int GetIncensePokemonResponse::kLatitudeFieldNumber;
const int GetIncensePokemonResponse::kLongitudeFieldNumber;
const int GetIncensePokemonResponse::kEncounterLocationFieldNumber;
const int GetIncensePokemonResponse::kEncounterIdFieldNumber;
const int GetIncensePokemonResponse::kDisappearTimestampMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetIncensePokemonResponse::GetIncensePokemonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
}

void GetIncensePokemonResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetIncensePokemonResponse::GetIncensePokemonResponse(const GetIncensePokemonResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
}

void GetIncensePokemonResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  pokemon_id_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  encounter_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encounter_id_ = GOOGLE_ULONGLONG(0);
  disappear_timestamp_ms_ = GOOGLE_LONGLONG(0);
}

GetIncensePokemonResponse::~GetIncensePokemonResponse() {
  // @@protoc_insertion_point(destructor:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  SharedDtor();
}

void GetIncensePokemonResponse::SharedDtor() {
  encounter_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetIncensePokemonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIncensePokemonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIncensePokemonResponse_descriptor_;
}

const GetIncensePokemonResponse& GetIncensePokemonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fNetworking_2fResponses_2fGetIncensePokemonResponse_2eproto();
  return *default_instance_;
}

GetIncensePokemonResponse* GetIncensePokemonResponse::default_instance_ = NULL;

GetIncensePokemonResponse* GetIncensePokemonResponse::New(::google::protobuf::Arena* arena) const {
  GetIncensePokemonResponse* n = new GetIncensePokemonResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetIncensePokemonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetIncensePokemonResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetIncensePokemonResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, longitude_);
  ZR_(encounter_id_, disappear_timestamp_ms_);
  encounter_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GetIncensePokemonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .POGOProtos.Networking.Responses.GetIncensePokemonResponse.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::POGOProtos::Networking::Responses::GetIncensePokemonResponse_Result >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pokemon_id;
        break;
      }

      // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
      case 2: {
        if (tag == 16) {
         parse_pokemon_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pokemon_id(static_cast< ::POGOProtos::Enums::PokemonId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // optional double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // optional double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_encounter_location;
        break;
      }

      // optional string encounter_location = 5;
      case 5: {
        if (tag == 42) {
         parse_encounter_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encounter_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->encounter_location().data(), this->encounter_location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_encounter_id;
        break;
      }

      // optional fixed64 encounter_id = 6;
      case 6: {
        if (tag == 49) {
         parse_encounter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &encounter_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_disappear_timestamp_ms;
        break;
      }

      // optional int64 disappear_timestamp_ms = 7;
      case 7: {
        if (tag == 56) {
         parse_disappear_timestamp_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &disappear_timestamp_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  return false;
#undef DO_
}

void GetIncensePokemonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  // optional .POGOProtos.Networking.Responses.GetIncensePokemonResponse.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
  if (this->pokemon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pokemon_id(), output);
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // optional string encounter_location = 5;
  if (this->encounter_location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encounter_location().data(), this->encounter_location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->encounter_location(), output);
  }

  // optional fixed64 encounter_id = 6;
  if (this->encounter_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->encounter_id(), output);
  }

  // optional int64 disappear_timestamp_ms = 7;
  if (this->disappear_timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->disappear_timestamp_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
}

::google::protobuf::uint8* GetIncensePokemonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  // optional .POGOProtos.Networking.Responses.GetIncensePokemonResponse.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
  if (this->pokemon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pokemon_id(), target);
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // optional string encounter_location = 5;
  if (this->encounter_location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encounter_location().data(), this->encounter_location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->encounter_location(), target);
  }

  // optional fixed64 encounter_id = 6;
  if (this->encounter_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->encounter_id(), target);
  }

  // optional int64 disappear_timestamp_ms = 7;
  if (this->disappear_timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->disappear_timestamp_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  return target;
}

int GetIncensePokemonResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  int total_size = 0;

  // optional .POGOProtos.Networking.Responses.GetIncensePokemonResponse.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
  if (this->pokemon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pokemon_id());
  }

  // optional double latitude = 3;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // optional double longitude = 4;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // optional string encounter_location = 5;
  if (this->encounter_location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->encounter_location());
  }

  // optional fixed64 encounter_id = 6;
  if (this->encounter_id() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 disappear_timestamp_ms = 7;
  if (this->disappear_timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->disappear_timestamp_ms());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIncensePokemonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetIncensePokemonResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetIncensePokemonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
    MergeFrom(*source);
  }
}

void GetIncensePokemonResponse::MergeFrom(const GetIncensePokemonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.pokemon_id() != 0) {
    set_pokemon_id(from.pokemon_id());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.encounter_location().size() > 0) {

    encounter_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encounter_location_);
  }
  if (from.encounter_id() != 0) {
    set_encounter_id(from.encounter_id());
  }
  if (from.disappear_timestamp_ms() != 0) {
    set_disappear_timestamp_ms(from.disappear_timestamp_ms());
  }
}

void GetIncensePokemonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIncensePokemonResponse::CopyFrom(const GetIncensePokemonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIncensePokemonResponse::IsInitialized() const {

  return true;
}

void GetIncensePokemonResponse::Swap(GetIncensePokemonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetIncensePokemonResponse::InternalSwap(GetIncensePokemonResponse* other) {
  std::swap(result_, other->result_);
  std::swap(pokemon_id_, other->pokemon_id_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  encounter_location_.Swap(&other->encounter_location_);
  std::swap(encounter_id_, other->encounter_id_);
  std::swap(disappear_timestamp_ms_, other->disappear_timestamp_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetIncensePokemonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetIncensePokemonResponse_descriptor_;
  metadata.reflection = GetIncensePokemonResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetIncensePokemonResponse

// optional .POGOProtos.Networking.Responses.GetIncensePokemonResponse.Result result = 1;
void GetIncensePokemonResponse::clear_result() {
  result_ = 0;
}
 ::POGOProtos::Networking::Responses::GetIncensePokemonResponse_Result GetIncensePokemonResponse::result() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.GetIncensePokemonResponse.result)
  return static_cast< ::POGOProtos::Networking::Responses::GetIncensePokemonResponse_Result >(result_);
}
 void GetIncensePokemonResponse::set_result(::POGOProtos::Networking::Responses::GetIncensePokemonResponse_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.GetIncensePokemonResponse.result)
}

// optional .POGOProtos.Enums.PokemonId pokemon_id = 2;
void GetIncensePokemonResponse::clear_pokemon_id() {
  pokemon_id_ = 0;
}
 ::POGOProtos::Enums::PokemonId GetIncensePokemonResponse::pokemon_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.GetIncensePokemonResponse.pokemon_id)
  return static_cast< ::POGOProtos::Enums::PokemonId >(pokemon_id_);
}
 void GetIncensePokemonResponse::set_pokemon_id(::POGOProtos::Enums::PokemonId value) {
  
  pokemon_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.GetIncensePokemonResponse.pokemon_id)
}

// optional double latitude = 3;
void GetIncensePokemonResponse::clear_latitude() {
  latitude_ = 0;
}
 double GetIncensePokemonResponse::latitude() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.GetIncensePokemonResponse.latitude)
  return latitude_;
}
 void GetIncensePokemonResponse::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.GetIncensePokemonResponse.latitude)
}

// optional double longitude = 4;
void GetIncensePokemonResponse::clear_longitude() {
  longitude_ = 0;
}
 double GetIncensePokemonResponse::longitude() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.GetIncensePokemonResponse.longitude)
  return longitude_;
}
 void GetIncensePokemonResponse::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.GetIncensePokemonResponse.longitude)
}

// optional string encounter_location = 5;
void GetIncensePokemonResponse::clear_encounter_location() {
  encounter_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetIncensePokemonResponse::encounter_location() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_location)
  return encounter_location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetIncensePokemonResponse::set_encounter_location(const ::std::string& value) {
  
  encounter_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_location)
}
 void GetIncensePokemonResponse::set_encounter_location(const char* value) {
  
  encounter_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_location)
}
 void GetIncensePokemonResponse::set_encounter_location(const char* value, size_t size) {
  
  encounter_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_location)
}
 ::std::string* GetIncensePokemonResponse::mutable_encounter_location() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_location)
  return encounter_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetIncensePokemonResponse::release_encounter_location() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_location)
  
  return encounter_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetIncensePokemonResponse::set_allocated_encounter_location(::std::string* encounter_location) {
  if (encounter_location != NULL) {
    
  } else {
    
  }
  encounter_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encounter_location);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_location)
}

// optional fixed64 encounter_id = 6;
void GetIncensePokemonResponse::clear_encounter_id() {
  encounter_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GetIncensePokemonResponse::encounter_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_id)
  return encounter_id_;
}
 void GetIncensePokemonResponse::set_encounter_id(::google::protobuf::uint64 value) {
  
  encounter_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.GetIncensePokemonResponse.encounter_id)
}

// optional int64 disappear_timestamp_ms = 7;
void GetIncensePokemonResponse::clear_disappear_timestamp_ms() {
  disappear_timestamp_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetIncensePokemonResponse::disappear_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Responses.GetIncensePokemonResponse.disappear_timestamp_ms)
  return disappear_timestamp_ms_;
}
 void GetIncensePokemonResponse::set_disappear_timestamp_ms(::google::protobuf::int64 value) {
  
  disappear_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Responses.GetIncensePokemonResponse.disappear_timestamp_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Responses
}  // namespace Networking
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
