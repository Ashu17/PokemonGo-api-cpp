// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Requests/Messages/CatchPokemonMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "POGOProtos/Networking/Requests/Messages/CatchPokemonMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Requests {
namespace Messages {

namespace {

const ::google::protobuf::Descriptor* CatchPokemonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatchPokemonMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto() {
  protobuf_AddDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "POGOProtos/Networking/Requests/Messages/CatchPokemonMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CatchPokemonMessage_descriptor_ = file->message_type(0);
  static const int CatchPokemonMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonMessage, encounter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonMessage, pokeball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonMessage, normalized_reticle_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonMessage, spawn_point_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonMessage, hit_pokemon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonMessage, spin_modifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonMessage, normalized_hit_position_),
  };
  CatchPokemonMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CatchPokemonMessage_descriptor_,
      CatchPokemonMessage::default_instance_,
      CatchPokemonMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(CatchPokemonMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPokemonMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CatchPokemonMessage_descriptor_, &CatchPokemonMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto() {
  delete CatchPokemonMessage::default_instance_;
  delete CatchPokemonMessage_reflection_;
}

void protobuf_AddDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::POGOProtos::Inventory::Item::protobuf_AddDesc_POGOProtos_2fInventory_2fItem_2fItemId_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nAPOGOProtos/Networking/Requests/Message"
    "s/CatchPokemonMessage.proto\022\'POGOProtos."
    "Networking.Requests.Messages\032&POGOProtos"
    "/Inventory/Item/ItemId.proto\"\346\001\n\023CatchPo"
    "kemonMessage\022\024\n\014encounter_id\030\001 \001(\006\0223\n\010po"
    "keball\030\002 \001(\0162!.POGOProtos.Inventory.Item"
    ".ItemId\022\037\n\027normalized_reticle_size\030\003 \001(\001"
    "\022\026\n\016spawn_point_id\030\004 \001(\t\022\023\n\013hit_pokemon\030"
    "\005 \001(\010\022\025\n\rspin_modifier\030\006 \001(\001\022\037\n\027normaliz"
    "ed_hit_position\030\007 \001(\001b\006proto3", 389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "POGOProtos/Networking/Requests/Messages/CatchPokemonMessage.proto", &protobuf_RegisterTypes);
  CatchPokemonMessage::default_instance_ = new CatchPokemonMessage();
  CatchPokemonMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto {
  StaticDescriptorInitializer_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto() {
    protobuf_AddDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto();
  }
} static_descriptor_initializer_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatchPokemonMessage::kEncounterIdFieldNumber;
const int CatchPokemonMessage::kPokeballFieldNumber;
const int CatchPokemonMessage::kNormalizedReticleSizeFieldNumber;
const int CatchPokemonMessage::kSpawnPointIdFieldNumber;
const int CatchPokemonMessage::kHitPokemonFieldNumber;
const int CatchPokemonMessage::kSpinModifierFieldNumber;
const int CatchPokemonMessage::kNormalizedHitPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatchPokemonMessage::CatchPokemonMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
}

void CatchPokemonMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CatchPokemonMessage::CatchPokemonMessage(const CatchPokemonMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
}

void CatchPokemonMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  encounter_id_ = GOOGLE_ULONGLONG(0);
  pokeball_ = 0;
  normalized_reticle_size_ = 0;
  spawn_point_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hit_pokemon_ = false;
  spin_modifier_ = 0;
  normalized_hit_position_ = 0;
}

CatchPokemonMessage::~CatchPokemonMessage() {
  // @@protoc_insertion_point(destructor:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  SharedDtor();
}

void CatchPokemonMessage::SharedDtor() {
  spawn_point_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CatchPokemonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatchPokemonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchPokemonMessage_descriptor_;
}

const CatchPokemonMessage& CatchPokemonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fCatchPokemonMessage_2eproto();
  return *default_instance_;
}

CatchPokemonMessage* CatchPokemonMessage::default_instance_ = NULL;

CatchPokemonMessage* CatchPokemonMessage::New(::google::protobuf::Arena* arena) const {
  CatchPokemonMessage* n = new CatchPokemonMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CatchPokemonMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CatchPokemonMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CatchPokemonMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(encounter_id_, hit_pokemon_);
  ZR_(spin_modifier_, normalized_hit_position_);
  spawn_point_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CatchPokemonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 encounter_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &encounter_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pokeball;
        break;
      }

      // optional .POGOProtos.Inventory.Item.ItemId pokeball = 2;
      case 2: {
        if (tag == 16) {
         parse_pokeball:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pokeball(static_cast< ::POGOProtos::Inventory::Item::ItemId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_normalized_reticle_size;
        break;
      }

      // optional double normalized_reticle_size = 3;
      case 3: {
        if (tag == 25) {
         parse_normalized_reticle_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &normalized_reticle_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_spawn_point_id;
        break;
      }

      // optional string spawn_point_id = 4;
      case 4: {
        if (tag == 34) {
         parse_spawn_point_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spawn_point_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spawn_point_id().data(), this->spawn_point_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spawn_point_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hit_pokemon;
        break;
      }

      // optional bool hit_pokemon = 5;
      case 5: {
        if (tag == 40) {
         parse_hit_pokemon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hit_pokemon_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_spin_modifier;
        break;
      }

      // optional double spin_modifier = 6;
      case 6: {
        if (tag == 49) {
         parse_spin_modifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spin_modifier_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_normalized_hit_position;
        break;
      }

      // optional double normalized_hit_position = 7;
      case 7: {
        if (tag == 57) {
         parse_normalized_hit_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &normalized_hit_position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  return false;
#undef DO_
}

void CatchPokemonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  // optional fixed64 encounter_id = 1;
  if (this->encounter_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->encounter_id(), output);
  }

  // optional .POGOProtos.Inventory.Item.ItemId pokeball = 2;
  if (this->pokeball() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pokeball(), output);
  }

  // optional double normalized_reticle_size = 3;
  if (this->normalized_reticle_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->normalized_reticle_size(), output);
  }

  // optional string spawn_point_id = 4;
  if (this->spawn_point_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spawn_point_id().data(), this->spawn_point_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spawn_point_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->spawn_point_id(), output);
  }

  // optional bool hit_pokemon = 5;
  if (this->hit_pokemon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hit_pokemon(), output);
  }

  // optional double spin_modifier = 6;
  if (this->spin_modifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->spin_modifier(), output);
  }

  // optional double normalized_hit_position = 7;
  if (this->normalized_hit_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->normalized_hit_position(), output);
  }

  // @@protoc_insertion_point(serialize_end:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
}

::google::protobuf::uint8* CatchPokemonMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  // optional fixed64 encounter_id = 1;
  if (this->encounter_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->encounter_id(), target);
  }

  // optional .POGOProtos.Inventory.Item.ItemId pokeball = 2;
  if (this->pokeball() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pokeball(), target);
  }

  // optional double normalized_reticle_size = 3;
  if (this->normalized_reticle_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->normalized_reticle_size(), target);
  }

  // optional string spawn_point_id = 4;
  if (this->spawn_point_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spawn_point_id().data(), this->spawn_point_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spawn_point_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->spawn_point_id(), target);
  }

  // optional bool hit_pokemon = 5;
  if (this->hit_pokemon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hit_pokemon(), target);
  }

  // optional double spin_modifier = 6;
  if (this->spin_modifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->spin_modifier(), target);
  }

  // optional double normalized_hit_position = 7;
  if (this->normalized_hit_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->normalized_hit_position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  return target;
}

int CatchPokemonMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  int total_size = 0;

  // optional fixed64 encounter_id = 1;
  if (this->encounter_id() != 0) {
    total_size += 1 + 8;
  }

  // optional .POGOProtos.Inventory.Item.ItemId pokeball = 2;
  if (this->pokeball() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pokeball());
  }

  // optional double normalized_reticle_size = 3;
  if (this->normalized_reticle_size() != 0) {
    total_size += 1 + 8;
  }

  // optional string spawn_point_id = 4;
  if (this->spawn_point_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spawn_point_id());
  }

  // optional bool hit_pokemon = 5;
  if (this->hit_pokemon() != 0) {
    total_size += 1 + 1;
  }

  // optional double spin_modifier = 6;
  if (this->spin_modifier() != 0) {
    total_size += 1 + 8;
  }

  // optional double normalized_hit_position = 7;
  if (this->normalized_hit_position() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatchPokemonMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CatchPokemonMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CatchPokemonMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
    MergeFrom(*source);
  }
}

void CatchPokemonMessage::MergeFrom(const CatchPokemonMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.encounter_id() != 0) {
    set_encounter_id(from.encounter_id());
  }
  if (from.pokeball() != 0) {
    set_pokeball(from.pokeball());
  }
  if (from.normalized_reticle_size() != 0) {
    set_normalized_reticle_size(from.normalized_reticle_size());
  }
  if (from.spawn_point_id().size() > 0) {

    spawn_point_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spawn_point_id_);
  }
  if (from.hit_pokemon() != 0) {
    set_hit_pokemon(from.hit_pokemon());
  }
  if (from.spin_modifier() != 0) {
    set_spin_modifier(from.spin_modifier());
  }
  if (from.normalized_hit_position() != 0) {
    set_normalized_hit_position(from.normalized_hit_position());
  }
}

void CatchPokemonMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatchPokemonMessage::CopyFrom(const CatchPokemonMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatchPokemonMessage::IsInitialized() const {

  return true;
}

void CatchPokemonMessage::Swap(CatchPokemonMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatchPokemonMessage::InternalSwap(CatchPokemonMessage* other) {
  std::swap(encounter_id_, other->encounter_id_);
  std::swap(pokeball_, other->pokeball_);
  std::swap(normalized_reticle_size_, other->normalized_reticle_size_);
  spawn_point_id_.Swap(&other->spawn_point_id_);
  std::swap(hit_pokemon_, other->hit_pokemon_);
  std::swap(spin_modifier_, other->spin_modifier_);
  std::swap(normalized_hit_position_, other->normalized_hit_position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CatchPokemonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatchPokemonMessage_descriptor_;
  metadata.reflection = CatchPokemonMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CatchPokemonMessage

// optional fixed64 encounter_id = 1;
void CatchPokemonMessage::clear_encounter_id() {
  encounter_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CatchPokemonMessage::encounter_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.encounter_id)
  return encounter_id_;
}
 void CatchPokemonMessage::set_encounter_id(::google::protobuf::uint64 value) {
  
  encounter_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.encounter_id)
}

// optional .POGOProtos.Inventory.Item.ItemId pokeball = 2;
void CatchPokemonMessage::clear_pokeball() {
  pokeball_ = 0;
}
 ::POGOProtos::Inventory::Item::ItemId CatchPokemonMessage::pokeball() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.pokeball)
  return static_cast< ::POGOProtos::Inventory::Item::ItemId >(pokeball_);
}
 void CatchPokemonMessage::set_pokeball(::POGOProtos::Inventory::Item::ItemId value) {
  
  pokeball_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.pokeball)
}

// optional double normalized_reticle_size = 3;
void CatchPokemonMessage::clear_normalized_reticle_size() {
  normalized_reticle_size_ = 0;
}
 double CatchPokemonMessage::normalized_reticle_size() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.normalized_reticle_size)
  return normalized_reticle_size_;
}
 void CatchPokemonMessage::set_normalized_reticle_size(double value) {
  
  normalized_reticle_size_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.normalized_reticle_size)
}

// optional string spawn_point_id = 4;
void CatchPokemonMessage::clear_spawn_point_id() {
  spawn_point_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CatchPokemonMessage::spawn_point_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spawn_point_id)
  return spawn_point_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CatchPokemonMessage::set_spawn_point_id(const ::std::string& value) {
  
  spawn_point_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spawn_point_id)
}
 void CatchPokemonMessage::set_spawn_point_id(const char* value) {
  
  spawn_point_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spawn_point_id)
}
 void CatchPokemonMessage::set_spawn_point_id(const char* value, size_t size) {
  
  spawn_point_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spawn_point_id)
}
 ::std::string* CatchPokemonMessage::mutable_spawn_point_id() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spawn_point_id)
  return spawn_point_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CatchPokemonMessage::release_spawn_point_id() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spawn_point_id)
  
  return spawn_point_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CatchPokemonMessage::set_allocated_spawn_point_id(::std::string* spawn_point_id) {
  if (spawn_point_id != NULL) {
    
  } else {
    
  }
  spawn_point_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spawn_point_id);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spawn_point_id)
}

// optional bool hit_pokemon = 5;
void CatchPokemonMessage::clear_hit_pokemon() {
  hit_pokemon_ = false;
}
 bool CatchPokemonMessage::hit_pokemon() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.hit_pokemon)
  return hit_pokemon_;
}
 void CatchPokemonMessage::set_hit_pokemon(bool value) {
  
  hit_pokemon_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.hit_pokemon)
}

// optional double spin_modifier = 6;
void CatchPokemonMessage::clear_spin_modifier() {
  spin_modifier_ = 0;
}
 double CatchPokemonMessage::spin_modifier() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spin_modifier)
  return spin_modifier_;
}
 void CatchPokemonMessage::set_spin_modifier(double value) {
  
  spin_modifier_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.spin_modifier)
}

// optional double normalized_hit_position = 7;
void CatchPokemonMessage::clear_normalized_hit_position() {
  normalized_hit_position_ = 0;
}
 double CatchPokemonMessage::normalized_hit_position() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.normalized_hit_position)
  return normalized_hit_position_;
}
 void CatchPokemonMessage::set_normalized_hit_position(double value) {
  
  normalized_hit_position_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Requests.Messages.CatchPokemonMessage.normalized_hit_position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace Requests
}  // namespace Networking
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)
