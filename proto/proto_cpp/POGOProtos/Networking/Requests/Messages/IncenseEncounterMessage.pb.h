// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Requests/Messages/IncenseEncounterMessage.proto

#ifndef PROTOBUF_POGOProtos_2fNetworking_2fRequests_2fMessages_2fIncenseEncounterMessage_2eproto__INCLUDED
#define PROTOBUF_POGOProtos_2fNetworking_2fRequests_2fMessages_2fIncenseEncounterMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace POGOProtos {
namespace Networking {
namespace Requests {
namespace Messages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fIncenseEncounterMessage_2eproto();
void protobuf_AssignDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fIncenseEncounterMessage_2eproto();
void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fRequests_2fMessages_2fIncenseEncounterMessage_2eproto();

class IncenseEncounterMessage;

// ===================================================================

class IncenseEncounterMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:POGOProtos.Networking.Requests.Messages.IncenseEncounterMessage) */ {
 public:
  IncenseEncounterMessage();
  virtual ~IncenseEncounterMessage();

  IncenseEncounterMessage(const IncenseEncounterMessage& from);

  inline IncenseEncounterMessage& operator=(const IncenseEncounterMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IncenseEncounterMessage& default_instance();

  void Swap(IncenseEncounterMessage* other);

  // implements Message ----------------------------------------------

  inline IncenseEncounterMessage* New() const { return New(NULL); }

  IncenseEncounterMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IncenseEncounterMessage& from);
  void MergeFrom(const IncenseEncounterMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncenseEncounterMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 encounter_id = 1;
  void clear_encounter_id();
  static const int kEncounterIdFieldNumber = 1;
  ::google::protobuf::uint64 encounter_id() const;
  void set_encounter_id(::google::protobuf::uint64 value);

  // optional string encounter_location = 2;
  void clear_encounter_location();
  static const int kEncounterLocationFieldNumber = 2;
  const ::std::string& encounter_location() const;
  void set_encounter_location(const ::std::string& value);
  void set_encounter_location(const char* value);
  void set_encounter_location(const char* value, size_t size);
  ::std::string* mutable_encounter_location();
  ::std::string* release_encounter_location();
  void set_allocated_encounter_location(::std::string* encounter_location);

  // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Requests.Messages.IncenseEncounterMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 encounter_id_;
  ::google::protobuf::internal::ArenaStringPtr encounter_location_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fIncenseEncounterMessage_2eproto();
  friend void protobuf_AssignDesc_POGOProtos_2fNetworking_2fRequests_2fMessages_2fIncenseEncounterMessage_2eproto();
  friend void protobuf_ShutdownFile_POGOProtos_2fNetworking_2fRequests_2fMessages_2fIncenseEncounterMessage_2eproto();

  void InitAsDefaultInstance();
  static IncenseEncounterMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IncenseEncounterMessage

// optional uint64 encounter_id = 1;
inline void IncenseEncounterMessage::clear_encounter_id() {
  encounter_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IncenseEncounterMessage::encounter_id() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Requests.Messages.IncenseEncounterMessage.encounter_id)
  return encounter_id_;
}
inline void IncenseEncounterMessage::set_encounter_id(::google::protobuf::uint64 value) {
  
  encounter_id_ = value;
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Requests.Messages.IncenseEncounterMessage.encounter_id)
}

// optional string encounter_location = 2;
inline void IncenseEncounterMessage::clear_encounter_location() {
  encounter_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IncenseEncounterMessage::encounter_location() const {
  // @@protoc_insertion_point(field_get:POGOProtos.Networking.Requests.Messages.IncenseEncounterMessage.encounter_location)
  return encounter_location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncenseEncounterMessage::set_encounter_location(const ::std::string& value) {
  
  encounter_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:POGOProtos.Networking.Requests.Messages.IncenseEncounterMessage.encounter_location)
}
inline void IncenseEncounterMessage::set_encounter_location(const char* value) {
  
  encounter_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:POGOProtos.Networking.Requests.Messages.IncenseEncounterMessage.encounter_location)
}
inline void IncenseEncounterMessage::set_encounter_location(const char* value, size_t size) {
  
  encounter_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:POGOProtos.Networking.Requests.Messages.IncenseEncounterMessage.encounter_location)
}
inline ::std::string* IncenseEncounterMessage::mutable_encounter_location() {
  
  // @@protoc_insertion_point(field_mutable:POGOProtos.Networking.Requests.Messages.IncenseEncounterMessage.encounter_location)
  return encounter_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncenseEncounterMessage::release_encounter_location() {
  // @@protoc_insertion_point(field_release:POGOProtos.Networking.Requests.Messages.IncenseEncounterMessage.encounter_location)
  
  return encounter_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncenseEncounterMessage::set_allocated_encounter_location(::std::string* encounter_location) {
  if (encounter_location != NULL) {
    
  } else {
    
  }
  encounter_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encounter_location);
  // @@protoc_insertion_point(field_set_allocated:POGOProtos.Networking.Requests.Messages.IncenseEncounterMessage.encounter_location)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace Requests
}  // namespace Networking
}  // namespace POGOProtos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_POGOProtos_2fNetworking_2fRequests_2fMessages_2fIncenseEncounterMessage_2eproto__INCLUDED
